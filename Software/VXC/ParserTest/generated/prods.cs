/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  VXC.analysis;

namespace VXC.node {

public abstract class PSrcFile : Node
{
}

public abstract class PDecl : Node
{
}

public abstract class PMethodDecl : Node
{
}

public abstract class PLocalDecl : Node
{
}

public abstract class PGlobalDecl : Node
{
}

public abstract class PType : Node
{
}


public sealed class ASrcFile : PSrcFile
{
    private TypedList _declarations_;

    public ASrcFile ()
    {
        this._declarations_ = new TypedList(new Declarations_Cast(this));
    }

    public ASrcFile (
            IList _declarations_
    )
    {
        this._declarations_ = new TypedList(new Declarations_Cast(this));
        this._declarations_.Clear();
        this._declarations_.AddAll(_declarations_);
    }

    public override Object Clone()
    {
        return new ASrcFile (
            CloneList (_declarations_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASrcFile(this);
    }

    public IList GetDeclarations ()
    {
        return _declarations_;
    }

    public void setDeclarations (IList list)
    {
        _declarations_.Clear();
        _declarations_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarations_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarations_.Contains(child) )
        {
            _declarations_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _declarations_.Count; i++ )
        {
            Node n = (Node)_declarations_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _declarations_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _declarations_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Declarations_Cast : Cast
    {
        ASrcFile obj;

        internal Declarations_Cast (ASrcFile obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMethodDeclDecl : PDecl
{
    private PMethodDecl _decl_;

    public AMethodDeclDecl ()
    {
    }

    public AMethodDeclDecl (
            PMethodDecl _decl_
    )
    {
        SetDecl (_decl_);
    }

    public override Object Clone()
    {
        return new AMethodDeclDecl (
            (PMethodDecl)CloneNode (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodDeclDecl(this);
    }

    public PMethodDecl GetDecl ()
    {
        return _decl_;
    }

    public void SetDecl (PMethodDecl node)
    {
        if(_decl_ != null)
        {
            _decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_ == child )
        {
            _decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_ == oldChild )
        {
            SetDecl ((PMethodDecl) newChild);
            return;
        }
    }

}
public sealed class AGlobalDeclDecl : PDecl
{
    private PGlobalDecl _decl_;

    public AGlobalDeclDecl ()
    {
    }

    public AGlobalDeclDecl (
            PGlobalDecl _decl_
    )
    {
        SetDecl (_decl_);
    }

    public override Object Clone()
    {
        return new AGlobalDeclDecl (
            (PGlobalDecl)CloneNode (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGlobalDeclDecl(this);
    }

    public PGlobalDecl GetDecl ()
    {
        return _decl_;
    }

    public void SetDecl (PGlobalDecl node)
    {
        if(_decl_ != null)
        {
            _decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_ == child )
        {
            _decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_ == oldChild )
        {
            SetDecl ((PGlobalDecl) newChild);
            return;
        }
    }

}
public sealed class AMethodDecl : PMethodDecl
{
    private PType _type_;
    private TIdentifier _name_;
    private TypedList _args_;

    public AMethodDecl ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public AMethodDecl (
            PType _type_,
            TIdentifier _name_,
            IList _args_
    )
    {
        SetType (_type_);
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new AMethodDecl (
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodDecl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Args_Cast : Cast
    {
        AMethodDecl obj;

        internal Args_Cast (AMethodDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ALocalDecl : PLocalDecl
{
    private PType _type_;
    private TIdentifier _name_;

    public ALocalDecl ()
    {
    }

    public ALocalDecl (
            PType _type_,
            TIdentifier _name_
    )
    {
        SetType (_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ALocalDecl (
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALocalDecl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AGlobalDecl : PGlobalDecl
{
    private PType _type_;
    private TIdentifier _name_;

    public AGlobalDecl ()
    {
    }

    public AGlobalDecl (
            PType _type_,
            TIdentifier _name_
    )
    {
        SetType (_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AGlobalDecl (
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGlobalDecl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AVoidType : PType
{


    public AVoidType (
    )
    {
    }

    public override Object Clone()
    {
        return new AVoidType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVoidType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASsingleType : PType
{


    public ASsingleType (
    )
    {
    }

    public override Object Clone()
    {
        return new ASsingleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASsingleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AUsingleType : PType
{


    public AUsingleType (
    )
    {
    }

    public override Object Clone()
    {
        return new AUsingleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsingleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASdoubleType : PType
{


    public ASdoubleType (
    )
    {
    }

    public override Object Clone()
    {
        return new ASdoubleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASdoubleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AUdoubleType : PType
{


    public AUdoubleType (
    )
    {
    }

    public override Object Clone()
    {
        return new AUdoubleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUdoubleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASquadType : PType
{


    public ASquadType (
    )
    {
    }

    public override Object Clone()
    {
        return new ASquadType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASquadType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AUquadType : PType
{


    public AUquadType (
    )
    {
    }

    public override Object Clone()
    {
        return new AUquadType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUquadType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFloatType : PType
{


    public AFloatType (
    )
    {
    }

    public override Object Clone()
    {
        return new AFloatType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AStringType : PType
{


    public AStringType (
    )
    {
    }

    public override Object Clone()
    {
        return new AStringType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}

public sealed class Start : Node
{
    private PSrcFile _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PSrcFile _base_,
        EOF _eof_)
    {
        SetPSrcFile(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PSrcFile) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PSrcFile GetPSrcFile()
    {
        return _base_;
    }
    public void SetPSrcFile(PSrcFile node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPSrcFile((PSrcFile) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
