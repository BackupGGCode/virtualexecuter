/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using VXC.node;

namespace VXC.lexer {

internal class PushbackReader {
  private TextReader reader;
  private Stack stack = new Stack ();


  internal PushbackReader (TextReader reader)
  {
    this.reader = reader;
  }

  internal int Peek ()
  {
    if ( stack.Count > 0 ) return (int)stack.Peek();
    return reader.Peek();
  }

  internal int Read ()
  {
    if ( stack.Count > 0 ) return (int)stack.Pop();
    return reader.Read();
  }

  internal void Unread (int v)
  {
    stack.Push (v);
  }
}

public class LexerException : ApplicationException
{
    public LexerException(String message) : base (message)
    {
    }
}

public class Lexer
{
    protected Token token;
    protected State currentState = State.INITIAL;

    private PushbackReader input;
    private int line;
    private int pos;
    private bool cr;
    private bool eof;
    private StringBuilder text = new StringBuilder();

    protected virtual void Filter()
    {
    }

    public Lexer(TextReader input)
    {
        this.input = new PushbackReader(input);
    }

    public virtual Token Peek()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        return token;
    }

    public virtual Token Next()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected virtual Token GetToken()
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = Lexer.gotoTable[currentState.id()];
        int[] accept = Lexer.accept[currentState.id()];
        text.Length = 0;

        while(true)
        {
            int c = GetChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.Append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.Length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.Length;
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = New0(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = New1(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = New2(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = New3(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = New4(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = New5(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = New6(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = New7(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = New8(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = New9(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = New10(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = New11(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = New12(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = New13(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = New14(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = New15(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = New16(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = New17(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = New18(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = New19(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = New20(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.Length > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    private Token New0(String text, int line, int pos) { return new TVoid(text, line, pos); }
    private Token New1(String text, int line, int pos) { return new TSsingle(text, line, pos); }
    private Token New2(String text, int line, int pos) { return new TUsingle(text, line, pos); }
    private Token New3(String text, int line, int pos) { return new TSdouble(text, line, pos); }
    private Token New4(String text, int line, int pos) { return new TUdouble(text, line, pos); }
    private Token New5(String text, int line, int pos) { return new TSquad(text, line, pos); }
    private Token New6(String text, int line, int pos) { return new TUquad(text, line, pos); }
    private Token New7(String text, int line, int pos) { return new TFloat(text, line, pos); }
    private Token New8(String text, int line, int pos) { return new TString(text, line, pos); }
    private Token New9(String text, int line, int pos) { return new TConst(text, line, pos); }
    private Token New10(String text, int line, int pos) { return new TVolatile(text, line, pos); }
    private Token New11(String text, int line, int pos) { return new TReturn(text, line, pos); }
    private Token New12(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    private Token New13(String text, int line, int pos) { return new TComment(text, line, pos); }
    private Token New14(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    private Token New15(String text, int line, int pos) { return new TLPar(text, line, pos); }
    private Token New16(String text, int line, int pos) { return new TRPar(text, line, pos); }
    private Token New17(String text, int line, int pos) { return new TLCurly(text, line, pos); }
    private Token New18(String text, int line, int pos) { return new TRCurly(text, line, pos); }
    private Token New19(String text, int line, int pos) { return new TSemicolon(text, line, pos); }
    private Token New20(String text, int line, int pos) { return new TComma(text, line, pos); }

    private int GetChar()
    {
        if(eof)
        {
            return -1;
        }

        int result = input.Read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void PushBack(int acceptLength)
    {
        int length = text.Length;
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }
    }


    protected virtual void Unread(Token token)
    {
        String text = token.Text;
        int length = text.Length;

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }

        pos = token.Pos - 1;
        line = token.Line - 1;
    }

    private string GetText(int acceptLength)
    {
        StringBuilder s = new StringBuilder(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.Append(text[i]);
        }

        return s.ToString();
    }

    private static int[][][][] gotoTable = {
      new int[][][] {
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 2},
          new int[] {12, 12, 3},
          new int[] {13, 13, 4},
          new int[] {32, 32, 5},
          new int[] {40, 40, 6},
          new int[] {41, 41, 7},
          new int[] {44, 44, 8},
          new int[] {47, 47, 9},
          new int[] {48, 57, 10},
          new int[] {59, 59, 11},
          new int[] {65, 90, 12},
          new int[] {97, 98, 13},
          new int[] {99, 99, 14},
          new int[] {100, 101, 13},
          new int[] {102, 102, 15},
          new int[] {103, 113, 13},
          new int[] {114, 114, 16},
          new int[] {115, 115, 17},
          new int[] {116, 116, 13},
          new int[] {117, 117, 18},
          new int[] {118, 118, 19},
          new int[] {119, 122, 13},
          new int[] {123, 123, 20},
          new int[] {125, 125, 21},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 22},
          new int[] {12, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {47, 47, 23},
        },
        new int[][] {
          new int[] {48, 57, 10},
          new int[] {65, 90, 24},
          new int[] {97, 122, 25},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 57, 10},
          new int[] {65, 90, 12},
          new int[] {97, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 110, 13},
          new int[] {111, 111, 26},
          new int[] {112, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 107, 13},
          new int[] {108, 108, 27},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 100, 13},
          new int[] {101, 101, 28},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 99, 13},
          new int[] {100, 100, 29},
          new int[] {101, 112, 13},
          new int[] {113, 113, 30},
          new int[] {114, 114, 13},
          new int[] {115, 115, 31},
          new int[] {116, 116, 32},
          new int[] {117, 122, 13},
        },
        new int[][] {
          new int[] {48, 99, -19},
          new int[] {100, 100, 33},
          new int[] {101, 112, 13},
          new int[] {113, 113, 34},
          new int[] {114, 114, 13},
          new int[] {115, 115, 35},
          new int[] {116, 122, 13},
        },
        new int[][] {
          new int[] {48, 110, -16},
          new int[] {111, 111, 36},
          new int[] {112, 122, 13},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {10, 10, 37},
          new int[] {13, 13, 38},
          new int[] {32, 32, 39},
          new int[] {65, 90, 40},
          new int[] {97, 122, 41},
        },
        new int[][] {
          new int[] {48, 122, -12},
        },
        new int[][] {
          new int[] {48, 122, -12},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 109, 13},
          new int[] {110, 110, 42},
          new int[] {111, 122, 13},
        },
        new int[][] {
          new int[] {48, 110, -16},
          new int[] {111, 111, 43},
          new int[] {112, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 115, 13},
          new int[] {116, 116, 44},
          new int[] {117, 122, 13},
        },
        new int[][] {
          new int[] {48, 110, -16},
          new int[] {111, 111, 45},
          new int[] {112, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 116, 13},
          new int[] {117, 117, 46},
          new int[] {118, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 104, 13},
          new int[] {105, 105, 47},
          new int[] {106, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 113, 13},
          new int[] {114, 114, 48},
          new int[] {115, 122, 13},
        },
        new int[][] {
          new int[] {48, 110, -16},
          new int[] {111, 111, 49},
          new int[] {112, 122, 13},
        },
        new int[][] {
          new int[] {48, 116, -32},
          new int[] {117, 117, 50},
          new int[] {118, 122, 13},
        },
        new int[][] {
          new int[] {48, 104, -33},
          new int[] {105, 105, 51},
          new int[] {106, 122, 13},
        },
        new int[][] {
          new int[] {48, 104, -33},
          new int[] {105, 105, 52},
          new int[] {106, 107, 13},
          new int[] {108, 108, 53},
          new int[] {109, 122, 13},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 10, 54},
        },
        new int[][] {
          new int[] {10, 122, -25},
        },
        new int[][] {
          new int[] {10, 122, -25},
        },
        new int[][] {
          new int[] {10, 122, -25},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 114, 13},
          new int[] {115, 115, 55},
          new int[] {116, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 97, 56},
          new int[] {98, 122, 13},
        },
        new int[][] {
          new int[] {48, 116, -32},
          new int[] {117, 117, 57},
          new int[] {118, 122, 13},
        },
        new int[][] {
          new int[] {48, 116, -32},
          new int[] {117, 117, 58},
          new int[] {118, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 97, 59},
          new int[] {98, 122, 13},
        },
        new int[][] {
          new int[] {48, 109, -28},
          new int[] {110, 110, 60},
          new int[] {111, 122, 13},
        },
        new int[][] {
          new int[] {48, 104, -33},
          new int[] {105, 105, 61},
          new int[] {106, 122, 13},
        },
        new int[][] {
          new int[] {48, 116, -32},
          new int[] {117, 117, 62},
          new int[] {118, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 97, 63},
          new int[] {98, 122, 13},
        },
        new int[][] {
          new int[] {48, 109, -28},
          new int[] {110, 110, 64},
          new int[] {111, 122, 13},
        },
        new int[][] {
          new int[] {48, 99, -19},
          new int[] {100, 100, 65},
          new int[] {101, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 97, 66},
          new int[] {98, 122, 13},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 115, -30},
          new int[] {116, 116, 67},
          new int[] {117, 122, 13},
        },
        new int[][] {
          new int[] {48, 115, -30},
          new int[] {116, 116, 68},
          new int[] {117, 122, 13},
        },
        new int[][] {
          new int[] {48, 113, -34},
          new int[] {114, 114, 69},
          new int[] {115, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 97, 13},
          new int[] {98, 98, 70},
          new int[] {99, 122, 13},
        },
        new int[][] {
          new int[] {48, 99, -19},
          new int[] {100, 100, 71},
          new int[] {101, 122, 13},
        },
        new int[][] {
          new int[] {48, 90, -14},
          new int[] {97, 102, 13},
          new int[] {103, 103, 72},
          new int[] {104, 122, 13},
        },
        new int[][] {
          new int[] {48, 109, -28},
          new int[] {110, 110, 73},
          new int[] {111, 122, 13},
        },
        new int[][] {
          new int[] {48, 97, -60},
          new int[] {98, 98, 74},
          new int[] {99, 122, 13},
        },
        new int[][] {
          new int[] {48, 99, -19},
          new int[] {100, 100, 75},
          new int[] {101, 122, 13},
        },
        new int[][] {
          new int[] {48, 102, -62},
          new int[] {103, 103, 76},
          new int[] {104, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 115, -30},
          new int[] {116, 116, 77},
          new int[] {117, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 109, -28},
          new int[] {110, 110, 78},
          new int[] {111, 122, 13},
        },
        new int[][] {
          new int[] {48, 107, -17},
          new int[] {108, 108, 79},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 107, -17},
          new int[] {108, 108, 80},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 102, -62},
          new int[] {103, 103, 81},
          new int[] {104, 122, 13},
        },
        new int[][] {
          new int[] {48, 107, -17},
          new int[] {108, 108, 82},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 107, -17},
          new int[] {108, 108, 83},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 104, -33},
          new int[] {105, 105, 84},
          new int[] {106, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 100, -18},
          new int[] {101, 101, 85},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 100, -18},
          new int[] {101, 101, 86},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 100, -18},
          new int[] {101, 101, 87},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 100, -18},
          new int[] {101, 101, 88},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 107, -17},
          new int[] {108, 108, 89},
          new int[] {109, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
        new int[][] {
          new int[] {48, 100, -18},
          new int[] {101, 101, 90},
          new int[] {102, 122, 13},
        },
        new int[][] {
          new int[] {48, 122, -14},
        },
      },
    };

    private static int[][] accept = {
      new int[] {
        12, 14, 14, 14, 14, 14, 15, 16, 20, -1, 12, 19, 12, 12, 12, 12, 
        12, 12, 12, 12, 17, 18, 14, 13, 12, 12, 12, 12, 12, 12, 12, 12, 
        12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 
        12, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
        12, 0, 12, 9, 7, 12, 12, 5, 12, 12, 12, 6, 12, 12, 11, 12, 
        12, 8, 12, 12, 12, 3, 1, 4, 2, 12, 10, 
      },
    };

    public class State
    {
        public static State INITIAL = new State(0);

        private int _id;

        private State(int _id)
        {
            this._id = _id;
        }

        public int id()
        {
            return _id;
        }
    }
}
}
