/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using VXC.node;
using VXC.lexer;
using VXC.analysis;

namespace VXC.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTVoid(TVoid node)
    {
        index = 0;
    }

    public override void CaseTSsingle(TSsingle node)
    {
        index = 1;
    }

    public override void CaseTUsingle(TUsingle node)
    {
        index = 2;
    }

    public override void CaseTSdouble(TSdouble node)
    {
        index = 3;
    }

    public override void CaseTUdouble(TUdouble node)
    {
        index = 4;
    }

    public override void CaseTSquad(TSquad node)
    {
        index = 5;
    }

    public override void CaseTUquad(TUquad node)
    {
        index = 6;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 7;
    }

    public override void CaseTString(TString node)
    {
        index = 8;
    }

    public override void CaseTConst(TConst node)
    {
        index = 9;
    }

    public override void CaseTVolatile(TVolatile node)
    {
        index = 10;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 11;
    }

    public override void CaseTIdentifier(TIdentifier node)
    {
        index = 12;
    }

    public override void CaseTLPar(TLPar node)
    {
        index = 13;
    }

    public override void CaseTRPar(TRPar node)
    {
        index = 14;
    }

    public override void CaseTLCurly(TLCurly node)
    {
        index = 15;
    }

    public override void CaseTRCurly(TRCurly node)
    {
        index = 16;
    }

    public override void CaseTSemicolon(TSemicolon node)
    {
        index = 17;
    }

    public override void CaseTComma(TComma node)
    {
        index = 18;
    }

    public override void CaseEOF(EOF node)
    {
        index = 19;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(3), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(3), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(5), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(6), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(7), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(8), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(9), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(10), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(10), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(11), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(11), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(12), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(12), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(12), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(12), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(12), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(12), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(12), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(12), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(13), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(13), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(14), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(14), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(15), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(15), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PSourceFile node1 = (PSourceFile) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        ASourceFile psourcefileNode1 = new ASourceFile (
              listNode3
        );
        nodeList.Add(psourcefileNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVariableDefinition pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList1[0];
        AVariableDeclaration pdeclarationNode1 = new AVariableDeclaration (
              pvariabledefinitionNode2
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionDefinition pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1[0];
        AFunctionDeclaration pdeclarationNode1 = new AFunctionDeclaration (
              pfunctiondefinitionNode2
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTypeSpecifier ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1[0];
        TIdentifier tidentifierNode3 = (TIdentifier)nodeArrayList2[0];
        TypedList listNode6 = new TypedList();
        TypedList listNode8 = new TypedList();
        TypedList listNode10 = new TypedList();
        TypedList listNode5 = (TypedList)nodeArrayList3[0];
        if ( listNode5 != null )
        {
            listNode6.AddAll(listNode5);
        }
        TypedList listNode7 = (TypedList)nodeArrayList4[0];
        if ( listNode7 != null )
        {
            listNode8.AddAll(listNode7);
        }
        TypedList listNode9 = (TypedList)nodeArrayList4[1];
        if ( listNode9 != null )
        {
            listNode10.AddAll(listNode9);
        }
        PReturnStatement preturnstatementNode11 = (PReturnStatement)nodeArrayList4[2];
        AFormalsAndBody pformalsandbodyNode4 = new AFormalsAndBody (
              listNode6,
              listNode8,
              listNode10,
              preturnstatementNode11
        );
        AFunctionDefinition pfunctiondefinitionNode1 = new AFunctionDefinition (
              ptypespecifierNode2,
              tidentifierNode3,
              pformalsandbodyNode4
        );
        nodeList.Add(pfunctiondefinitionNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode1 = new TypedList();
        TypedList listNode2 = new TypedList();
        PReturnStatement preturnstatementNode3 = (PReturnStatement)nodeArrayList2[0];
        nodeList.Add(listNode1);
        nodeList.Add(listNode2);
        nodeList.Add(preturnstatementNode3);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        PReturnStatement preturnstatementNode4 = (PReturnStatement)nodeArrayList3[0];
        nodeList.Add(listNode2);
        nodeList.Add(listNode3);
        nodeList.Add(preturnstatementNode4);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode1 = new TypedList();
        TypedList listNode3 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList2[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        PReturnStatement preturnstatementNode4 = (PReturnStatement)nodeArrayList3[0];
        nodeList.Add(listNode1);
        nodeList.Add(listNode3);
        nodeList.Add(preturnstatementNode4);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        TypedList listNode3 = (TypedList)nodeArrayList3[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        PReturnStatement preturnstatementNode5 = (PReturnStatement)nodeArrayList4[0];
        nodeList.Add(listNode2);
        nodeList.Add(listNode4);
        nodeList.Add(preturnstatementNode5);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        TypedList listNode1 = new TypedList();
        nodeList.Add(listNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode1 = new TypedList();
        nodeList.Add(listNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PLocalDecl plocaldeclNode1 = (PLocalDecl)nodeArrayList1[0];
        if ( plocaldeclNode1 != null )
        {
            listNode2.Add(plocaldeclNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PLocalDecl plocaldeclNode2 = (PLocalDecl)nodeArrayList3[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( plocaldeclNode2 != null )
        {
            listNode3.Add(plocaldeclNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTypeSpecifier ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1[0];
        TIdentifier tidentifierNode3 = (TIdentifier)nodeArrayList2[0];
        ALocalDecl plocaldeclNode1 = new ALocalDecl (
              ptypespecifierNode2,
              tidentifierNode3
        );
        nodeList.Add(plocaldeclNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AEmptyStatement pstatementNode1 = new AEmptyStatement (
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TReturn treturnNode2 = (TReturn)nodeArrayList1[0];
        AVoidReturnStatement preturnstatementNode1 = new AVoidReturnStatement (
              treturnNode2
        );
        nodeList.Add(preturnstatementNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTypeSpecifier ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1[0];
        TIdentifier tidentifierNode4 = (TIdentifier)nodeArrayList2[0];
        AVariableDefinition pvariabledefinitionNode1 = new AVariableDefinition (
              ptypespecifierNode2,
              null,
              tidentifierNode4
        );
        nodeList.Add(pvariabledefinitionNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTypeSpecifier ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList2[0];
        PTypeQualifier ptypequalifierNode3 = (PTypeQualifier)nodeArrayList1[0];
        TIdentifier tidentifierNode4 = (TIdentifier)nodeArrayList3[0];
        AVariableDefinition pvariabledefinitionNode1 = new AVariableDefinition (
              ptypespecifierNode2,
              ptypequalifierNode3,
              tidentifierNode4
        );
        nodeList.Add(pvariabledefinitionNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AConstTypeQualifier ptypequalifierNode1 = new AConstTypeQualifier (
        );
        nodeList.Add(ptypequalifierNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AVolatileTypeQualifier ptypequalifierNode1 = new AVolatileTypeQualifier (
        );
        nodeList.Add(ptypequalifierNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASsingleTypeSpecifier ptypespecifierNode1 = new ASsingleTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUsingleTypeSpecifier ptypespecifierNode1 = new AUsingleTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASdoubleTypeSpecifier ptypespecifierNode1 = new ASdoubleTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUdoubleTypeSpecifier ptypespecifierNode1 = new AUdoubleTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASquadTypeSpecifier ptypespecifierNode1 = new ASquadTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUquadTypeSpecifier ptypespecifierNode1 = new AUquadTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AFloatTypeSpecifier ptypespecifierNode1 = new AFloatTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AStringTypeSpecifier ptypespecifierNode1 = new AStringTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AVoidTypeSpecifier ptypespecifierNode1 = new AVoidTypeSpecifier (
        );
        nodeList.Add(ptypespecifierNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PDeclaration pdeclarationNode1 = (PDeclaration)nodeArrayList1[0];
        if ( pdeclarationNode1 != null )
        {
            listNode2.Add(pdeclarationNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pdeclarationNode2 != null )
        {
            listNode3.Add(pdeclarationNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PVariableDefinition pvariabledefinitionNode1 = (PVariableDefinition)nodeArrayList1[0];
        if ( pvariabledefinitionNode1 != null )
        {
            listNode2.Add(pvariabledefinitionNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PVariableDefinition pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pvariabledefinitionNode2 != null )
        {
            listNode3.Add(pvariabledefinitionNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PStatement pstatementNode1 = (PStatement)nodeArrayList1[0];
        if ( pstatementNode1 != null )
        {
            listNode2.Add(pstatementNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PStatement pstatementNode2 = (PStatement)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pstatementNode2 != null )
        {
            listNode3.Add(pstatementNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
        new int[] {9, 0, 10},
        new int[] {10, 0, 11},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {19, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {12, 0, 20},
      },
      new int[][] {
        new int[] {-1, 1, 0},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
        new int[] {9, 0, 10},
        new int[] {10, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {12, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {13, 0, 23},
        new int[] {17, 0, 24},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {17, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {0, 0, 27},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {15, 0, 32},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {12, 1, 29},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {14, 0, 34},
        new int[] {18, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {12, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
        new int[] {9, 0, 10},
        new int[] {10, 0, 11},
        new int[] {11, 0, 37},
        new int[] {17, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {17, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {16, 0, 47},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {12, 0, 48},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
        new int[] {9, 0, 10},
        new int[] {10, 0, 11},
        new int[] {11, 0, 37},
        new int[] {17, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 44},
        new int[] {11, 0, 37},
        new int[] {17, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {17, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 49},
        new int[] {16, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {11, 0, 37},
        new int[] {17, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {16, 0, 56},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {16, 0, 57},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 12},
      },
      new int[][] {
        new int[] {-1, 13},
        new int[] {18, 21},
      },
      new int[][] {
        new int[] {-1, 14},
      },
      new int[][] {
        new int[] {-1, 33},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 28},
      },
      new int[][] {
        new int[] {-1, 29},
      },
      new int[][] {
        new int[] {-1, 30},
        new int[] {35, 45},
      },
      new int[][] {
        new int[] {-1, 39},
        new int[] {44, 52},
        new int[] {51, 52},
      },
      new int[][] {
        new int[] {-1, 40},
        new int[] {43, 49},
        new int[] {44, 53},
        new int[] {51, 55},
      },
      new int[][] {
        new int[] {-1, 15},
        new int[] {32, 41},
        new int[] {43, 50},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 17},
        new int[] {16, 19},
        new int[] {23, 31},
        new int[] {32, 42},
        new int[] {35, 31},
        new int[] {43, 42},
      },
      new int[][] {
        new int[] {-1, 18},
      },
      new int[][] {
        new int[] {-1, 43},
      },
      new int[][] {
        new int[] {-1, 44},
        new int[] {43, 51},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', 'const', 'volatile'",
      "expecting: identifier",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string'",
      "expecting: EOF",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', 'const', 'volatile', EOF",
      "expecting: '(', ';'",
      "expecting: ';'",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', ')', ','",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', 'const', 'volatile', 'return', ';', EOF",
      "expecting: '{'",
      "expecting: identifier, ')', ','",
      "expecting: ')', ','",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', 'const', 'volatile', 'return', ';'",
      "expecting: 'return', ';'",
      "expecting: '}'",
    };

    private static int[] errors = {
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 4, 
      2, 1, 4, 1, 5, 4, 6, 7, 8, 9, 8, 10, 11, 11, 11, 1, 
      12, 4, 9, 2, 11, 6, 13, 13, 14, 12, 1, 12, 13, 11, 14, 4, 
      6, 14, 12, 13, 13, 14, 4, 14, 4, 4, 
    };
}
}
