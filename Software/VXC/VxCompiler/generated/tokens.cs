/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  VXC.analysis;

namespace VXC.node {


public sealed class TKwReturn : Token
{
    public TKwReturn(string text)
    {
        Text = text;
    }

    public TKwReturn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwReturn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwReturn(this);
    }
}

public sealed class TKwBreak : Token
{
    public TKwBreak(string text)
    {
        Text = text;
    }

    public TKwBreak(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwBreak(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwBreak(this);
    }
}

public sealed class TKwIf : Token
{
    public TKwIf(string text)
    {
        Text = text;
    }

    public TKwIf(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwIf(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwIf(this);
    }
}

public sealed class TKwThen : Token
{
    public TKwThen(string text)
    {
        Text = text;
    }

    public TKwThen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwThen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwThen(this);
    }
}

public sealed class TKwElse : Token
{
    public TKwElse(string text)
    {
        Text = text;
    }

    public TKwElse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwElse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwElse(this);
    }
}

public sealed class TKwForeach : Token
{
    public TKwForeach(string text)
    {
        Text = text;
    }

    public TKwForeach(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwForeach(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwForeach(this);
    }
}

public sealed class TKwFor : Token
{
    public TKwFor(string text)
    {
        Text = text;
    }

    public TKwFor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwFor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwFor(this);
    }
}

public sealed class TKwTrue : Token
{
    public TKwTrue(string text)
    {
        Text = text;
    }

    public TKwTrue(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwTrue(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwTrue(this);
    }
}

public sealed class TKwFalse : Token
{
    public TKwFalse(string text)
    {
        Text = text;
    }

    public TKwFalse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwFalse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwFalse(this);
    }
}

public sealed class TKwSizeof : Token
{
    public TKwSizeof(string text)
    {
        Text = text;
    }

    public TKwSizeof(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwSizeof(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwSizeof(this);
    }
}

public sealed class TKwVoid : Token
{
    public TKwVoid(string text)
    {
        Text = text;
    }

    public TKwVoid(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwVoid(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwVoid(this);
    }
}

public sealed class TKwSingle : Token
{
    public TKwSingle(string text)
    {
        Text = text;
    }

    public TKwSingle(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwSingle(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwSingle(this);
    }
}

public sealed class TKwDouble : Token
{
    public TKwDouble(string text)
    {
        Text = text;
    }

    public TKwDouble(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwDouble(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwDouble(this);
    }
}

public sealed class TKwQuad : Token
{
    public TKwQuad(string text)
    {
        Text = text;
    }

    public TKwQuad(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwQuad(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwQuad(this);
    }
}

public sealed class TKwFloat : Token
{
    public TKwFloat(string text)
    {
        Text = text;
    }

    public TKwFloat(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwFloat(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwFloat(this);
    }
}

public sealed class TKwString : Token
{
    public TKwString(string text)
    {
        Text = text;
    }

    public TKwString(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwString(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwString(this);
    }
}

public sealed class TKwSigned : Token
{
    public TKwSigned(string text)
    {
        Text = text;
    }

    public TKwSigned(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwSigned(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwSigned(this);
    }
}

public sealed class TKwUnsigned : Token
{
    public TKwUnsigned(string text)
    {
        Text = text;
    }

    public TKwUnsigned(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwUnsigned(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwUnsigned(this);
    }
}

public sealed class TKwPort : Token
{
    public TKwPort(string text)
    {
        Text = text;
    }

    public TKwPort(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKwPort(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKwPort(this);
    }
}

public sealed class TTraditionalComment : Token
{
    public TTraditionalComment(string text)
    {
        Text = text;
    }

    public TTraditionalComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTraditionalComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTraditionalComment(this);
    }
}

public sealed class TDocumentationComment : Token
{
    public TDocumentationComment(string text)
    {
        Text = text;
    }

    public TDocumentationComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDocumentationComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDocumentationComment(this);
    }
}

public sealed class TEndOfLineComment : Token
{
    public TEndOfLineComment(string text)
    {
        Text = text;
    }

    public TEndOfLineComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEndOfLineComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEndOfLineComment(this);
    }
}

public sealed class TWhitespace : Token
{
    public TWhitespace(string text)
    {
        Text = text;
    }

    public TWhitespace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhitespace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhitespace(this);
    }
}

public sealed class TTokDot : Token
{
    public TTokDot(string text)
    {
        Text = text;
    }

    public TTokDot(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokDot(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokDot(this);
    }
}

public sealed class TTokLbracket : Token
{
    public TTokLbracket(string text)
    {
        Text = text;
    }

    public TTokLbracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLbracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLbracket(this);
    }
}

public sealed class TTokRbracket : Token
{
    public TTokRbracket(string text)
    {
        Text = text;
    }

    public TTokRbracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokRbracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokRbracket(this);
    }
}

public sealed class TTokLpar : Token
{
    public TTokLpar(string text)
    {
        Text = text;
    }

    public TTokLpar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLpar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLpar(this);
    }
}

public sealed class TTokRpar : Token
{
    public TTokRpar(string text)
    {
        Text = text;
    }

    public TTokRpar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokRpar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokRpar(this);
    }
}

public sealed class TTokLcurly : Token
{
    public TTokLcurly(string text)
    {
        Text = text;
    }

    public TTokLcurly(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLcurly(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLcurly(this);
    }
}

public sealed class TTokRcurly : Token
{
    public TTokRcurly(string text)
    {
        Text = text;
    }

    public TTokRcurly(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokRcurly(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokRcurly(this);
    }
}

public sealed class TTokSemicolon : Token
{
    public TTokSemicolon(string text)
    {
        Text = text;
    }

    public TTokSemicolon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokSemicolon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokSemicolon(this);
    }
}

public sealed class TTokComma : Token
{
    public TTokComma(string text)
    {
        Text = text;
    }

    public TTokComma(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokComma(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokComma(this);
    }
}

public sealed class TTokMinus : Token
{
    public TTokMinus(string text)
    {
        Text = text;
    }

    public TTokMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokMinus(this);
    }
}

public sealed class TTokColon : Token
{
    public TTokColon(string text)
    {
        Text = text;
    }

    public TTokColon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokColon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokColon(this);
    }
}

public sealed class TTokQuestion : Token
{
    public TTokQuestion(string text)
    {
        Text = text;
    }

    public TTokQuestion(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokQuestion(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokQuestion(this);
    }
}

public sealed class TTokEq : Token
{
    public TTokEq(string text)
    {
        Text = text;
    }

    public TTokEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokEq(this);
    }
}

public sealed class TTokBar : Token
{
    public TTokBar(string text)
    {
        Text = text;
    }

    public TTokBar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokBar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokBar(this);
    }
}

public sealed class TTokBarBar : Token
{
    public TTokBarBar(string text)
    {
        Text = text;
    }

    public TTokBarBar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokBarBar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokBarBar(this);
    }
}

public sealed class TTokAmp : Token
{
    public TTokAmp(string text)
    {
        Text = text;
    }

    public TTokAmp(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokAmp(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokAmp(this);
    }
}

public sealed class TTokAmpAmp : Token
{
    public TTokAmpAmp(string text)
    {
        Text = text;
    }

    public TTokAmpAmp(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokAmpAmp(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokAmpAmp(this);
    }
}

public sealed class TTokCaret : Token
{
    public TTokCaret(string text)
    {
        Text = text;
    }

    public TTokCaret(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokCaret(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokCaret(this);
    }
}

public sealed class TTokLshift : Token
{
    public TTokLshift(string text)
    {
        Text = text;
    }

    public TTokLshift(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLshift(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLshift(this);
    }
}

public sealed class TTokRshift : Token
{
    public TTokRshift(string text)
    {
        Text = text;
    }

    public TTokRshift(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokRshift(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokRshift(this);
    }
}

public sealed class TTokLt : Token
{
    public TTokLt(string text)
    {
        Text = text;
    }

    public TTokLt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLt(this);
    }
}

public sealed class TTokGt : Token
{
    public TTokGt(string text)
    {
        Text = text;
    }

    public TTokGt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokGt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokGt(this);
    }
}

public sealed class TTokLtEq : Token
{
    public TTokLtEq(string text)
    {
        Text = text;
    }

    public TTokLtEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokLtEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokLtEq(this);
    }
}

public sealed class TTokGtEq : Token
{
    public TTokGtEq(string text)
    {
        Text = text;
    }

    public TTokGtEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokGtEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokGtEq(this);
    }
}

public sealed class TTokEqEq : Token
{
    public TTokEqEq(string text)
    {
        Text = text;
    }

    public TTokEqEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokEqEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokEqEq(this);
    }
}

public sealed class TTokNotEq : Token
{
    public TTokNotEq(string text)
    {
        Text = text;
    }

    public TTokNotEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokNotEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokNotEq(this);
    }
}

public sealed class TTokPlusPlus : Token
{
    public TTokPlusPlus(string text)
    {
        Text = text;
    }

    public TTokPlusPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokPlusPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokPlusPlus(this);
    }
}

public sealed class TTokMinusMinus : Token
{
    public TTokMinusMinus(string text)
    {
        Text = text;
    }

    public TTokMinusMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokMinusMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokMinusMinus(this);
    }
}

public sealed class TTokStar : Token
{
    public TTokStar(string text)
    {
        Text = text;
    }

    public TTokStar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokStar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokStar(this);
    }
}

public sealed class TTokPlus : Token
{
    public TTokPlus(string text)
    {
        Text = text;
    }

    public TTokPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokPlus(this);
    }
}

public sealed class TTokPercent : Token
{
    public TTokPercent(string text)
    {
        Text = text;
    }

    public TTokPercent(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokPercent(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokPercent(this);
    }
}

public sealed class TTokTilde : Token
{
    public TTokTilde(string text)
    {
        Text = text;
    }

    public TTokTilde(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokTilde(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokTilde(this);
    }
}

public sealed class TTokExclamation : Token
{
    public TTokExclamation(string text)
    {
        Text = text;
    }

    public TTokExclamation(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokExclamation(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokExclamation(this);
    }
}

public sealed class TTokSlash : Token
{
    public TTokSlash(string text)
    {
        Text = text;
    }

    public TTokSlash(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTokSlash(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTokSlash(this);
    }
}

public sealed class TIntegerLiteral : Token
{
    public TIntegerLiteral(string text)
    {
        Text = text;
    }

    public TIntegerLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIntegerLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIntegerLiteral(this);
    }
}

public sealed class TStringLiteral : Token
{
    public TStringLiteral(string text)
    {
        Text = text;
    }

    public TStringLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStringLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStringLiteral(this);
    }
}

public sealed class TIdentifier : Token
{
    public TIdentifier(string text)
    {
        Text = text;
    }

    public TIdentifier(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIdentifier(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIdentifier(this);
    }
}


public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
