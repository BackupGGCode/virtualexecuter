
Crazy language
-----------------

.delcarations

// declaring and initializing n-tuble vector prototypes
vector2 <u,v> := <float, float>
vector3 <u,v,w> := vector2 + float = <0.0, 0.0, 0.0>
vector5 <x,y,z,u,w> := vector2 + vector3

// that can be used as types (providing default values if initialized)
myVector vector3 = <0.0, 1.0, 0.0>

// vectors as objects (unions and quantifier)
onb<origin, xaxis, yaxis, zaxis> := vector3 + (vector2 + float) + (2 * vector3)
onb<origin, xaxis, yaxis, zaxis> := 4 * vector3


node<name,parent,children>
leaf<value>

node := string node node* | leaf
leaf := float

.assigments

// prototypes can be used as an instance
vector3.u = 19
vector3 = <2,4,>


 // prototypes are recursive
 tree := 
 leaf := float value

 // new variables can be created from a prototype that provides default values (z equals false)
3tupHetero newVec = <0.345, 23, >

// identity check
3tupHetero is newVec ( = false)
3tupHetero is 3tupHetero ( = true )

// related check
3tupHetero builds 

// value check
3tupHetero is 

// declaring and initializing three floats 
float x,y,z := 0,0,0

vectorTree = 






-----------------------
compile phases ?

.declaration
.expression
.action

