        NAME MemoryManagement

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG NEAR_Z:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC Kernel_Allocate
        FUNCTION Kernel_Allocate,0203H
        PUBLIC Kernel_Deallocate
        FUNCTION Kernel_Deallocate,0203H
        PUBLIC Kernel_InitHeap
        FUNCTION Kernel_InitHeap,0201H
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
;     1 #include <Globals.h>
;     2 #include <Config.h>
;     3 #include "MemoryManagement.h"
;     4 #include "Kernel.h"
;     5 #include "KernelInternals.h"
;     6 
;     7 
;     8 typedef struct
;     9 {
;    10 	bool free;
;    11 	unsigned short size;
;    12 	void* next;
;    13 } block;
;    14 
;    15 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    16 static unsigned char heap[HEAP_SIZE];
; static unsigned char __near heap[1000];
heap:
	DS 1000
;    17 
;    18 
;    19 static void JoinFreeAdjacentBlocks();
;    20 
;    21 

        RSEG CODE:CODE:NOROOT(1)
;    22 void Kernel_InitHeap()
;    23 {
;    24 block* b = (block*)heap;
;    25 
;    26 	b->free = true;
; __nearfunc void Kernel_InitHeap();
Kernel_InitHeap:
	LDI	R30,LOW(heap)
	LDI	R31,(heap) >> 8
	LDI	R16,1
	ST	Z,R16
;    27 	b->size = HEAP_SIZE - sizeof(block);
	LDI	R16,227
	LDI	R17,3
	STD	Z+1,R16
	STD	Z+2,R17
;    28 	b->next = null;
	LDI	R16,0
	STD	Z+3,R16
	STD	Z+4,R16
;    29 }
	RET
;    30 
;    31 

        RSEG CODE:CODE:NOROOT(1)
;    32 void* Kernel_Allocate(unsigned short size)
;    33 {
; __nearfunc void *Kernel_Allocate(unsigned short);
Kernel_Allocate:
	MOV	R1,R27
	MOV	R0,R26
	MOV	R23,R25
	MOV	R22,R24
	MOVW	R19 : R18,R17 : R16
;    34 block* b = (block*)heap;
	LDI	R30,LOW(heap)
	LDI	R31,(heap) >> 8
	RJMP	??Kernel_Allocate_0
;    35 block* split;
;    36 
;    37 	while((b->free != true || b->size < size) && b->next != null)
;    38 	{
;    39 		b = (block*)b->next;
??Kernel_Allocate_1:
	MOVW	R31 : R30,R17 : R16
??Kernel_Allocate_0:
	LD	R16,Z
	CPI	R16,1
	BRNE	??Kernel_Allocate_2
	LDD	R16,Z+1
	LDD	R17,Z+2
	CP	R16,R18
	CPC	R17,R19
	BRCC	??Kernel_Allocate_3
??Kernel_Allocate_2:
	LDD	R16,Z+3
	LDD	R17,Z+4
	MOV	R20,R16
	OR	R20,R17
	BRNE	??Kernel_Allocate_1
;    40 	}
;    41 	
;    42 	if(b->free != true || b->size < size)																									// Found a valid block?
??Kernel_Allocate_3:
	LD	R16,Z
	CPI	R16,1
	BRNE	??Kernel_Allocate_4
	LDD	R24,Z+1
	LDD	R25,Z+2
	CP	R24,R18
	CPC	R25,R19
	BRCC	??Kernel_Allocate_5
;    43 	{
;    44 		return null;																																					// No
??Kernel_Allocate_4:
	LDI	R16,0
	LDI	R17,0
	RJMP	??Kernel_Allocate_6
;    45 	}
;    46 	
;    47 	if(b->size > (size + sizeof(block)))																									// Split block, return first part and mark last part as free
??Kernel_Allocate_5:
	MOVW	R17 : R16,R31 : R30
	SUBI	R16,251
	SBCI	R17,255
	MOVW	R27 : R26,R19 : R18
	ADIW	R27 : R26,5
	CP	R26,R24
	CPC	R27,R25
	BRCC	??Kernel_Allocate_7
;    48 	{
;    49 		split = (block*)((unsigned char*)b + sizeof(block) + size);
	MOVW	R27 : R26,R31 : R30
	ADIW	R27 : R26,5
	ADD	R26,R18
	ADC	R27,R19
;    50 		split->free = true;
	LDI	R20,1
	ST	X,R20
;    51 		split->size = b->size - size - sizeof(block);
	SUB	R24,R18
	SBC	R25,R19
	SBIW	R25 : R24,5
	ADIW	R27 : R26,1
	ST	X+,R24
	ST	X,R25
	SBIW	R27 : R26,2
;    52 		split->next = b->next;
	LDD	R20,Z+3
	LDD	R21,Z+4
	ADIW	R27 : R26,3
	ST	X+,R20
	ST	X,R21
	SBIW	R27 : R26,4
;    53 		
;    54 		b->free = false;
	LDI	R20,0
	ST	Z,R20
;    55 		b->size = size;
	STD	Z+1,R18
	STD	Z+2,R19
;    56 		b->next = split;
	STD	Z+3,R26
	STD	Z+4,R27
;    57 		
;    58 		return (void*)((unsigned short)b + sizeof(block));
	RJMP	??Kernel_Allocate_6
;    59 	}
;    60 	else																																									// Block is too small to split - return all
;    61 	{
;    62 		b->free = false;
??Kernel_Allocate_7:
	LDI	R18,0
	ST	Z,R18
;    63 		return (void*)((unsigned short)b + sizeof(block));
??Kernel_Allocate_6:
	MOV	R24,R22
	MOV	R25,R23
	MOV	R26,R0
	MOV	R27,R1
	RET
;    64 	}
;    65 }
;    66 
;    67 

        RSEG CODE:CODE:NOROOT(1)
;    68 void Kernel_Deallocate(void* pointer)
;    69 {
; __nearfunc void Kernel_Deallocate(void *);
Kernel_Deallocate:
	MOV	R21,R27
	MOV	R22,R26
;    70 block* b = (block*)heap;
	LDI	R30,LOW(heap)
	LDI	R31,(heap) >> 8
;    71 block* p = (block*)((unsigned short)pointer - sizeof(block));
	SUBI	R16,5
	SBCI	R17,0
	RJMP	??Kernel_Deallocate_0
??Kernel_Deallocate_1:
	LDD	R18,Z+3
	LDD	R19,Z+4
	MOV	R20,R18
	OR	R20,R19
	BREQ	??Kernel_Deallocate_2
;    72 	
;    73 	while(b != p && b->next != null)
;    74 	{
;    75 		b = (block*)b->next;
	MOVW	R31 : R30,R19 : R18
??Kernel_Deallocate_0:
	CP	R30,R16
	CPC	R31,R17
	BRNE	??Kernel_Deallocate_1
;    76 	}
;    77 	
;    78 	if(b != p)
;    79 	{
;    80 		return;																																								// Invalid pointer
;    81 	}
;    82 	
;    83 	b->free = true;
	LDI	R16,1
	ST	Z,R16
;    84 
;    85 	JoinFreeAdjacentBlocks();
	LDI	R30,LOW(heap)
	LDI	R31,(heap) >> 8
	RJMP	??Kernel_Deallocate_3
??Kernel_Deallocate_4:
	ADIW	R27 : R26,1
	LD	R16,X+
	LD	R17,X
	SBIW	R27 : R26,2
	SUBI	R16,251
	SBCI	R17,255
	LDD	R18,Z+1
	LDD	R19,Z+2
	ADD	R18,R16
	ADC	R19,R17
	STD	Z+1,R18
	STD	Z+2,R19
	ADIW	R27 : R26,3
	LD	R16,X+
	LD	R17,X
	STD	Z+3,R16
	STD	Z+4,R17
??Kernel_Deallocate_3:
	LDD	R16,Z+3
	LDD	R17,Z+4
	MOV	R18,R16
	OR	R18,R17
	BREQ	??Kernel_Deallocate_2
	MOVW	R27 : R26,R17 : R16
	LD	R18,Z
	CPI	R18,1
	BRNE	??Kernel_Deallocate_5
	LD	R18,X
	CPI	R18,1
	BREQ	??Kernel_Deallocate_4
??Kernel_Deallocate_5:
	MOVW	R31 : R30,R17 : R16
	RJMP	??Kernel_Deallocate_3
??Kernel_Deallocate_2:
	MOV	R26,R22
	MOV	R27,R21
	RET
;    86 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        END
;    87 
;    88 
;    89 static void JoinFreeAdjacentBlocks()
;    90 {
;    91 block* b = (block*)heap;
;    92 block* next;
;    93 
;    94 	while(b->next != null)
;    95 	{
;    96 		next = (block*)b->next;
;    97 		if(b->free == true && next->free == true)
;    98 		{
;    99 			b->size += next->size + sizeof(block);
;   100 			b->next = next->next;
;   101 		}
;   102 		else
;   103 		{
;   104 			b = (block*)b->next;
;   105 		}
;   106 	}
;   107 }
; 
;    282 bytes in segment CODE
;      6 bytes in segment INITTAB
;   1000 bytes in segment NEAR_Z
; 
;    282 bytes of CODE memory (+ 6 bytes shared)
;   1000 bytes of DATA memory
;
;Errors: none
;Warnings: none
