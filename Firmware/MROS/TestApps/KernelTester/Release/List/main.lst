##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version21/Dec/2007  23:42:52 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\main #
#                    .c                                                      #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    KernelTester\Release\Obj\ -I                            #
#                    C:\PROGRA~1\IARSYS~1\EW23EV~1\avr\SRC\CLIB\INC\ -I      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\ -I  #
#                    f:\Projects\[Drivers]\C\MROS\ -lC                       #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\Ker #
#                    nelTester\Release\List\ -e --initializers_in_flash -s9  #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\T #
#                    estApps\KernelTester\main.c                             #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\main.lst                                       #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\Obj\main.r90                                        #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <Globals.h>

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB;
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB;
   \                     _A_PORTB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x39
   \   union <unnamed> volatile __io _A_PINA;
   \                     _A_PINA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA;
   \                     _A_DDRA:
   \   00000000                              DS 1
      2          #include "Config.h"
      3          #include <Kernel/Kernel.h>
      4          #include <Peripherals/UART.h>
      5          
      6          
      7          #define led0																		PORTB_Bit0
      8          #define led1																		PORTB_Bit1
      9          #define led2																		PORTB_Bit2
     10          #define led3																		PORTB_Bit3
     11          #define led4																		PORTB_Bit4
     12          #define led5																		PORTB_Bit5
     13          #define led6																		PORTB_Bit6
     14          #define led7																		PORTB_Bit7
     15          #define sw0																			PINA_Bit0
     16          #define sw1																			PINA_Bit1
     17          #define sw2																			PINA_Bit2
     18          #define sw3																			PINA_Bit3
     19          #define sw4																			PINA_Bit4
     20          #define sw5																			PINA_Bit5
     21          #define sw6																			PINA_Bit6
     22          #define sw7																			PINA_Bit7
     23          
     24          #define ON																			0             // for LED control
     25          #define OFF																			1             // for LED control
     26          
     27          // Button states
     28          #define UP		1
     29          #define DOWN	0
     30          
     31          // Application specific messages for turning on and of the LEDS
     32          #define TURN_LED_ON															1
     33          #define TURN_LED_OFF														2
     34          
     35          
     36          messageQueue ledmsgs;
     37          
     38          semaphore semaFlip=0;
     39          
     40          
     41          /*
     42          	A task that takes up a lot of time
     43          */
     44          void workhard()
     45          {
     46          /*
     47          double d=0;
     48          
     49          	while(d<250)
     50          		d+=0.1;
     51          	led5=!led5;
     52          */
     53          }
     54          
     55          
     56          /*
     57          	A task demonstrating Kernel_Sleep() (alternativly Kernel_Delay())
     58          */
     59          void blink()
     60          {
     61          	led4=!led4;
     62          	Kernel_Sleep(777);
     63          //	Kernel_Delay(1000);
     64          }
     65          
     66          
     67          void LEDControl1(void)
     68          {
     69          	if(sw6==DOWN)
     70          		led6=ON;
     71          	else
     72          		led6=OFF;
     73          }
     74          
     75          
     76          void LEDControl2(void)
     77          {
     78          	if(sw7==DOWN)
     79          		led7=ON;
     80          	else
     81          		led7=OFF;
     82          }
     83          
     84          
     85          /*
     86          	Demonstation of task creation and deletion.
     87          	Also demonstrates task suspension and resumption.
     88          */
     89          void UserInput(void)
     90          {
     91          	if(sw0==DOWN)											//if sw0 pressed
     92          	{
     93          		Kernel_CreateTask(LEDControl1);
     94          		Kernel_DeleteTask(LEDControl2);
     95          		Kernel_SuspendTask(blink);
     96          		led0=ON;
     97          		led1=OFF;
     98          	}
     99          	else if(sw1==DOWN)									//if sw1 pressed
    100          	{
    101          		Kernel_DeleteTask(LEDControl1);
    102          		Kernel_CreateTask(LEDControl2);
    103          		Kernel_ResumeTask(blink);
    104          		led0=OFF;
    105          		led1=ON;
    106          	}
    107          
    108          	if(sw5==DOWN)
    109          		Kernel_CreateTask(workhard);
    110          }
    111          
    112          
    113          /*
    114          	Demonstrates posting messages to message queues
    115          */
    116          void ledposter()
    117          {

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
    118          static bool state=false;
   \   bool __near state;
   \                     ??state:
   \   00000000                              DS 1
   \   00000001                              DS 1
   \   messageQueue __near ledmsgs;
   \                     ledmsgs:
   \   00000002                              DS 11
    119          
    120          	if(state==false)
    121          	{
    122          		if(sw7==DOWN)
    123          		{
    124          			state=true;
    125          			Kernel_PostMessage(TURN_LED_ON, &ledmsgs);
    126          		}
    127          	}
    128          	else
    129          	{
    130          		if(sw6==DOWN)
    131          		{
    132          			state=false;
    133          			Kernel_PostMessage(TURN_LED_OFF, &ledmsgs);
    134          		}
    135          	}
    136          }
    137          
    138          
    139          /*
    140          	Demonstates getting messages from message queues
    141          */
    142          void ledcontroller()
    143          {
    144          unsigned char data;
    145          
    146          	if(Kernel_GetMessage(&data, &ledmsgs))
    147          	{
    148          		switch(data)
    149          		{
    150          			case TURN_LED_ON:		led5=ON;
    151          													break;
    152          			case TURN_LED_OFF:	led5=OFF;
    153          													break;
    154          		}
    155          	}
    156          }
    157          
    158          void AlternativeLedController()
    159          {
    160          unsigned char data;
    161          
    162          	YieldBegin
    163          	YieldUntil(Kernel_GetMessage(&data, &ledmsgs))
    164          	switch(data)
    165          	{
    166          		case TURN_LED_ON:		led5=ON;
    167          												break;
    168          		case TURN_LED_OFF:	led5=OFF;
    169          												break;
    170          	}
    171          	YieldEnd
    172          }
    173          
    174          
    175          
    176          /*
    177          	Demonstrates how semaphores can be used to signal from task to task
    178          */
    179          
    180          void ledFlipper()
    181          {
    182          	if(Kernel_SemaphoreWait(&semaFlip))
    183          	{
    184          		led3=!led3;
    185          	}
    186          }
    187          
    188          
    189          void AlternativeLedFlipper()
    190          {

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
    191          	YieldBegin
   \   unsigned char __near __state;
   \                     ??__state_1:
   \   00000000                              DS 1
   \   00000001                              DS 1
   \   00000002                              DS 1
   \   semaphore __near semaFlip;
   \                     semaFlip:
   \   00000003                              DS 1

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void workhard();
   \                     workhard:
   \   00000000   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void blink();
   \                     blink:
   \   00000000   B318                       IN      R17,0x18
   \   00000002   FF14                       SBRS    R17,4
   \   00000004   9AC4                       SBI     0x18,0x04
   \   00000006   FD14                       SBRC    R17,4
   \   00000008   98C4                       CBI     0x18,0x04
   \   0000000A   E009                       LDI     R16,9
   \   0000000C   E013                       LDI     R17,3
   \   0000000E   ........                   JMP     Kernel_Sleep

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void LEDControl1();
   \                     LEDControl1:
   \   00000000   99CE                       SBIC    0x19,0x06
   \   00000002   C002                       RJMP    ??LEDControl1_0
   \   00000004   98C6                       CBI     0x18,0x06
   \   00000006   9508                       RET
   \                     ??LEDControl1_0:
   \   00000008   9AC6                       SBI     0x18,0x06
   \   0000000A   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void LEDControl2();
   \                     LEDControl2:
   \   00000000   99CF                       SBIC    0x19,0x07
   \   00000002   C002                       RJMP    ??LEDControl2_0
   \   00000004   98C7                       CBI     0x18,0x07
   \   00000006   9508                       RET
   \                     ??LEDControl2_0:
   \   00000008   9AC7                       SBI     0x18,0x07
   \   0000000A   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void UserInput();
   \                     UserInput:
   \   00000000   99C8                       SBIC    0x19,0x00
   \   00000002   C00F                       RJMP    ??UserInput_0
   \   00000004   ....                       LDI     R16,LOW(LEDControl1/2)
   \   00000006   ....                       LDI     R17,(LEDControl1/2) >> 8
   \   00000008   ........                   CALL    Kernel_CreateTask
   \   0000000C   ....                       LDI     R16,LOW(LEDControl2/2)
   \   0000000E   ....                       LDI     R17,(LEDControl2/2) >> 8
   \   00000010   ........                   CALL    Kernel_DeleteTask
   \   00000014   ....                       LDI     R16,LOW(blink/2)
   \   00000016   ....                       LDI     R17,(blink/2) >> 8
   \   00000018   ........                   CALL    Kernel_SuspendTask
   \   0000001C   98C0                       CBI     0x18,0x00
   \   0000001E   9AC1                       SBI     0x18,0x01
   \   00000020   C010                       RJMP    ??UserInput_1
   \                     ??UserInput_0:
   \   00000022   99C9                       SBIC    0x19,0x01
   \   00000024   C00E                       RJMP    ??UserInput_1
   \   00000026   ....                       LDI     R16,LOW(LEDControl1/2)
   \   00000028   ....                       LDI     R17,(LEDControl1/2) >> 8
   \   0000002A   ........                   CALL    Kernel_DeleteTask
   \   0000002E   ....                       LDI     R16,LOW(LEDControl2/2)
   \   00000030   ....                       LDI     R17,(LEDControl2/2) >> 8
   \   00000032   ........                   CALL    Kernel_CreateTask
   \   00000036   ....                       LDI     R16,LOW(blink/2)
   \   00000038   ....                       LDI     R17,(blink/2) >> 8
   \   0000003A   ........                   CALL    Kernel_ResumeTask
   \   0000003E   9AC0                       SBI     0x18,0x00
   \   00000040   98C1                       CBI     0x18,0x01
   \                     ??UserInput_1:
   \   00000042   99CD                       SBIC    0x19,0x05
   \   00000044   C004                       RJMP    ??UserInput_2
   \   00000046   ....                       LDI     R16,LOW(workhard/2)
   \   00000048   ....                       LDI     R17,(workhard/2) >> 8
   \   0000004A   ........                   CALL    Kernel_CreateTask
   \                     ??UserInput_2:
   \   0000004E   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void ledposter();
   \                     ledposter:
   \   00000000   9100....                   LDS     R16,??state
   \   00000004   2300                       TST     R16
   \   00000006   F449                       BRNE    ??ledposter_0
   \   00000008   99CF                       SBIC    0x19,0x07
   \   0000000A   C011                       RJMP    ??ledposter_1
   \   0000000C   E001                       LDI     R16,1
   \   0000000E   9300....                   STS     ??state,R16
   \   00000012   ....                       LDI     R18,LOW(ledmsgs)
   \   00000014   ....                       LDI     R19,(ledmsgs) >> 8
   \   00000016   ........                   JMP     Kernel_PostMessage
   \                     ??ledposter_0:
   \   0000001A   99CE                       SBIC    0x19,0x06
   \   0000001C   C008                       RJMP    ??ledposter_1
   \   0000001E   E000                       LDI     R16,0
   \   00000020   9300....                   STS     ??state,R16
   \   00000024   ....                       LDI     R18,LOW(ledmsgs)
   \   00000026   ....                       LDI     R19,(ledmsgs) >> 8
   \   00000028   E002                       LDI     R16,2
   \   0000002A   ........                   CALL    Kernel_PostMessage
   \                     ??ledposter_1:
   \   0000002E   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void ledcontroller();
   \                     ledcontroller:
   \   00000000   9721                       SBIW    R29 : R28,1
   \   00000002   ....                       LDI     R18,LOW(ledmsgs)
   \   00000004   ....                       LDI     R19,(ledmsgs) >> 8
   \   00000006   018E                       MOVW    R17 : R16,R29 : R28
   \   00000008   ........                   CALL    Kernel_GetMessage
   \   0000000C   2300                       TST     R16
   \   0000000E   F049                       BREQ    ??ledcontroller_0
   \   00000010   8108                       LD      R16,Y
   \   00000012   950A                       DEC     R16
   \   00000014   F019                       BREQ    ??ledcontroller_1
   \   00000016   950A                       DEC     R16
   \   00000018   F019                       BREQ    ??ledcontroller_2
   \   0000001A   C003                       RJMP    ??ledcontroller_0
   \                     ??ledcontroller_1:
   \   0000001C   98C5                       CBI     0x18,0x05
   \   0000001E   C001                       RJMP    ??ledcontroller_0
   \                     ??ledcontroller_2:
   \   00000020   9AC5                       SBI     0x18,0x05
   \                     ??ledcontroller_0:
   \   00000022   9621                       ADIW    R29 : R28,1
   \   00000024   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void AlternativeLedController();
   \                     AlternativeLedController:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   9721                       SBIW    R29 : R28,1
   \   00000006   ....                       LDI     R26,LOW(??state)
   \   00000008   ....                       LDI     R27,(??state) >> 8
   \   0000000A   9611                       ADIW    R27 : R26,1
   \   0000000C   910C                       LD      R16,X
   \   0000000E   9711                       SBIW    R27 : R26,1
   \   00000010   2300                       TST     R16
   \   00000012   F469                       BRNE    ??AlternativeLedController_0
   \   00000014   019D                       MOVW    R19 : R18,R27 : R26
   \   00000016   5F2E                       SUBI    R18,254
   \   00000018   4F3F                       SBCI    R19,255
   \   0000001A   018E                       MOVW    R17 : R16,R29 : R28
   \   0000001C   ........                   CALL    Kernel_GetMessage
   \   00000020   2300                       TST     R16
   \   00000022   F0B1                       BREQ    ??AlternativeLedController_1
   \   00000024   9611                       ADIW    R27 : R26,1
   \   00000026   910C                       LD      R16,X
   \   00000028   9503                       INC     R16
   \   0000002A   930C                       ST      X,R16
   \   0000002C   9711                       SBIW    R27 : R26,1
   \                     ??AlternativeLedController_0:
   \   0000002E   9611                       ADIW    R27 : R26,1
   \   00000030   910C                       LD      R16,X
   \   00000032   9711                       SBIW    R27 : R26,1
   \   00000034   3001                       CPI     R16,1
   \   00000036   F461                       BRNE    ??AlternativeLedController_1
   \   00000038   8108                       LD      R16,Y
   \   0000003A   950A                       DEC     R16
   \   0000003C   F019                       BREQ    ??AlternativeLedController_2
   \   0000003E   950A                       DEC     R16
   \   00000040   F019                       BREQ    ??AlternativeLedController_3
   \   00000042   C003                       RJMP    ??AlternativeLedController_4
   \                     ??AlternativeLedController_2:
   \   00000044   98C5                       CBI     0x18,0x05
   \   00000046   C001                       RJMP    ??AlternativeLedController_4
   \                     ??AlternativeLedController_3:
   \   00000048   9AC5                       SBI     0x18,0x05
   \                     ??AlternativeLedController_4:
   \   0000004A   E000                       LDI     R16,0
   \   0000004C   9611                       ADIW    R27 : R26,1
   \   0000004E   930C                       ST      X,R16
   \                     ??AlternativeLedController_1:
   \   00000050   9621                       ADIW    R29 : R28,1
   \   00000052   91A9                       LD      R26,Y+
   \   00000054   91B9                       LD      R27,Y+
   \   00000056   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void ledFlipper();
   \                     ledFlipper:
   \   00000000   ....                       LDI     R16,LOW(semaFlip)
   \   00000002   ....                       LDI     R17,(semaFlip) >> 8
   \   00000004   ........                   CALL    Kernel_SemaphoreWait
   \   00000008   2300                       TST     R16
   \   0000000A   F029                       BREQ    ??ledFlipper_0
   \   0000000C   B318                       IN      R17,0x18
   \   0000000E   FF13                       SBRS    R17,3
   \   00000010   9AC3                       SBI     0x18,0x03
   \   00000012   FD13                       SBRC    R17,3
   \   00000014   98C3                       CBI     0x18,0x03
   \                     ??ledFlipper_0:
   \   00000016   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
   \   __nearfunc void AlternativeLedFlipper();
   \                     AlternativeLedFlipper:
   \   00000000   9100....                   LDS     R16,??__state_1
   \   00000004   2300                       TST     R16
   \   00000006   F459                       BRNE    ??AlternativeLedFlipper_0
    192          	YieldUntil(Kernel_SemaphoreWait(&semaFlip))
   \   00000008   ....                       LDI     R16,LOW(semaFlip)
   \   0000000A   ....                       LDI     R17,(semaFlip) >> 8
   \   0000000C   ........                   CALL    Kernel_SemaphoreWait
   \   00000010   2300                       TST     R16
   \   00000012   F079                       BREQ    ??AlternativeLedFlipper_1
   \   00000014   ....                       LDI     R30,LOW(??__state_1)
   \   00000016   ....                       LDI     R31,(??__state_1) >> 8
   \   00000018   8100                       LD      R16,Z
   \   0000001A   9503                       INC     R16
   \   0000001C   8300                       ST      Z,R16
   \                     ??AlternativeLedFlipper_0:
   \   0000001E   3001                       CPI     R16,1
   \   00000020   F441                       BRNE    ??AlternativeLedFlipper_1
    193          	led3=!led3;
   \   00000022   B318                       IN      R17,0x18
   \   00000024   FF13                       SBRS    R17,3
   \   00000026   9AC3                       SBI     0x18,0x03
   \   00000028   FD13                       SBRC    R17,3
   \   0000002A   98C3                       CBI     0x18,0x03
    194          	YieldEnd
   \   0000002C   E000                       LDI     R16,0
   \   0000002E   9300....                   STS     ??__state_1,R16
   \                     ??AlternativeLedFlipper_1:
   \   00000032   9508                       RET
    195          }
    196          
    197          

   \                                 In segment CODE, align 2, keep-with-next
    198          void SwitchFlipper()
    199          {
    200          static bool state=false;
    201          
    202          	if(state)
   \   __nearfunc void SwitchFlipper();
   \                     SwitchFlipper:
   \   00000000   ....                       LDI     R30,LOW(??__state_1)
   \   00000002   ....                       LDI     R31,(??__state_1) >> 8
   \   00000004   8101                       LDD     R16,Z+1
   \   00000006   2300                       TST     R16
   \   00000008   F041                       BREQ    ??SwitchFlipper_0
    203          	{
    204          		if(sw3==UP)
   \   0000000A   9BCB                       SBIS    0x19,0x03
   \   0000000C   C012                       RJMP    ??SwitchFlipper_1
    205          		{
    206          			state=false;
   \   0000000E   E000                       LDI     R16,0
   \   00000010   8301                       STD     Z+1,R16
    207          			Kernel_Sleep(20);
   \   00000012   E104                       LDI     R16,20
   \   00000014   E010                       LDI     R17,0
   \   00000016   ........                   JMP     Kernel_Sleep
    208          		}
    209          	}
    210          	else
    211          	{
    212          		if(sw3==DOWN)
   \                     ??SwitchFlipper_0:
   \   0000001A   99CB                       SBIC    0x19,0x03
   \   0000001C   C00A                       RJMP    ??SwitchFlipper_1
    213          		{
    214          			state=true;
   \   0000001E   E001                       LDI     R16,1
   \   00000020   8301                       STD     Z+1,R16
    215          			Kernel_SemaphoreSignal(&semaFlip);
   \   00000022   9633                       ADIW    R31 : R30,3
   \   00000024   018F                       MOVW    R17 : R16,R31 : R30
   \   00000026   ........                   CALL    Kernel_SemaphoreSignal
    216          			Kernel_Sleep(20);
   \   0000002A   E104                       LDI     R16,20
   \   0000002C   E010                       LDI     R17,0
   \   0000002E   ........                   CALL    Kernel_Sleep
    217          		}
    218          	}
    219          }
   \                     ??SwitchFlipper_1:
   \   00000032   9508                       RET
    220          

   \                                 In segment CODE, align 2, keep-with-next
    221          void AlternativeSwitchFlipper()
    222          {
   \   __nearfunc void AlternativeSwitchFlipper();
   \                     AlternativeSwitchFlipper:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
    223          	YieldBegin
   \   00000004   ....                       LDI     R26,LOW(??__state_1)
   \   00000006   ....                       LDI     R27,(??__state_1) >> 8
   \   00000008   9612                       ADIW    R27 : R26,2
   \   0000000A   910C                       LD      R16,X
   \   0000000C   9712                       SBIW    R27 : R26,2
   \   0000000E   2300                       TST     R16
   \   00000010   F439                       BRNE    ??AlternativeSwitchFlipper_0
    224          	YieldUntil(sw3==DOWN)																																	// wait until key is pressed
   \   00000012   99CB                       SBIC    0x19,0x03
   \   00000014   C030                       RJMP    ??AlternativeSwitchFlipper_1
   \   00000016   E001                       LDI     R16,1
   \   00000018   9612                       ADIW    R27 : R26,2
   \   0000001A   930C                       ST      X,R16
   \   0000001C   9712                       SBIW    R27 : R26,2
   \   0000001E   C005                       RJMP    ??AlternativeSwitchFlipper_2
   \                     ??AlternativeSwitchFlipper_0:
   \   00000020   9612                       ADIW    R27 : R26,2
   \   00000022   910C                       LD      R16,X
   \   00000024   9712                       SBIW    R27 : R26,2
   \   00000026   3001                       CPI     R16,1
   \   00000028   F469                       BRNE    ??AlternativeSwitchFlipper_3
    225          	Kernel_SemaphoreSignal(&semaFlip);																											// send signal
   \                     ??AlternativeSwitchFlipper_2:
   \   0000002A   018D                       MOVW    R17 : R16,R27 : R26
   \   0000002C   5F0D                       SUBI    R16,253
   \   0000002E   4F1F                       SBCI    R17,255
   \   00000030   ........                   CALL    Kernel_SemaphoreSignal
    226          	YieldWait(20)
   \                     ??AlternativeSwitchFlipper_4:
   \   00000034   E104                       LDI     R16,20
   \   00000036   E010                       LDI     R17,0
   \   00000038   ........                   CALL    Kernel_Sleep
   \   0000003C   9612                       ADIW    R27 : R26,2
   \   0000003E   910C                       LD      R16,X
   \   00000040   9503                       INC     R16
   \   00000042   C018                       RJMP    ??AlternativeSwitchFlipper_5
   \                     ??AlternativeSwitchFlipper_3:
   \   00000044   9612                       ADIW    R27 : R26,2
   \   00000046   910C                       LD      R16,X
   \   00000048   9712                       SBIW    R27 : R26,2
   \   0000004A   3002                       CPI     R16,2
   \   0000004C   F439                       BRNE    ??AlternativeSwitchFlipper_6
    227          	YieldWhile(sw3==DOWN)																																	// wait while key is pressed
   \   0000004E   9BCB                       SBIS    0x19,0x03
   \   00000050   C012                       RJMP    ??AlternativeSwitchFlipper_1
   \   00000052   E003                       LDI     R16,3
   \   00000054   9612                       ADIW    R27 : R26,2
   \   00000056   930C                       ST      X,R16
   \   00000058   9712                       SBIW    R27 : R26,2
   \   0000005A   CFEC                       RJMP    ??AlternativeSwitchFlipper_4
   \                     ??AlternativeSwitchFlipper_6:
   \   0000005C   9612                       ADIW    R27 : R26,2
   \   0000005E   910C                       LD      R16,X
   \   00000060   9712                       SBIW    R27 : R26,2
   \   00000062   3003                       CPI     R16,3
   \   00000064   F339                       BREQ    ??AlternativeSwitchFlipper_4
    228          	YieldWait(20)
   \   00000066   9612                       ADIW    R27 : R26,2
   \   00000068   910C                       LD      R16,X
   \   0000006A   9712                       SBIW    R27 : R26,2
   \   0000006C   3004                       CPI     R16,4
   \   0000006E   F419                       BRNE    ??AlternativeSwitchFlipper_1
    229          	YieldEnd
   \   00000070   E000                       LDI     R16,0
   \   00000072   9612                       ADIW    R27 : R26,2
   \                     ??AlternativeSwitchFlipper_5:
   \   00000074   930C                       ST      X,R16
   \                     ??AlternativeSwitchFlipper_1:
   \   00000076   91A9                       LD      R26,Y+
   \   00000078   91B9                       LD      R27,Y+
   \   0000007A   9508                       RET
    230          }
    231          
    232          

   \                                 In segment NEAR_F, align 1, keep-with-next
    233          string newline[]="\r\n";
   \   char const __flash newline[3];
   \                     newline:
   \   00000000   0A0D00                     DB "\015\012"
    234          
    235          

   \                                 In segment CODE, align 2, keep-with-next
    236          __C_task void main(void)
    237          {
    238          unsigned char* p1;
    239          unsigned short* p2;
    240          double* p3;
    241          char* p4;
    242          
    243          	DDRB=0xff;                  // PORT B is outputs
   \   __nearfunc __C_task void main();
   \                     main:
   \   00000000   EF0F                       LDI     R16,255
   \   00000002   BB07                       OUT     0x17,R16
    244          	DDRA=0x00;                  // PORT A is inputs
   \   00000004   E000                       LDI     R16,0
   \   00000006   BB0A                       OUT     0x1A,R16
    245          	PORTB=0xff;                 // all LEDs off
   \   00000008   EF0F                       LDI     R16,255
   \   0000000A   BB08                       OUT     0x18,R16
    246          
    247          	UART_Init(__BAUDRATE__(115200));
   \   0000000C   E00B                       LDI     R16,11
   \   0000000E   E010                       LDI     R17,0
   \   00000010   ........                   CALL    UART_Init
    248          
    249          	Kernel_Init();
   \   00000014   ........                   CALL    Kernel_Init
    250          
    251          	UART_WriteString_P(newline);
   \   00000018   ....                       LDI     R16,LOW(newline)
   \   0000001A   ....                       LDI     R17,(newline) >> 8
   \   0000001C   ........                   CALL    UART_WriteString_P
    252          	p1 = Kernel_Allocate(200);
   \   00000020   EC08                       LDI     R16,200
   \   00000022   E010                       LDI     R17,0
   \   00000024   ........                   CALL    Kernel_Allocate
   \   00000028   01C8                       MOVW    R25 : R24,R17 : R16
    253          	UART_WritePointer(p1);
   \   0000002A   ........                   CALL    UART_WritePointer
    254          	UART_WriteString_P(newline);
   \   0000002E   ....                       LDI     R16,LOW(newline)
   \   00000030   ....                       LDI     R17,(newline) >> 8
   \   00000032   ........                   CALL    UART_WriteString_P
    255          	p2 = Kernel_Allocate(200);
   \   00000036   EC08                       LDI     R16,200
   \   00000038   E010                       LDI     R17,0
   \   0000003A   ........                   CALL    Kernel_Allocate
   \   0000003E   01D8                       MOVW    R27 : R26,R17 : R16
    256          	UART_WritePointer(p2);
   \   00000040   ........                   CALL    UART_WritePointer
    257          	UART_WriteString_P(newline);
   \   00000044   ....                       LDI     R16,LOW(newline)
   \   00000046   ....                       LDI     R17,(newline) >> 8
   \   00000048   ........                   CALL    UART_WriteString_P
    258          	p3 = Kernel_Allocate(200);
   \   0000004C   EC08                       LDI     R16,200
   \   0000004E   E010                       LDI     R17,0
   \   00000050   ........                   CALL    Kernel_Allocate
   \   00000054   0128                       MOVW    R5 : R4,R17 : R16
    259          	UART_WritePointer(p3);
   \   00000056   ........                   CALL    UART_WritePointer
    260          	UART_WriteString_P(newline);
   \   0000005A   ....                       LDI     R16,LOW(newline)
   \   0000005C   ....                       LDI     R17,(newline) >> 8
   \   0000005E   ........                   CALL    UART_WriteString_P
    261          	p4 = Kernel_Allocate(200);
   \   00000062   EC08                       LDI     R16,200
   \   00000064   E010                       LDI     R17,0
   \   00000066   ........                   CALL    Kernel_Allocate
   \   0000006A   0138                       MOVW    R7 : R6,R17 : R16
    262          	UART_WritePointer(p4);
   \   0000006C   ........                   CALL    UART_WritePointer
    263          	UART_WriteString_P(newline);
   \   00000070   ....                       LDI     R16,LOW(newline)
   \   00000072   ....                       LDI     R17,(newline) >> 8
   \   00000074   ........                   CALL    UART_WriteString_P
    264          
    265          	Kernel_Deallocate(p3);
   \   00000078   0182                       MOVW    R17 : R16,R5 : R4
   \   0000007A   ........                   CALL    Kernel_Deallocate
    266          	p3 = Kernel_Allocate(50);
   \   0000007E   E302                       LDI     R16,50
   \   00000080   E010                       LDI     R17,0
   \   00000082   ........                   CALL    Kernel_Allocate
   \   00000086   0128                       MOVW    R5 : R4,R17 : R16
    267          	UART_WritePointer(p3);
   \   00000088   ........                   CALL    UART_WritePointer
    268          	UART_WriteString_P(newline);
   \   0000008C   ....                       LDI     R16,LOW(newline)
   \   0000008E   ....                       LDI     R17,(newline) >> 8
   \   00000090   ........                   CALL    UART_WriteString_P
    269          
    270          	Kernel_Deallocate(p4);
   \   00000094   0183                       MOVW    R17 : R16,R7 : R6
   \   00000096   ........                   CALL    Kernel_Deallocate
    271          	p4 = Kernel_Allocate(300);
   \   0000009A   E20C                       LDI     R16,44
   \   0000009C   E011                       LDI     R17,1
   \   0000009E   ........                   CALL    Kernel_Allocate
   \   000000A2   0138                       MOVW    R7 : R6,R17 : R16
    272          	UART_WritePointer(p4);
   \   000000A4   ........                   CALL    UART_WritePointer
    273          	UART_WriteString_P(newline);
   \   000000A8   ....                       LDI     R16,LOW(newline)
   \   000000AA   ....                       LDI     R17,(newline) >> 8
   \   000000AC   ........                   CALL    UART_WriteString_P
    274          	
    275          	Kernel_CreateTask(UserInput);				// Add a task to queue (must have at least one task obviously)
   \   000000B0   ....                       LDI     R16,LOW(UserInput/2)
   \   000000B2   ....                       LDI     R17,(UserInput/2) >> 8
   \   000000B4   ........                   CALL    Kernel_CreateTask
    276          	Kernel_CreateTask(blink);
   \   000000B8   ....                       LDI     R16,LOW(blink/2)
   \   000000BA   ....                       LDI     R17,(blink/2) >> 8
   \   000000BC   ........                   CALL    Kernel_CreateTask
    277          
    278          	Kernel_CreateTask(ledposter);
   \   000000C0   ....                       LDI     R16,LOW(ledposter/2)
   \   000000C2   ....                       LDI     R17,(ledposter/2) >> 8
   \   000000C4   ........                   CALL    Kernel_CreateTask
    279          //	Kernel_CreateTask(ledcontroller);
    280          	Kernel_CreateTask(AlternativeLedController);
   \   000000C8   ....                       LDI     R16,LOW(AlternativeLedController/2)
   \   000000CA   ....                       LDI     R17,(AlternativeLedController/2) >> 8
   \   000000CC   ........                   CALL    Kernel_CreateTask
    281          
    282          //	Kernel_CreateTask(ledFlipper);
    283          	Kernel_CreateTask(AlternativeLedFlipper);
   \   000000D0   ....                       LDI     R16,LOW(AlternativeLedFlipper/2)
   \   000000D2   ....                       LDI     R17,(AlternativeLedFlipper/2) >> 8
   \   000000D4   ........                   CALL    Kernel_CreateTask
    284          //	Kernel_CreateTask(SwitchFlipper);
    285          	Kernel_CreateTask(AlternativeSwitchFlipper);
   \   000000D8   ....                       LDI     R16,LOW(AlternativeSwitchFlipper/2)
   \   000000DA   ....                       LDI     R17,(AlternativeSwitchFlipper/2) >> 8
   \   000000DC   ........                   CALL    Kernel_CreateTask
    286          
    287          	Kernel_Deallocate(p1);
   \   000000E0   018C                       MOVW    R17 : R16,R25 : R24
   \   000000E2   ........                   CALL    Kernel_Deallocate
    288          	Kernel_Deallocate(p2);
   \   000000E6   018D                       MOVW    R17 : R16,R27 : R26
   \   000000E8   ........                   CALL    Kernel_Deallocate
    289          	Kernel_Deallocate(p3);
   \   000000EC   0182                       MOVW    R17 : R16,R5 : R4
   \   000000EE   ........                   CALL    Kernel_Deallocate
    290          	Kernel_Deallocate(p4);
   \   000000F2   0183                       MOVW    R17 : R16,R7 : R6
   \   000000F4   ........                   CALL    Kernel_Deallocate
    291          
    292          	Kernel_Run();
   \   000000F8   ........                   JMP     Kernel_Run
    293          }

   Maximum stack usage in bytes:

     Function                     CSTACK  RSTACK
     --------                     ------  ------
     AlternativeLedController         3       2 
       -> Kernel_GetMessage           3       2 
     AlternativeLedFlipper            0       2 
       -> Kernel_SemaphoreWait        0       2 
     AlternativeSwitchFlipper         2       2 
       -> Kernel_SemaphoreSignal      2       2 
       -> Kernel_Sleep                2       2 
       -> Kernel_Sleep                2       2 
     LEDControl1                      0       0 
     LEDControl2                      0       0 
     SwitchFlipper                    0       2 
       -> Kernel_Sleep                0       2 
       -> Kernel_SemaphoreSignal      0       2 
       -> Kernel_Sleep                0       2 
     UserInput                        0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_DeleteTask           0       2 
       -> Kernel_SuspendTask          0       2 
       -> Kernel_DeleteTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_ResumeTask           0       2 
       -> Kernel_CreateTask           0       2 
     blink                            0       2 
       -> Kernel_Sleep                0       2 
     ledFlipper                       0       2 
       -> Kernel_SemaphoreWait        0       2 
     ledcontroller                    1       2 
       -> Kernel_GetMessage           1       2 
     ledposter                        0       2 
       -> Kernel_PostMessage          0       2 
       -> Kernel_PostMessage          0       2 
     main                             0       2 
       -> UART_Init                   0       2 
       -> Kernel_Init                 0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Allocate             0       2 
       -> UART_WritePointer           0       2 
       -> UART_WriteString_P          0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_CreateTask           0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Deallocate           0       2 
       -> Kernel_Run                  0       2 
     workhard                         0       0 

 
      4 bytes in segment ABSOLUTE
    802 bytes in segment CODE
      6 bytes in segment INITTAB
      3 bytes in segment NEAR_F
     17 bytes in segment NEAR_Z
 
    805 bytes of CODE memory (+ 6 bytes shared)
     17 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
