##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version21/Dec/2007  23:42:53 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Peripherals\UART.c         #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    KernelTester\Release\Obj\ -I                            #
#                    C:\PROGRA~1\IARSYS~1\EW23EV~1\avr\SRC\CLIB\INC\ -I      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\ -I  #
#                    f:\Projects\[Drivers]\C\MROS\ -lC                       #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\Ker #
#                    nelTester\Release\List\ -e --initializers_in_flash -s9  #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\P #
#                    eripherals\UART.c                                       #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\UART.lst                                       #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\Obj\UART.r90                                        #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "UART.h"

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL;
   \                     _A_UBRRL:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB;
   \                     _A_UCSRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA;
   \                     _A_UCSRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR;
   \                     _A_UDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH;
   \                     _A_UBRRH:
   \   00000000                              DS 1
      2          
      3          #define SEND_CRLF
      4          
      5          #if defined(BUFFERED_UART_)
      6          static unsigned char RxBuffer[RX_BUFFER_SIZE];
      7          static unsigned char RxBufferIn=0;
      8          static unsigned char RxBufferOut=0;
      9          static unsigned char RxBufferFull=0;
     10          
     11          static unsigned char TxBuffer[TX_BUFFER_SIZE];
     12          static unsigned char TxBufferIn=0;
     13          static unsigned char TxBufferOut=0;
     14          static unsigned char TxBufferFull=0;
     15          #endif
     16          
     17          
     18          
     19          static void WriteHexDigit(unsigned char value);
     20          
     21          
     22          /**************************************************************
     23          
     24          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     25          void UART_Init(unsigned short baudrate)
     26          {
     27          #if defined(__IOM64_H) 
     28          	UBRR0H=(baudrate>>8);
     29          	UBRR0L=(baudrate&0xff);
     30          	UCSR0A=(1<<U2X0);
     31          #elif defined(__IOM32_H) || defined(__IOM8_H)
     32          	UBRRH=(baudrate>>8);
   \   __nearfunc void UART_Init(unsigned short);
   \                     UART_Init:
   \   00000000   BD10                       OUT     0x20,R17
     33          	UBRRL=(baudrate&0xff);
   \   00000002   B909                       OUT     0x09,R16
     34          	UCSRA=(1<<U2X);
   \   00000004   E002                       LDI     R16,2
   \   00000006   B90B                       OUT     0x0B,R16
     35          #else
     36          #error Module UART_ does not support the selected processor!
     37          #endif
     38          
     39          #if defined(BUFFERED_UART_)
     40          
     41          #if defined(__IOM64_H) 
     42          	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     43          #elif defined(__IOM32_H) || defined(__IOM8_H)
     44          	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     45          #else
     46          #error Module UART_ does not support the selected processor!
     47          #endif
     48          
     49          #else
     50          
     51          #if defined(__IOM64_H) 
     52          	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     53          #elif defined(__IOM32_H) || defined(__IOM8_H)
     54          	UCSRB=(1<<RXEN)|(1<<TXEN);
   \   00000008   E108                       LDI     R16,24
   \   0000000A   B90A                       OUT     0x0A,R16
     55          #else
     56          #error Module UART_ does not support the selected processor!
     57          #endif
     58          
     59          #endif
     60          
     61          }
   \   0000000C   9508                       RET
     62          
     63          
     64          /**************************************************************
     65          
     66          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     67          void UART_SetBaudrate(unsigned short baudrate)
     68          {
     69          #if defined(__IOM64_H) 
     70          	UBRR0H=(baudrate>>8);
     71          	UBRR0L=(baudrate&0xff);
     72          #elif defined(__IOM32_H) || defined(__IOM8_H)
     73          	UBRRH=(baudrate>>8);
   \   __nearfunc void UART_SetBaudrate(unsigned short);
   \                     UART_SetBaudrate:
   \   00000000   BD10                       OUT     0x20,R17
     74          	UBRRL=(baudrate&0xff);
   \   00000002   B909                       OUT     0x09,R16
     75          #else
     76          #error Module UART_ does not support the selected processor!
     77          #endif
     78          }
   \   00000004   9508                       RET
     79          
     80          /**************************************************************
     81          
     82          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     83          unsigned char UART_BytesReady(void)
     84          {
     85          #if defined(BUFFERED_UART_)
     86          	if(RxBufferFull)
     87          		return RX_BUFFER_SIZE;
     88          	else
     89          	{
     90          		if(RxBufferIn==RxBufferOut)
     91          			return 0;
     92          		else if(RxBufferIn>RxBufferOut)
     93          			return (RxBufferIn-RxBufferOut);
     94          		else
     95          			return (RX_BUFFER_SIZE-(RxBufferOut-RxBufferIn));
     96          	}
     97          
     98          #else
     99          
    100          #if defined(__IOM64_H)
    101          	return ((UCSR0A&(1<<RXC0))!=0);
    102          #elif defined(__IOM32_H) || defined(__IOM8_H)
    103          	return ((UCSRA&(1<<RXC))!=0);
   \   __nearfunc unsigned char UART_BytesReady();
   \                     UART_BytesReady:
   \   00000000   9B5F                       SBIS    0x0B,0x07
   \   00000002   C002                       RJMP    ??UART_BytesReady_0
   \   00000004   E001                       LDI     R16,1
   \   00000006   9508                       RET
   \                     ??UART_BytesReady_0:
   \   00000008   E000                       LDI     R16,0
   \   0000000A   9508                       RET
    104          #else
    105          #error Module UART_ does not support the selected processor!
    106          #endif
    107          
    108          #endif
    109          }
    110          
    111          
    112          /**************************************************************
    113          
    114          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    115          unsigned char UART_ReadByte(void)
    116          {
    117          #if defined(BUFFERED_UART_)
    118          unsigned char Temp;
    119          
    120          	while(UART_ByteSReady()==0);
    121          
    122          	Temp=RxBuffer[RxBufferOut++];
    123          	if(RxBufferOut>=RX_BUFFER_SIZE)
    124          		RxBufferOut=0;
    125          	RxBufferFull=0;
    126          	return Temp;
    127          
    128          #else
    129          
    130          #if defined(__IOM64_H)
    131          	while(!(UCSR0A&(1<<RXC0)));
    132          	return UDR0;
    133          #elif defined(__IOM32_H) || defined(__IOM8_H)
    134          	while(!(UCSRA&(1<<RXC)));
   \   __nearfunc unsigned char UART_ReadByte();
   \                     UART_ReadByte:
   \                     ??UART_ReadByte_0:
   \   00000000   9B5F                       SBIS    0x0B,0x07
   \   00000002   CFFE                       RJMP    ??UART_ReadByte_0
    135          	return UDR;
   \   00000004   B10C                       IN      R16,0x0C
   \   00000006   9508                       RET
    136          #else
    137          #error Module UART_ does not support the selected processor!
    138          #endif
    139          
    140          #endif
    141          }
    142          
    143          
    144          /**************************************************************
    145          
    146          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    147          void UART_ReadBytes(unsigned char *buffer, unsigned char length)
    148          {
   \   __nearfunc void UART_ReadBytes(unsigned char *, unsigned char);
   \                     UART_ReadBytes:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   2F82                       MOV     R24,R18
   \   0000000A   C003                       RJMP    ??UART_ReadBytes_0
    149          	while(length)
    150          	{
    151          		*buffer++=UART_ReadByte();
   \                     ??UART_ReadBytes_1:
   \   0000000C   ....                       RCALL   UART_ReadByte
   \   0000000E   930D                       ST      X+,R16
    152          		length--;
   \   00000010   958A                       DEC     R24
   \                     ??UART_ReadBytes_0:
   \   00000012   2388                       TST     R24
   \   00000014   F7D9                       BRNE    ??UART_ReadBytes_1
    153          	}
    154          }
   \   00000016   9189                       LD      R24,Y+
   \   00000018   91A9                       LD      R26,Y+
   \   0000001A   91B9                       LD      R27,Y+
   \   0000001C   9508                       RET
    155          
    156          
    157          /**************************************************************
    158          
    159          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    160          void UART_WriteByte(unsigned char data)
    161          {
    162          #if defined(BUFFERED_UART_)
    163          
    164          	while(TxBufferFull);
    165          
    166          //	if(UCSRA&(1<<UDRE))
    167          //		UDR=Data;
    168          //	else
    169          //	{
    170          		TxBuffer[TxBufferIn++]=data;
    171          		if(TxBufferIn>=TX_BUFFER_SIZE)
    172          			TxBufferIn=0;
    173          		if(TxBufferIn==TxBufferOut)
    174          			TxBufferFull=1;
    175          		else
    176          			TxBufferFull=0;
    177          		UCSRB|=(1<<UDRIE);
    178          //	}
    179          
    180          #else
    181          
    182          #if defined(__IOM64_H)
    183          	while(!(UCSR0A&(1<<UDRE0)));
    184          	UDR0=data;
    185          #elif defined(__IOM32_H) || defined(__IOM8_H)
    186          	while(!(UCSRA&(1<<UDRE)));
   \   __nearfunc void UART_WriteByte(unsigned char);
   \                     UART_WriteByte:
   \                     ??UART_WriteByte_0:
   \   00000000   9B5D                       SBIS    0x0B,0x05
   \   00000002   CFFE                       RJMP    ??UART_WriteByte_0
    187          	UDR=data;
   \   00000004   B90C                       OUT     0x0C,R16
    188          #else
    189          #error Module UART_ does not support the selected processor!
    190          #endif
    191          
    192          #endif
    193          }
   \   00000006   9508                       RET
    194          
    195          
    196          /**************************************************************
    197          
    198          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    199          void putc(unsigned char data)
    200          {
    201          	UART_WriteByte(data);
   \   __nearfunc void putc(unsigned char);
   \                     putc:
   \   00000000   ....                       RJMP    UART_WriteByte
    202          }

   \                                 In segment CODE, align 2, keep-with-next
    203          int putchar(int data)
    204          {
    205          	UART_WriteByte(data);
   \   __nearfunc int putchar(int);
   \                     putchar:
   \   00000000   ....                       RCALL   UART_WriteByte
    206          	return 0;
   \   00000002   E000                       LDI     R16,0
   \   00000004   E010                       LDI     R17,0
   \   00000006   9508                       RET
    207          }
    208          
    209          
    210          /**************************************************************
    211          
    212          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    213          unsigned char getc(void)
    214          {
    215          	return UART_ReadByte();
   \   __nearfunc unsigned char getc();
   \                     getc:
   \   00000000   ....                       RJMP    UART_ReadByte
    216          }
    217          
    218          
    219          /**************************************************************
    220          
    221          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    222          void UART_WriteBytes(unsigned char *buffer, unsigned char length)
    223          {
   \   __nearfunc void UART_WriteBytes(unsigned char *, unsigned char);
   \                     UART_WriteBytes:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   2F82                       MOV     R24,R18
   \   0000000A   C003                       RJMP    ??UART_WriteBytes_0
    224          	while(length)
    225          	{
    226          		length--;
   \                     ??UART_WriteBytes_1:
   \   0000000C   958A                       DEC     R24
    227          		UART_WriteByte(*buffer++);
   \   0000000E   910D                       LD      R16,X+
   \   00000010   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteBytes_0:
   \   00000012   2388                       TST     R24
   \   00000014   F7D9                       BRNE    ??UART_WriteBytes_1
    228          	}
    229          }
   \   00000016   9189                       LD      R24,Y+
   \   00000018   91A9                       LD      R26,Y+
   \   0000001A   91B9                       LD      R27,Y+
   \   0000001C   9508                       RET
    230          
    231          
    232          /**************************************************************
    233          
    234          **************************************************************/
    235          #if defined(BUFFERED_UART_)
    236          #pragma vector=USART_RXC_vect
    237          __interrupt void UART__RX_Interrupt(void)
    238          {
    239          unsigned char temp;
    240          
    241          #if defined(__IOM64_H)
    242          	temp=UDR0;
    243          #elif defined(__IOM32_H) || defined(__IOM8_H)
    244          	temp=UDR;
    245          #else
    246          #error Module UART_ does not support the selected processor!
    247          #endif
    248          	if(!RxBufferFull)
    249          	{
    250          		RxBuffer[RxBufferIn++]=temp;
    251          		if(RxBufferIn>=RX_BUFFER_SIZE)
    252          			RxBufferIn=0;
    253          		if(RxBufferIn==RxBufferOut)
    254          			RxBufferFull=1;
    255          		else
    256          			RxBufferFull=0;
    257          	}
    258          }
    259          #endif
    260          
    261          
    262          /**************************************************************
    263          
    264          **************************************************************/
    265          #if defined(BUFFERED_UART_)
    266          #pragma vector=USART_UDRE_vect
    267          __interrupt void UART__UDRE_Interrupt(void)
    268          {
    269          	if(TxBufferFull || (TxBufferIn!=TxBufferOut))
    270          	{
    271          #if defined(__IOM64_H)
    272          		UDR0=TxBuffer[TxBufferOut++];
    273          #elif defined(__IOM32_H) || defined(__IOM8_H)
    274          		UDR=TxBuffer[TxBufferOut++];
    275          #else
    276          #error Module UART_ does not support the selected processor!
    277          #endif
    278          		if(TxBufferOut>=TX_BUFFER_SIZE)
    279          			TxBufferOut=0;
    280          		TxBufferFull=0;
    281          	}
    282          	else
    283          #if defined(__IOM64_H)
    284          		UCSR0B&=~(1<<UDRIE0);
    285          #elif defined(__IOM32_H) || defined(__IOM8_H)
    286          		UCSRB&=~(1<<UDRIE);
    287          #else
    288          #error Module UART_ does not support the selected processor!
    289          #endif
    290          }
    291          #endif
    292          
    293          
    294          
    295          /**************************************************************
    296          
    297          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    298          void UART_WriteString(char* str)
    299          {
   \   __nearfunc void UART_WriteString(char *);
   \                     UART_WriteString:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   C007                       RJMP    ??UART_WriteString_0
    300          unsigned char temp;
    301          
    302          	while(*str)
    303          	{
    304          		temp=*str++;
   \                     ??UART_WriteString_1:
   \   0000000A   9611                       ADIW    R27 : R26,1
    305          		UART_WriteByte(temp);
   \   0000000C   2F08                       MOV     R16,R24
   \   0000000E   ....                       RCALL   UART_WriteByte
    306          #if defined(SEND_CRLF)
    307          		if(temp==10)
   \   00000010   308A                       CPI     R24,10
   \   00000012   F411                       BRNE    ??UART_WriteString_0
    308          			UART_WriteByte(13);
   \   00000014   E00D                       LDI     R16,13
   \   00000016   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteString_0:
   \   00000018   918C                       LD      R24,X
   \   0000001A   2388                       TST     R24
   \   0000001C   F7B1                       BRNE    ??UART_WriteString_1
    309          #endif
    310          	}
    311          }
   \   0000001E   9189                       LD      R24,Y+
   \   00000020   91A9                       LD      R26,Y+
   \   00000022   91B9                       LD      R27,Y+
   \   00000024   9508                       RET
    312          
    313          
    314          /**************************************************************
    315          
    316          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    317          void UART_WriteString_P(string* str)
    318          {
   \   __nearfunc void UART_WriteString_P(char const __flash *);
   \                     UART_WriteString_P:
   \   00000000   93AA                       ST      -Y,R26
   \   00000002   939A                       ST      -Y,R25
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000008   C007                       RJMP    ??UART_WriteString_P_0
    319          unsigned char temp;
    320          
    321          	while(*str)
    322          	{
    323          		temp=*str++;
   \                     ??UART_WriteString_P_1:
   \   0000000A   9601                       ADIW    R25 : R24,1
    324          		UART_WriteByte(temp);
   \   0000000C   2F0A                       MOV     R16,R26
   \   0000000E   ....                       RCALL   UART_WriteByte
    325          #if defined(SEND_CRLF)
    326          		if(temp==10)
   \   00000010   30AA                       CPI     R26,10
   \   00000012   F411                       BRNE    ??UART_WriteString_P_0
    327          			UART_WriteByte(13);
   \   00000014   E00D                       LDI     R16,13
   \   00000016   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteString_P_0:
   \   00000018   01FC                       MOVW    R31 : R30,R25 : R24
   \   0000001A   91A4                       LPM     R26,Z
   \   0000001C   23AA                       TST     R26
   \   0000001E   F7A9                       BRNE    ??UART_WriteString_P_1
    328          #endif
    329          	}
    330          }
   \   00000020   9189                       LD      R24,Y+
   \   00000022   9199                       LD      R25,Y+
   \   00000024   91A9                       LD      R26,Y+
   \   00000026   9508                       RET
    331          
    332          
    333          
    334          /**************************************************************
    335          
    336          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    337          void UART_WriteValueUnsignedChar(unsigned char value)
    338          {
   \   __nearfunc void UART_WriteValueUnsignedChar(unsigned char);
   \                     UART_WriteValueUnsignedChar:
   \   00000000   938A                       ST      -Y,R24
   \   00000002   2F80                       MOV     R24,R16
    339          	if(value > 99)
   \   00000004   3684                       CPI     R24,100
   \   00000006   F030                       BRCS    ??UART_WriteValueUnsignedChar_0
    340          		UART_WriteByte((value / 100) + '0');
   \   00000008   E644                       LDI     R20,100
   \   0000000A   ........                   CALL    ?UC_DIVMOD_L01
   \   0000000E   5D00                       SUBI    R16,208
   \   00000010   ....                       RCALL   UART_WriteByte
   \   00000012   C004                       RJMP    ??UART_WriteValueUnsignedChar_1
    341          	else
    342          		UART_WriteByte(' ');
   \                     ??UART_WriteValueUnsignedChar_0:
   \   00000014   E200                       LDI     R16,32
   \   00000016   ....                       RCALL   UART_WriteByte
    343          	
    344          	if(value > 9)
   \   00000018   308A                       CPI     R24,10
   \   0000001A   F050                       BRCS    ??UART_WriteValueUnsignedChar_2
    345          		UART_WriteByte(((value / 10) % 10) + '0');
   \                     ??UART_WriteValueUnsignedChar_1:
   \   0000001C   2F08                       MOV     R16,R24
   \   0000001E   E04A                       LDI     R20,10
   \   00000020   ........                   CALL    ?UC_DIVMOD_L01
   \   00000024   E04A                       LDI     R20,10
   \   00000026   ........                   CALL    ?UC_DIVMOD_L01
   \   0000002A   2F04                       MOV     R16,R20
   \   0000002C   5D00                       SUBI    R16,208
   \   0000002E   C001                       RJMP    ??UART_WriteValueUnsignedChar_3
    346          	else
    347          		UART_WriteByte(' ');
   \                     ??UART_WriteValueUnsignedChar_2:
   \   00000030   E200                       LDI     R16,32
   \                     ??UART_WriteValueUnsignedChar_3:
   \   00000032   ....                       RCALL   UART_WriteByte
    348          	
    349          	UART_WriteByte((value % 10) + '0');
   \   00000034   2F08                       MOV     R16,R24
   \   00000036   E04A                       LDI     R20,10
   \   00000038   ........                   CALL    ?UC_DIVMOD_L01
   \   0000003C   2F04                       MOV     R16,R20
   \   0000003E   5D00                       SUBI    R16,208
   \   00000040   ....                       RCALL   UART_WriteByte
    350          }
   \   00000042   9189                       LD      R24,Y+
   \   00000044   9508                       RET
    351          
    352          

   \                                 In segment CODE, align 2, keep-with-next
    353          void UART_WritePointer(void* pointer)
    354          {
   \   __nearfunc void UART_WritePointer(void *);
   \                     UART_WritePointer:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   01C8                       MOVW    R25 : R24,R17 : R16
    355          	WriteHexDigit((unsigned short)pointer >> 12);
   \   00000006   2F01                       MOV     R16,R17
   \   00000008   9506                       LSR     R16
   \   0000000A   9506                       LSR     R16
   \   0000000C   9506                       LSR     R16
   \   0000000E   9506                       LSR     R16
   \   00000010   ....                       RCALL   WriteHexDigit
    356          	WriteHexDigit((unsigned short)pointer >> 8);
   \   00000012   2F09                       MOV     R16,R25
   \   00000014   ....                       RCALL   WriteHexDigit
    357          	WriteHexDigit((unsigned short)pointer >> 4);
   \   00000016   018C                       MOVW    R17 : R16,R25 : R24
   \   00000018   9516                       LSR     R17
   \   0000001A   9507                       ROR     R16
   \   0000001C   9516                       LSR     R17
   \   0000001E   9507                       ROR     R16
   \   00000020   9516                       LSR     R17
   \   00000022   9507                       ROR     R16
   \   00000024   9516                       LSR     R17
   \   00000026   9507                       ROR     R16
   \   00000028   ....                       RCALL   WriteHexDigit
    358          	WriteHexDigit((unsigned short)pointer);
   \   0000002A   2F08                       MOV     R16,R24
   \   0000002C   ....                       RCALL   WriteHexDigit
    359          }
   \   0000002E   9189                       LD      R24,Y+
   \   00000030   9199                       LD      R25,Y+
   \   00000032   9508                       RET
    360          
    361          

   \                                 In segment CODE, align 2, keep-with-next
    362          static void WriteHexDigit(unsigned char value)
    363          {
    364          	value &= 0x0f;
   \   static __nearfunc void WriteHexDigit(unsigned char);
   \                     WriteHexDigit:
   \   00000000   700F                       ANDI    R16,0x0F
    365          	
    366          	if(value > 9)
   \   00000002   300A                       CPI     R16,10
   \   00000004   F010                       BRCS    ??WriteHexDigit_0
    367          		UART_WriteByte(value + 'A' - 10);
   \   00000006   5C09                       SUBI    R16,201
   \   00000008   ....                       RJMP    UART_WriteByte
    368          	else
    369          		UART_WriteByte(value + '0');
   \                     ??WriteHexDigit_0:
   \   0000000A   5D00                       SUBI    R16,208
   \   0000000C   ....                       RJMP    UART_WriteByte
    370          }
    371          
    372          /**************************************************************
    373          
    374          **************************************************************/
    375          /*
    376          void UART__WriteShort(unsigned short Data)
    377          {
    378          	if(Data>9999)
    379          		UART_WriteByte((Data/10000)%10+'0');
    380          	if(Data>999)
    381          		UART_WriteByte((Data/1000)%10+'0');
    382          	if(Data>99)
    383          		UART_WriteByte((Data/100)%10+'0');
    384          	if(Data>9)
    385          		UART_WriteByte((Data/10)%10+'0');
    386          	UART_WriteByte(Data%10+'0');
    387          }
    388          */
    389          
    390          /**************************************************************
    391          
    392          **************************************************************/
    393          /*
    394          void Flush(void)
    395          {
    396          	while(UART_BytesReady())
    397          		UART_ReadByte();
    398          }
    399          */

   Maximum stack usage in bytes:

     Function                     CSTACK  RSTACK
     --------                     ------  ------
     UART_BytesReady                  0       0 
     UART_Init                        0       0 
     UART_ReadByte                    0       0 
     UART_ReadBytes                   3       2 
       -> UART_ReadByte               3       2 
     UART_SetBaudrate                 0       0 
     UART_WriteByte                   0       0 
     UART_WriteBytes                  3       2 
       -> UART_WriteByte              3       2 
     UART_WritePointer                2       2 
       -> WriteHexDigit               2       2 
       -> WriteHexDigit               2       2 
       -> WriteHexDigit               2       2 
       -> WriteHexDigit               2       2 
     UART_WriteString                 3       2 
       -> UART_WriteByte              3       2 
       -> UART_WriteByte              3       2 
     UART_WriteString_P               3       2 
       -> UART_WriteByte              3       2 
       -> UART_WriteByte              3       2 
     UART_WriteValueUnsignedChar      1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
     WriteHexDigit                    0       2 
       -> UART_WriteByte              0       2 
       -> UART_WriteByte              0       2 
     getc                             0       2 
       -> UART_ReadByte               0       2 
     putc                             0       2 
       -> UART_WriteByte              0       2 
     putchar                          0       2 
       -> UART_WriteByte              0       2 

 
      5 bytes in segment ABSOLUTE
    334 bytes in segment CODE
 
    334 bytes of CODE memory
      0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
