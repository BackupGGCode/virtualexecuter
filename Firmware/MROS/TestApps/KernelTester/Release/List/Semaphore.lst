##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version21/Dec/2007  23:42:53 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\Semaphore.c         #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    KernelTester\Release\Obj\ -I                            #
#                    C:\PROGRA~1\IARSYS~1\EW23EV~1\avr\SRC\CLIB\INC\ -I      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\ -I  #
#                    f:\Projects\[Drivers]\C\MROS\ -lC                       #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\Ker #
#                    nelTester\Release\List\ -e --initializers_in_flash -s9  #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\K #
#                    ernel\Semaphore.c                                       #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\Semaphore.lst                                  #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\Obj\Semaphore.r90                                   #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <Globals.h>
      2          #include "Kernel.h"
      3          #include "KernelInternals.h"
      4          
      5          

   \                                 In segment CODE, align 2, keep-with-next
      6          bool Kernel_SemaphoreWait(semaphore* s)
      7          {
      8          bool succes;
      9          
     10          	Critical();
   \   __nearfunc unsigned char Kernel_SemaphoreWait(semaphore *);
   \                     Kernel_SemaphoreWait:
   \   00000000   94F8                       CLI
     11          	
     12          	if(*s == 0)
   \   00000002   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000004   8120                       LD      R18,Z
   \   00000006   2322                       TST     R18
   \   00000008   F499                       BRNE    ??Kernel_SemaphoreWait_0
     13          	{
     14          		taskQueue[currentTaskIndex].blockingSemaphore=s;
   \   0000000A   9140....                   LDS     R20,currentTaskIndex
   \   0000000E   E050                       LDI     R21,0
   \   00000010   E02D                       LDI     R18,13
   \   00000012   E030                       LDI     R19,0
   \   00000014   9F34                       MUL     R19,R20
   \   00000016   2D30                       MOV     R19,R0
   \   00000018   9F25                       MUL     R18,R21
   \   0000001A   0D30                       ADD     R19,R0
   \   0000001C   9F24                       MUL     R18,R20
   \   0000001E   2D20                       MOV     R18,R0
   \   00000020   0D31                       ADD     R19,R1
   \   00000022   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000024   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   00000026   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   00000028   8703                       STD     Z+11,R16
   \   0000002A   8714                       STD     Z+12,R17
     15          		succes = false;
   \   0000002C   E020                       LDI     R18,0
   \   0000002E   C005                       RJMP    ??Kernel_SemaphoreWait_1
     16          	}
     17          	else
     18          	{
     19          		*s = *s-1;
   \                     ??Kernel_SemaphoreWait_0:
   \   00000030   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000032   8100                       LD      R16,Z
   \   00000034   950A                       DEC     R16
   \   00000036   8300                       ST      Z,R16
     20          		succes = true;
   \   00000038   E021                       LDI     R18,1
     21          	}
     22          
     23          	NonCritical();
   \                     ??Kernel_SemaphoreWait_1:
   \   0000003A   9478                       SEI
     24          
     25          #if TASKER_DEBUG_LEVEL > 0
     26          	if(succes)
     27          	{
     28          		Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHOREWAIT, null, DEBUG_STATUS_OK, 0);
     29          	}
     30          	else
     31          	{
     32          		Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHOREWAIT, null, DEBUG_STATUS_SEMAPHORE_BLOCK, 0);
     33          	}
     34          #endif
     35          
     36          	return succes;
   \   0000003C   2F02                       MOV     R16,R18
   \   0000003E   9508                       RET
     37          }
     38          
     39          

   \                                 In segment CODE, align 2, keep-with-next
     40          void Kernel_SemaphoreSignal(semaphore* s)
     41          {
     42          unsigned char index;
     43          
     44          	Critical();
   \   __nearfunc void Kernel_SemaphoreSignal(semaphore *);
   \                     Kernel_SemaphoreSignal:
   \   00000000   94F8                       CLI
     45          	
     46          	for(index = 0; index < MAX_NUMBER_OF_TASKS; index++)
   \   00000002   ....                       LDI     R30,LOW((taskQueue + 11))
   \   00000004   ....                       LDI     R31,(taskQueue + 11) >> 8
   \   00000006   E028                       LDI     R18,8
     47          	{
     48          		if(taskQueue[index].blockingSemaphore == s)
   \                     ??Kernel_SemaphoreSignal_0:
   \   00000008   8140                       LD      R20,Z
   \   0000000A   8151                       LDD     R21,Z+1
   \   0000000C   1740                       CP      R20,R16
   \   0000000E   0751                       CPC     R21,R17
   \   00000010   F419                       BRNE    ??Kernel_SemaphoreSignal_1
     49          		{
     50          			taskQueue[index].blockingSemaphore = null;
   \   00000012   E040                       LDI     R20,0
   \   00000014   8340                       ST      Z,R20
   \   00000016   8341                       STD     Z+1,R20
   \                     ??Kernel_SemaphoreSignal_1:
   \   00000018   963D                       ADIW    R31 : R30,13
   \   0000001A   952A                       DEC     R18
   \   0000001C   F7A9                       BRNE    ??Kernel_SemaphoreSignal_0
     51          		}
     52          	}
     53          	
     54          	*s = *s+1;
   \   0000001E   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000020   8100                       LD      R16,Z
   \   00000022   9503                       INC     R16
   \   00000024   8300                       ST      Z,R16
     55          	
     56          	NonCritical();
   \   00000026   9478                       SEI
     57          
     58          #if TASKER_DEBUG_LEVEL > 0
     59          	Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHORESIGNAL, null, DEBUG_STATUS_OK, 0);
     60          #endif
     61          }
   \   00000028   9508                       RET

   Maximum stack usage in bytes:

     Function                CSTACK  RSTACK
     --------                ------  ------
     Kernel_SemaphoreSignal      0       0 
     Kernel_SemaphoreWait        0       0 

 
    106 bytes in segment CODE
 
    106 bytes of CODE memory

Errors: none
Warnings: none
