        NAME Semaphore

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN currentTaskIndex
        EXTERN taskQueue

        PUBLIC Kernel_SemaphoreSignal
        FUNCTION Kernel_SemaphoreSignal,0203H
        PUBLIC Kernel_SemaphoreWait
        FUNCTION Kernel_SemaphoreWait,0203H
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
;     1 #include <Globals.h>
;     2 #include "Kernel.h"
;     3 #include "KernelInternals.h"
;     4 
;     5 

        RSEG CODE:CODE:NOROOT(1)
;     6 bool Kernel_SemaphoreWait(semaphore* s)
;     7 {
;     8 bool succes;
;     9 
;    10 	Critical();
; __nearfunc unsigned char Kernel_SemaphoreWait(semaphore *);
Kernel_SemaphoreWait:
	CLI
;    11 	
;    12 	if(*s == 0)
	MOVW	R31 : R30,R17 : R16
	LD	R18,Z
	TST	R18
	BRNE	??Kernel_SemaphoreWait_0
;    13 	{
;    14 		taskQueue[currentTaskIndex].blockingSemaphore=s;
	LDS	R20,currentTaskIndex
	LDI	R21,0
	LDI	R18,13
	LDI	R19,0
	MUL	R19,R20
	MOV	R19,R0
	MUL	R18,R21
	ADD	R19,R0
	MUL	R18,R20
	MOV	R18,R0
	ADD	R19,R1
	MOVW	R31 : R30,R19 : R18
	SUBI	R30,LOW((-(taskQueue) & 0xFFFF))
	SBCI	R31,(-(taskQueue) & 0xFFFF) >> 8
	STD	Z+11,R16
	STD	Z+12,R17
;    15 		succes = false;
	LDI	R18,0
	RJMP	??Kernel_SemaphoreWait_1
;    16 	}
;    17 	else
;    18 	{
;    19 		*s = *s-1;
??Kernel_SemaphoreWait_0:
	MOVW	R31 : R30,R17 : R16
	LD	R16,Z
	DEC	R16
	ST	Z,R16
;    20 		succes = true;
	LDI	R18,1
;    21 	}
;    22 
;    23 	NonCritical();
??Kernel_SemaphoreWait_1:
	SEI
;    24 
;    25 #if TASKER_DEBUG_LEVEL > 0
;    26 	if(succes)
;    27 	{
;    28 		Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHOREWAIT, null, DEBUG_STATUS_OK, 0);
;    29 	}
;    30 	else
;    31 	{
;    32 		Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHOREWAIT, null, DEBUG_STATUS_SEMAPHORE_BLOCK, 0);
;    33 	}
;    34 #endif
;    35 
;    36 	return succes;
	MOV	R16,R18
	RET
;    37 }
;    38 
;    39 

        RSEG CODE:CODE:NOROOT(1)
;    40 void Kernel_SemaphoreSignal(semaphore* s)
;    41 {
;    42 unsigned char index;
;    43 
;    44 	Critical();
; __nearfunc void Kernel_SemaphoreSignal(semaphore *);
Kernel_SemaphoreSignal:
	CLI
;    45 	
;    46 	for(index = 0; index < MAX_NUMBER_OF_TASKS; index++)
	LDI	R30,LOW((taskQueue + 11))
	LDI	R31,(taskQueue + 11) >> 8
	LDI	R18,8
;    47 	{
;    48 		if(taskQueue[index].blockingSemaphore == s)
??Kernel_SemaphoreSignal_0:
	LD	R20,Z
	LDD	R21,Z+1
	CP	R20,R16
	CPC	R21,R17
	BRNE	??Kernel_SemaphoreSignal_1
;    49 		{
;    50 			taskQueue[index].blockingSemaphore = null;
	LDI	R20,0
	ST	Z,R20
	STD	Z+1,R20
??Kernel_SemaphoreSignal_1:
	ADIW	R31 : R30,13
	DEC	R18
	BRNE	??Kernel_SemaphoreSignal_0
;    51 		}
;    52 	}
;    53 	
;    54 	*s = *s+1;
	MOVW	R31 : R30,R17 : R16
	LD	R16,Z
	INC	R16
	ST	Z,R16
;    55 	
;    56 	NonCritical();
	SEI
;    57 
;    58 #if TASKER_DEBUG_LEVEL > 0
;    59 	Kernel_DebuggerEvent(DEBUG_EVENT_SEMAPHORESIGNAL, null, DEBUG_STATUS_OK, 0);
;    60 #endif
;    61 }
	RET

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
; 
;    106 bytes in segment CODE
; 
;    106 bytes of CODE memory
;
;Errors: none
;Warnings: none
