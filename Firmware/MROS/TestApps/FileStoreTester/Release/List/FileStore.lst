##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version26/Feb/2008  21:09:00 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c      #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    FileStoreTester\Release\Obj\ -I "C:\Program Files\IAR   #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\ -lCN                      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\List\ -e --initializers_in_flash -s9             #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\F #
#                    ileStore\FileStore.c                                    #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\List\FileStore.lst                               #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\Obj\FileStore.r90                                #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <FileStore/FileStore.h>
      2          
      3          #define FLAG_TYPE																0x03
      4          #define FLAG_FILE																(1<<0)
      5          #define FLAG_DIRECTORYTERMINATOR								(1<<1)
      6          
      7          #define ENTRY_SIZE															10
      8          #define OFFSET_FLAGS														0
      9          #define OFFSET_START														1
     10          #define OFFSET_SIZE															5
     11          #define OFFSET_NAMELENGTH												9
     12          #define OFFSET_NAME															10
     13          
     14          /*
     15          
     16          Each file entry on media complies to the following format:
     17          
     18          	unsigned char flags;
     19          	unsigned long start;
     20          	unsigned long size;
     21          	unsigned char fileNameLength;
     22          	unsigned char fileName[fileNameLength];
     23          
     24          The flags:
     25          
     26          	0 - File
     27          	1 - Directory terminator
     28          	2 - Directory (not implemented)
     29          	3 - Reserved
     30          	4 - Reserved
     31          	5 - Reserved
     32          	6 - Reserved
     33          	7 - Reserved
     34          	
     35          */
     36          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     37          unsigned char (*readByte)(unsigned long address);
   \   unsigned char (*__near readByte)(unsigned long);
   \                     readByte:
   \   00000000                              DS 2
     38          void (*readBytes)(unsigned long address, unsigned char* data, unsigned short length);
   \   void (*__near readBytes)(unsigned long, unsigned char *, unsigned short);
   \                     readBytes:
   \   00000002                              DS 2
     39          unsigned long (*readLong)(unsigned long address);
   \   unsigned long (*__near readLong)(unsigned long);
   \                     readLong:
   \   00000004                              DS 2
     40          
     41          
     42          unsigned long FindNextFileEntry(unsigned long current);
     43          bool MatchFileName(unsigned char* name, unsigned long address);
     44          

   \                                 In segment CODE, align 2, keep-with-next
     45          void FileStore_Init(unsigned char (*functionReadByte)(unsigned long address),
     46          										void (*functionReadBytes)(unsigned long address, unsigned char* data, unsigned short length),
     47          										unsigned long (*functionReadLong)(unsigned long address))
     48          {
     49          	readByte = functionReadByte;
   \   __nearfunc void FileStore_Init(unsigned char (*)(unsigned long), void (*)(unsigned long, unsigned char *, unsigned short), unsigned long (*)(unsigned long));
   \                     FileStore_Init:
   \   00000000   ....                       LDI     R30,LOW(readByte)
   \   00000002   ....                       LDI     R31,(readByte) >> 8
   \   00000004   8300                       ST      Z,R16
   \   00000006   8311                       STD     Z+1,R17
     50          	readBytes = functionReadBytes;
   \   00000008   8322                       STD     Z+2,R18
   \   0000000A   8333                       STD     Z+3,R19
     51          	readLong = functionReadLong;
   \   0000000C   8344                       STD     Z+4,R20
   \   0000000E   8355                       STD     Z+5,R21
     52          }
   \   00000010   9508                       RET
     53          
     54          

   \                                 In segment CODE, align 2, keep-with-next
     55          bool FileStore_OpenFile(unsigned char* name, fsfile* file)
     56          {
   \   __nearfunc unsigned char FileStore_OpenFile(unsigned char *, fsfile *);
   \                     FileStore_OpenFile:
   \   00000000   927A                       ST      -Y,R7
   \   00000002   926A                       ST      -Y,R6
   \   00000004   925A                       ST      -Y,R5
   \   00000006   924A                       ST      -Y,R4
   \   00000008   93BA                       ST      -Y,R27
   \   0000000A   93AA                       ST      -Y,R26
   \   0000000C   939A                       ST      -Y,R25
   \   0000000E   938A                       ST      -Y,R24
   \   00000010                              REQUIRE ?Register_R4_is_cg_reg
   \   00000010                              REQUIRE ?Register_R5_is_cg_reg
   \   00000010                              REQUIRE ?Register_R6_is_cg_reg
   \   00000010                              REQUIRE ?Register_R7_is_cg_reg
   \   00000010   0138                       MOVW    R7 : R6,R17 : R16
   \   00000012   0129                       MOVW    R5 : R4,R19 : R18
     57          unsigned long index=0, newIndex;
   \   00000014   E080                       LDI     R24,0
   \   00000016   E090                       LDI     R25,0
   \   00000018   E0A0                       LDI     R26,0
   \   0000001A   E0B0                       LDI     R27,0
   \   0000001C   C002                       RJMP    ??FileStore_OpenFile_0
     58          
     59          	while(MatchFileName(name, index)==false)
     60          	{
     61          		newIndex=FindNextFileEntry(index);
     62          		if(index==newIndex)
     63          			return false;
     64          		index=newIndex;
   \                     ??FileStore_OpenFile_1:
   \   0000001E   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000020   01D9                       MOVW    R27 : R26,R19 : R18
   \                     ??FileStore_OpenFile_0:
   \   00000022   01AC                       MOVW    R21 : R20,R25 : R24
   \   00000024   01BD                       MOVW    R23 : R22,R27 : R26
   \   00000026   0183                       MOVW    R17 : R16,R7 : R6
   \   00000028   ....                       RCALL   MatchFileName
   \   0000002A   2300                       TST     R16
   \   0000002C   F451                       BRNE    ??FileStore_OpenFile_2
   \   0000002E   018C                       MOVW    R17 : R16,R25 : R24
   \   00000030   019D                       MOVW    R19 : R18,R27 : R26
   \   00000032   ....                       RCALL   FindNextFileEntry
   \   00000034   1780                       CP      R24,R16
   \   00000036   0791                       CPC     R25,R17
   \   00000038   07A2                       CPC     R26,R18
   \   0000003A   07B3                       CPC     R27,R19
   \   0000003C   F781                       BRNE    ??FileStore_OpenFile_1
   \   0000003E   E000                       LDI     R16,0
   \   00000040   C02D                       RJMP    ??FileStore_OpenFile_3
     65          	}
     66          	
     67          	file->index=index;
   \                     ??FileStore_OpenFile_2:
   \   00000042   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000044   8380                       ST      Z,R24
   \   00000046   8391                       STD     Z+1,R25
   \   00000048   83A2                       STD     Z+2,R26
   \   0000004A   83B3                       STD     Z+3,R27
     68          	file->start=readLong(index+OFFSET_START);
   \   0000004C   018C                       MOVW    R17 : R16,R25 : R24
   \   0000004E   019D                       MOVW    R19 : R18,R27 : R26
   \   00000050   5F0F                       SUBI    R16,255
   \   00000052   4F1F                       SBCI    R17,255
   \   00000054   4F2F                       SBCI    R18,255
   \   00000056   4F3F                       SBCI    R19,255
   \   00000058   ....                       LDI     R30,LOW(readByte)
   \   0000005A   ....                       LDI     R31,(readByte) >> 8
   \   0000005C   8144                       LDD     R20,Z+4
   \   0000005E   8155                       LDD     R21,Z+5
   \   00000060   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000062   9509                       ICALL
   \   00000064   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000066   8304                       STD     Z+4,R16
   \   00000068   8315                       STD     Z+5,R17
   \   0000006A   8326                       STD     Z+6,R18
   \   0000006C   8337                       STD     Z+7,R19
     69          	file->size=readLong(index+OFFSET_SIZE);
   \   0000006E   5F8B                       SUBI    R24,251
   \   00000070   4F9F                       SBCI    R25,255
   \   00000072   4FAF                       SBCI    R26,255
   \   00000074   4FBF                       SBCI    R27,255
   \   00000076   018C                       MOVW    R17 : R16,R25 : R24
   \   00000078   019D                       MOVW    R19 : R18,R27 : R26
   \   0000007A   ....                       LDI     R30,LOW(readByte)
   \   0000007C   ....                       LDI     R31,(readByte) >> 8
   \   0000007E   8144                       LDD     R20,Z+4
   \   00000080   8155                       LDD     R21,Z+5
   \   00000082   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000084   9509                       ICALL
   \   00000086   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000088   8700                       STD     Z+8,R16
   \   0000008A   8711                       STD     Z+9,R17
   \   0000008C   8722                       STD     Z+10,R18
   \   0000008E   8733                       STD     Z+11,R19
     70          	file->current=0;
   \   00000090   E000                       LDI     R16,0
   \   00000092   8704                       STD     Z+12,R16
   \   00000094   8705                       STD     Z+13,R16
   \   00000096   8706                       STD     Z+14,R16
   \   00000098   8707                       STD     Z+15,R16
     71          	
     72          	return true;
   \   0000009A   E001                       LDI     R16,1
   \                     ??FileStore_OpenFile_3:
   \   0000009C   9189                       LD      R24,Y+
   \   0000009E   9199                       LD      R25,Y+
   \   000000A0   91A9                       LD      R26,Y+
   \   000000A2   91B9                       LD      R27,Y+
   \   000000A4   9049                       LD      R4,Y+
   \   000000A6   9059                       LD      R5,Y+
   \   000000A8   9069                       LD      R6,Y+
   \   000000AA   9079                       LD      R7,Y+
   \   000000AC   9508                       RET
     73          }
     74          /*
     75          bool FileStore_GetFileName(fsfile* file, unsigned char* name, unsigned char* length)
     76          {
     77          unsigned char len;
     78          unsigned long index;
     79          
     80          	if(ReadByte(file->index+OFFSET_FLAGS)!=0x01)
     81          		return false;
     82          	
     83          	len=ReadLong(file->index+OFFSET_NAMELENGTH);
     84          	*length=len;
     85          	
     86          	index=ReadLong(file->index)+OFFSET_NAME;
     87          	
     88          	while(len--)
     89          		*name++=ReadByte(index++);
     90          	
     91          	return true;
     92          }
     93          */

   \                                 In segment CODE, align 2, keep-with-next
     94          unsigned long FileStore_ReadBytes(fsfile* file, unsigned char* data, unsigned short length)
     95          {
   \   __nearfunc unsigned long FileStore_ReadBytes(fsfile *, unsigned char *, unsigned short);
   \                     FileStore_ReadBytes:
   \   00000000   92BA                       ST      -Y,R11
   \   00000002   92AA                       ST      -Y,R10
   \   00000004   929A                       ST      -Y,R9
   \   00000006   928A                       ST      -Y,R8
   \   00000008   927A                       ST      -Y,R7
   \   0000000A   926A                       ST      -Y,R6
   \   0000000C   93BA                       ST      -Y,R27
   \   0000000E   93AA                       ST      -Y,R26
   \   00000010   939A                       ST      -Y,R25
   \   00000012   938A                       ST      -Y,R24
   \   00000014                              REQUIRE ?Register_R6_is_cg_reg
   \   00000014                              REQUIRE ?Register_R7_is_cg_reg
   \   00000014                              REQUIRE ?Register_R8_is_cg_reg
   \   00000014                              REQUIRE ?Register_R9_is_cg_reg
   \   00000014                              REQUIRE ?Register_R10_is_cg_reg
   \   00000014                              REQUIRE ?Register_R11_is_cg_reg
   \   00000014   0139                       MOVW    R7 : R6,R19 : R18
   \   00000016   01CA                       MOVW    R25 : R24,R21 : R20
     96          	if(length > (file->size - file->current))
   \   00000018   01D8                       MOVW    R27 : R26,R17 : R16
   \   0000001A   9614                       ADIW    R27 : R26,4
   \   0000001C   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000001E   8144                       LDD     R20,Z+4
   \   00000020   8155                       LDD     R21,Z+5
   \   00000022   8166                       LDD     R22,Z+6
   \   00000024   8177                       LDD     R23,Z+7
   \   00000026   8500                       LDD     R16,Z+8
   \   00000028   8511                       LDD     R17,Z+9
   \   0000002A   8522                       LDD     R18,Z+10
   \   0000002C   8533                       LDD     R19,Z+11
   \   0000002E   014A                       MOVW    R9 : R8,R21 : R20
   \   00000030   015B                       MOVW    R11 : R10,R23 : R22
   \   00000032   1A80                       SUB     R8,R16
   \   00000034   0A91                       SBC     R9,R17
   \   00000036   0AA2                       SBC     R10,R18
   \   00000038   0AB3                       SBC     R11,R19
   \   0000003A   2422                       CLR     R2
   \   0000003C   1688                       CP      R8,R24
   \   0000003E   0699                       CPC     R9,R25
   \   00000040   04A2                       CPC     R10,R2
   \   00000042   04B2                       CPC     R11,R2
   \   00000044   F418                       BRCC    ??FileStore_ReadBytes_0
     97          		length = file->size - file->current;
   \   00000046   01CA                       MOVW    R25 : R24,R21 : R20
   \   00000048   1B80                       SUB     R24,R16
   \   0000004A   0B91                       SBC     R25,R17
     98          	
     99          	readBytes(file->start + file->current, data, length);
   \                     ??FileStore_ReadBytes_0:
   \   0000004C   914D                       LD      R20,X+
   \   0000004E   915D                       LD      R21,X+
   \   00000050   916D                       LD      R22,X+
   \   00000052   917C                       LD      R23,X
   \   00000054   9713                       SBIW    R27 : R26,3
   \   00000056   0F40                       ADD     R20,R16
   \   00000058   1F51                       ADC     R21,R17
   \   0000005A   1F62                       ADC     R22,R18
   \   0000005C   1F73                       ADC     R23,R19
   \   0000005E   018A                       MOVW    R17 : R16,R21 : R20
   \   00000060   019B                       MOVW    R19 : R18,R23 : R22
   \   00000062   01BC                       MOVW    R23 : R22,R25 : R24
   \   00000064   01A3                       MOVW    R21 : R20,R7 : R6
   \   00000066   ....                       LDI     R30,LOW(readBytes)
   \   00000068   ....                       LDI     R31,(readBytes) >> 8
   \   0000006A   8000                       LD      R0,Z
   \   0000006C   8011                       LDD     R1,Z+1
   \   0000006E   01F0                       MOVW    R31 : R30,R1 : R0
   \   00000070   9509                       ICALL
    100          	file->current += length;
   \   00000072   018C                       MOVW    R17 : R16,R25 : R24
   \   00000074   E020                       LDI     R18,0
   \   00000076   E030                       LDI     R19,0
   \   00000078   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000007A   8540                       LDD     R20,Z+8
   \   0000007C   8551                       LDD     R21,Z+9
   \   0000007E   8562                       LDD     R22,Z+10
   \   00000080   8573                       LDD     R23,Z+11
   \   00000082   0F48                       ADD     R20,R24
   \   00000084   1F59                       ADC     R21,R25
   \   00000086   1F62                       ADC     R22,R18
   \   00000088   1F72                       ADC     R23,R18
   \   0000008A   8740                       STD     Z+8,R20
   \   0000008C   8751                       STD     Z+9,R21
   \   0000008E   8762                       STD     Z+10,R22
   \   00000090   8773                       STD     Z+11,R23
    101          	
    102          	return length;
   \   00000092   9189                       LD      R24,Y+
   \   00000094   9199                       LD      R25,Y+
   \   00000096   91A9                       LD      R26,Y+
   \   00000098   91B9                       LD      R27,Y+
   \   0000009A   9069                       LD      R6,Y+
   \   0000009C   9079                       LD      R7,Y+
   \   0000009E   9089                       LD      R8,Y+
   \   000000A0   9099                       LD      R9,Y+
   \   000000A2   90A9                       LD      R10,Y+
   \   000000A4   90B9                       LD      R11,Y+
   \   000000A6   9508                       RET
    103          }
    104          

   \                                 In segment CODE, align 2, keep-with-next
    105          unsigned long FileStore_ReadLine(fsfile* file, unsigned char* data, unsigned short maxLength)
    106          {
   \   __nearfunc unsigned long FileStore_ReadLine(fsfile *, unsigned char *, unsigned short);
   \                     FileStore_ReadLine:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   9721                       SBIW    R29 : R28,1
   \   00000006   01C8                       MOVW    R25 : R24,R17 : R16
    107          unsigned char t;
    108          unsigned long count=0;
   \   00000008   018A                       MOVW    R17 : R16,R21 : R20
   \   0000000A   E020                       LDI     R18,0
   \   0000000C   E030                       LDI     R19,0
    109          
    110          	while(count < maxLength)
   \   0000000E   2F64                       MOV     R22,R20
   \   00000010   2B65                       OR      R22,R21
   \   00000012   F031                       BREQ    ??FileStore_ReadLine_0
    111          	{
    112          		if(FileStore_ReadBytes(file, &t, 1)==1)
   \                     ??FileStore_ReadLine_1:
   \   00000014   E041                       LDI     R20,1
   \   00000016   E050                       LDI     R21,0
   \   00000018   019E                       MOVW    R19 : R18,R29 : R28
   \   0000001A   018C                       MOVW    R17 : R16,R25 : R24
   \   0000001C   ....                       RCALL   FileStore_ReadBytes
   \   0000001E   CFFA                       RJMP    ??FileStore_ReadLine_1
    113          		{
    114          			*data++ == t;
    115          		}
    116          		
    117          	}
    118          	
    119          	return maxLength;
   \                     ??FileStore_ReadLine_0:
   \   00000020   9621                       ADIW    R29 : R28,1
   \   00000022   9189                       LD      R24,Y+
   \   00000024   9199                       LD      R25,Y+
   \   00000026   9508                       RET
    120          }
    121          
    122          /*
    123          bool FileStore_GetFileEntry(fsfile* file, bool getFirst)
    124          {
    125          unsigned long index;
    126          
    127          	if(getFirst)
    128          		index=0;
    129          	else
    130          		index=file->index;
    131          	
    132          	if(ReadByte(index)!=0x01)
    133          		return false;
    134          
    135          	
    136          	
    137          	return true;
    138          }
    139          */
    140          
    141          
    142          ////////////////////////////////////////////////////////////////////////////////////////
    143          
    144          
    145          /*
    146          	Given a pointer to a valid file entry the next file entry is returned.
    147          	If the current entry is not valid the same entry is returned.
    148          	No check is made to ensure that the entry found is valid!
    149          */

   \                                 In segment CODE, align 2, keep-with-next
    150          unsigned long FindNextFileEntry(unsigned long current)
    151          {
   \   __nearfunc unsigned long FindNextFileEntry(unsigned long);
   \                     FindNextFileEntry:
   \   00000000   927A                       ST      -Y,R7
   \   00000002   926A                       ST      -Y,R6
   \   00000004   925A                       ST      -Y,R5
   \   00000006   924A                       ST      -Y,R4
   \   00000008   93BA                       ST      -Y,R27
   \   0000000A   93AA                       ST      -Y,R26
   \   0000000C   939A                       ST      -Y,R25
   \   0000000E   938A                       ST      -Y,R24
   \   00000010                              REQUIRE ?Register_R4_is_cg_reg
   \   00000010                              REQUIRE ?Register_R5_is_cg_reg
   \   00000010                              REQUIRE ?Register_R6_is_cg_reg
   \   00000010                              REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000012   01D9                       MOVW    R27 : R26,R19 : R18
    152          unsigned long next = current;
   \   00000014   0128                       MOVW    R5 : R4,R17 : R16
   \   00000016   0139                       MOVW    R7 : R6,R19 : R18
    153          
    154          	if((readByte(current) & FLAG_TYPE) == FLAG_FILE)
   \   00000018   ....                       LDI     R30,LOW(readByte)
   \   0000001A   ....                       LDI     R31,(readByte) >> 8
   \   0000001C   8140                       LD      R20,Z
   \   0000001E   8151                       LDD     R21,Z+1
   \   00000020   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000022   9509                       ICALL
   \   00000024   7003                       ANDI    R16,0x03
   \   00000026   3001                       CPI     R16,1
   \   00000028   F4B1                       BRNE    ??FindNextFileEntry_0
    155          	{
    156          		next += ENTRY_SIZE + readByte(current + OFFSET_NAMELENGTH);
   \   0000002A   5F87                       SUBI    R24,247
   \   0000002C   4F9F                       SBCI    R25,255
   \   0000002E   4FAF                       SBCI    R26,255
   \   00000030   4FBF                       SBCI    R27,255
   \   00000032   018C                       MOVW    R17 : R16,R25 : R24
   \   00000034   019D                       MOVW    R19 : R18,R27 : R26
   \   00000036   ....                       LDI     R30,LOW(readByte)
   \   00000038   ....                       LDI     R31,(readByte) >> 8
   \   0000003A   8140                       LD      R20,Z
   \   0000003C   8151                       LDD     R21,Z+1
   \   0000003E   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000040   9509                       ICALL
   \   00000042   E010                       LDI     R17,0
   \   00000044   5F06                       SUBI    R16,246
   \   00000046   4F1F                       SBCI    R17,255
   \   00000048   2F21                       MOV     R18,R17
   \   0000004A   0F22                       LSL     R18
   \   0000004C   0B22                       SBC     R18,R18
   \   0000004E   0E40                       ADD     R4,R16
   \   00000050   1E51                       ADC     R5,R17
   \   00000052   1E62                       ADC     R6,R18
   \   00000054   1E72                       ADC     R7,R18
    157          	}
    158          	
    159          	return next;
   \                     ??FindNextFileEntry_0:
   \   00000056   0182                       MOVW    R17 : R16,R5 : R4
   \   00000058   0193                       MOVW    R19 : R18,R7 : R6
   \   0000005A   9189                       LD      R24,Y+
   \   0000005C   9199                       LD      R25,Y+
   \   0000005E   91A9                       LD      R26,Y+
   \   00000060   91B9                       LD      R27,Y+
   \   00000062   9049                       LD      R4,Y+
   \   00000064   9059                       LD      R5,Y+
   \   00000066   9069                       LD      R6,Y+
   \   00000068   9079                       LD      R7,Y+
   \   0000006A   9508                       RET
    160          }
    161          
    162          
    163          /*
    164          	Tests whether the file specified by name is located on the index given.
    165          	Returns true if the file is found otherwise false;
    166          */

   \                                 In segment CODE, align 2, keep-with-next
    167          bool MatchFileName(unsigned char* name, unsigned long index)
    168          {
   \   __nearfunc unsigned char MatchFileName(unsigned char *, unsigned long);
   \                     MatchFileName:
   \   00000000   925A                       ST      -Y,R5
   \   00000002   924A                       ST      -Y,R4
   \   00000004   93BA                       ST      -Y,R27
   \   00000006   93AA                       ST      -Y,R26
   \   00000008   939A                       ST      -Y,R25
   \   0000000A   938A                       ST      -Y,R24
   \   0000000C                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128                       MOVW    R5 : R4,R17 : R16
   \   0000000E   01CA                       MOVW    R25 : R24,R21 : R20
   \   00000010   01DB                       MOVW    R27 : R26,R23 : R22
    169          	if((readByte(index) & FLAG_TYPE) != FLAG_FILE)
   \   00000012   018A                       MOVW    R17 : R16,R21 : R20
   \   00000014   019B                       MOVW    R19 : R18,R23 : R22
   \   00000016   ....                       LDI     R30,LOW(readByte)
   \   00000018   ....                       LDI     R31,(readByte) >> 8
   \   0000001A   8140                       LD      R20,Z
   \   0000001C   8151                       LDD     R21,Z+1
   \   0000001E   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000020   9509                       ICALL
   \   00000022   7003                       ANDI    R16,0x03
   \   00000024   3001                       CPI     R16,1
   \   00000026   F011                       BREQ    ??MatchFileName_0
    170          	{
    171          		return false;
   \                     ??MatchFileName_1:
   \   00000028   E000                       LDI     R16,0
   \   0000002A   C01B                       RJMP    ??MatchFileName_2
    172          	}
    173          
    174          	index += OFFSET_NAME;
   \                     ??MatchFileName_0:
   \   0000002C   5F86                       SUBI    R24,246
   \   0000002E   4F9F                       SBCI    R25,255
   \   00000030   4FAF                       SBCI    R26,255
   \   00000032   4FBF                       SBCI    R27,255
    175          	while(*name)
   \                     ??MatchFileName_3:
   \   00000034   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000036   8100                       LD      R16,Z
   \   00000038   2300                       TST     R16
   \   0000003A   F091                       BREQ    ??MatchFileName_4
    176          	{
    177          		if(readByte(index++) != *name++)
   \   0000003C   018C                       MOVW    R17 : R16,R25 : R24
   \   0000003E   019D                       MOVW    R19 : R18,R27 : R26
   \   00000040   ....                       LDI     R30,LOW(readByte)
   \   00000042   ....                       LDI     R31,(readByte) >> 8
   \   00000044   8140                       LD      R20,Z
   \   00000046   8151                       LDD     R21,Z+1
   \   00000048   01FA                       MOVW    R31 : R30,R21 : R20
   \   0000004A   9509                       ICALL
   \   0000004C   5F8F                       SUBI    R24,255
   \   0000004E   4F9F                       SBCI    R25,255
   \   00000050   4FAF                       SBCI    R26,255
   \   00000052   4FBF                       SBCI    R27,255
   \   00000054   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000056   9111                       LD      R17,Z+
   \   00000058   012F                       MOVW    R5 : R4,R31 : R30
   \   0000005A   1701                       CP      R16,R17
   \   0000005C   F359                       BREQ    ??MatchFileName_3
    178          		{
    179          			return false;
   \   0000005E   CFE4                       RJMP    ??MatchFileName_1
    180          		}
    181          	}
    182          	
    183          	return true;
   \                     ??MatchFileName_4:
   \   00000060   E001                       LDI     R16,1
   \                     ??MatchFileName_2:
   \   00000062   9189                       LD      R24,Y+
   \   00000064   9199                       LD      R25,Y+
   \   00000066   91A9                       LD      R26,Y+
   \   00000068   91B9                       LD      R27,Y+
   \   0000006A   9049                       LD      R4,Y+
   \   0000006C   9059                       LD      R5,Y+
   \   0000006E   9508                       RET
    184          }

   Maximum stack usage in bytes:

     Function                  CSTACK  RSTACK
     --------                  ------  ------
     FileStore_Init                0       0 
     FileStore_OpenFile            8       2 
       -> MatchFileName            8       2 
       -> FindNextFileEntry        8       2 
       ->   Indirect call          8       2 
       ->   Indirect call          8       2 
     FileStore_ReadBytes          12       2 
       ->   Indirect call         12       2 
     FileStore_ReadLine            3       2 
       -> FileStore_ReadBytes      3       2 
     FindNextFileEntry             8       2 
       ->   Indirect call          8       2 
       ->   Indirect call          8       2 
     MatchFileName                 6       2 
       ->   Indirect call          6       2 
       ->   Indirect call          6       2 

 
    620 bytes in segment CODE
      6 bytes in segment INITTAB
      6 bytes in segment NEAR_Z
 
    620 bytes of CODE memory (+ 6 bytes shared)
      6 bytes of DATA memory

Errors: none
Warnings: none
