##############################################################################
#                                                                            #
#                                                      09/Mar/2008  16:57:11 #
# IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c             #
#    Command line =  --string_literals_in_flash                              #
#                    f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c --cpu=m32   #
#                    -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\CommanderT #
#                    ester\Release\Obj\ -D NDEBUG -lC                        #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\List\ --initializers_in_flash   #
#                    -s9 -DENABLE_BIT_DEFINITIONS -e -I                      #
#                    f:\Projects\[Drivers]\C\mros\TestApps\CommanderTester\  #
#                    -I f:\Projects\[Drivers]\C\mros\ -I "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\Timer.lst                                   #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\Obj\Timer.r90                                    #
#                                                                            #
#                                                                            #
##############################################################################

f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c
      1          #include "Timer.h"

   \                                 In segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS 1
      2          #include "KernelInternals.h"
      3          
      4          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          volatile static unsigned short timerTicks = 0;
   \                     timerTicks:
   \   00000000                      DS 2
   \   00000002                      DS 2
      6          
      7          static void (*timerEventHandler)(void) = null;
      8          
      9          

   \                                 In segment CODE, align 2, keep-with-next
     10          void Kernel_InitTimer(void (*handler)(void))
   \                     Kernel_InitTimer:
     11          {
     12          #if defined(__IOM8_H)
     13          	TCCR0 = TIMER_PRESCALER;
     14          	TCNT0 = (unsigned char)(0 - TIMER_RELOAD);
     15          	TIMSK |= (1 << TOIE0);
     16          #elif defined(__IOM32_H) || defined(__IOM162_H)
     17          	TCCR0 = (1<<WGM01) | TIMER_PRESCALER;
   \   00000000   E02B               LDI     R18, 11
   \   00000002   BF23               OUT     0x33, R18
     18          	OCR0 = TIMER_RELOAD;
   \   00000004   EA2C               LDI     R18, 172
   \   00000006   BF2C               OUT     0x3C, R18
     19          	TIMSK |= (1 << OCIE0);
   \   00000008   B729               IN      R18, 0x39
   \   0000000A   6022               ORI     R18, 0x02
   \   0000000C   BF29               OUT     0x39, R18
     20          #elif defined(__IOM128_H) || defined(__IOM64_H)
     21          	TCCR0 = (1 << WGM01) | TIMER_PRESCALER;
     22          	OCR0 = TIMER_RELOAD;
     23          	TIMSK |= (1 << OCIE0);
     24          #elif defined(__IOM168_H)
     25          	TCCR0A = (1<<WGM01);
     26          	TCCR0B = TIMER_PRESCALER;
     27          	OCR0A = TIMER_RELOAD;
     28          	TIMSK0 |= (1 << OCIE0A);
     29          #else
     30          #error MROS_Kernel_Timer does not support the selected processor!
     31          #endif
     32          	timerEventHandler = handler;
   \   0000000E   ....               LDI     R30, LOW(timerTicks)
   \   00000010   ....               LDI     R31, (timerTicks) >> 8
   \   00000012   8302               STD     Z+2, R16
   \   00000014   8313               STD     Z+3, R17
     33          }
   \   00000016   9508               RET
     34          
     35          

   \                                 In segment CODE, align 2, keep-with-next
     36          void Kernel_Delay(unsigned short time)
   \                     Kernel_Delay:
     37          {
     38          #if TASKER_DEBUG_LEVEL > 0
     39          	Kernel_DebuggerEvent(DEBUG_EVENT_DELAY, null, DEBUG_STATUS_OK, time);
     40          #endif
     41          
     42          	Critical();
   \   00000000   94F8               CLI
     43          	
     44          	timerTicks = time;
   \   00000002   ....               LDI     R30, LOW(timerTicks)
   \   00000004   ....               LDI     R31, (timerTicks) >> 8
   \   00000006   8300               ST      Z, R16
   \   00000008   8311               STD     Z+1, R17
   \   0000000A   C002               RJMP    ??Kernel_Delay_0
     45          	while(timerTicks > 0)
     46          	{
     47          		NonCritical();
     48          		__no_operation();
   \                     ??Kernel_Delay_1:
   \   0000000C   0000               NOP
     49          		Critical();
   \   0000000E   94F8               CLI
     50          	}
   \                     ??Kernel_Delay_0:
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   2B01               OR      R16, R17
   \   00000016   9478               SEI
   \   00000018   F7C9               BRNE    ??Kernel_Delay_1
     51          	NonCritical();
     52          }
   \   0000001A   9508               RET
     53          
     54          
     55          #if defined(__IOM8_H)
     56          #pragma vector=TIMER0_OVF_vect
     57          #elif defined(__IOM32_H) || defined(__IOM128_H) || defined(__IOM64_H) || defined(__IOM162_H)
     58          #pragma vector=TIMER0_COMP_vect
     59          #elif defined(__IOM168_H)
     60          #pragma vector=TIMER0_COMPA_vect
     61          #else
     62          #error MROS_Kernel_Timer does not support the selected processor!
     63          #endif

   \                                 In segment CODE, align 2, keep-with-next
     64          __interrupt void Kernel_TimerInterruptHandler(void)
   \                     Kernel_TimerInterruptHandler:
     65          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   93FA               ST      -Y, R31
   \   00000004   93EA               ST      -Y, R30
   \   00000006   923A               ST      -Y, R3
   \   00000008   922A               ST      -Y, R2
   \   0000000A   921A               ST      -Y, R1
   \   0000000C   920A               ST      -Y, R0
   \   0000000E   937A               ST      -Y, R23
   \   00000010   936A               ST      -Y, R22
   \   00000012   935A               ST      -Y, R21
   \   00000014   934A               ST      -Y, R20
   \   00000016   933A               ST      -Y, R19
   \   00000018   932A               ST      -Y, R18
   \   0000001A   931A               ST      -Y, R17
   \   0000001C   930A               ST      -Y, R16
   \   0000001E   B78F               IN      R24, 0x3F
     66          #if defined(__IOM8_H)
     67          	TCNT0 = (unsigned char)(0-TIMER_RELOAD);
     68          #endif
     69          
     70          	if(timerTicks > 0)
   \   00000020   ....               LDI     R30, LOW(timerTicks)
   \   00000022   ....               LDI     R31, (timerTicks) >> 8
   \   00000024   8100               LD      R16, Z
   \   00000026   8111               LDD     R17, Z+1
   \   00000028   2B01               OR      R16, R17
   \   0000002A   F031               BREQ    ??Kernel_TimerInterruptHandler_0
     71          	{
     72          		timerTicks--;
   \   0000002C   8100               LD      R16, Z
   \   0000002E   8111               LDD     R17, Z+1
   \   00000030   5001               SUBI    R16, 1
   \   00000032   4010               SBCI    R17, 0
   \   00000034   8300               ST      Z, R16
   \   00000036   8311               STD     Z+1, R17
     73          	}
     74          
     75          	if(timerEventHandler != null)
   \                     ??Kernel_TimerInterruptHandler_0:
   \   00000038   8102               LDD     R16, Z+2
   \   0000003A   8113               LDD     R17, Z+3
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   3000               CPI     R16, 0
   \   00000040   0712               CPC     R17, R18
   \   00000042   F011               BREQ    ??Kernel_TimerInterruptHandler_1
     76          	{
     77          		timerEventHandler();
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   9509               ICALL
     78          	}
     79          }
   \                     ??Kernel_TimerInterruptHandler_1:
   \   00000048   BF8F               OUT     0x3F, R24
   \   0000004A   9109               LD      R16, Y+
   \   0000004C   9119               LD      R17, Y+
   \   0000004E   9129               LD      R18, Y+
   \   00000050   9139               LD      R19, Y+
   \   00000052   9149               LD      R20, Y+
   \   00000054   9159               LD      R21, Y+
   \   00000056   9169               LD      R22, Y+
   \   00000058   9179               LD      R23, Y+
   \   0000005A   9009               LD      R0, Y+
   \   0000005C   9019               LD      R1, Y+
   \   0000005E   9029               LD      R2, Y+
   \   00000060   9039               LD      R3, Y+
   \   00000062   91E9               LD      R30, Y+
   \   00000064   91F9               LD      R31, Y+
   \   00000066   9189               LD      R24, Y+
   \   00000068   9518               RETI

   \                                 In segment INTVEC, offset 0x28, root
   \                     `??Kernel_TimerInterruptHandler??INTVEC 40`:
   \   00000028   ........           JMP     Kernel_TimerInterruptHandler

   Maximum stack usage in bytes:

     Function                     CSTACK RSTACK
     --------                     ------ ------
     Kernel_Delay                     0      2
     Kernel_InitTimer                 0      2
     Kernel_TimerInterruptHandler    15      2
       ->   Indirect call            15      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_TCCR0                          1
     _A_TIMSK                          1
     _A_OCR0                           1
     timerTicks                        4
     Kernel_InitTimer                 24
     Kernel_Delay                     28
     Kernel_TimerInterruptHandler    106
     ??Kernel_TimerInterruptHandler??INTVEC 40
                                       4
      Others                           6

 
   3 bytes in segment ABSOLUTE
 158 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
   4 bytes in segment NEAR_Z
 
 158 bytes of CODE memory (+ 10 bytes shared)
   4 bytes of DATA memory (+  3 bytes shared)

Errors: none
Warnings: none
