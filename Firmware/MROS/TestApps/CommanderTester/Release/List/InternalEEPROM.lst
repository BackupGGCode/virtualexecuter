##############################################################################
#                                                                            #
#                                                      09/Mar/2008  16:57:09 #
# IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM.c #
#    Command line =  --string_literals_in_flash                              #
#                    f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM.c #
#                     --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps #
#                    \CommanderTester\Release\Obj\ -D NDEBUG -lC             #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\List\ --initializers_in_flash   #
#                    -s9 -DENABLE_BIT_DEFINITIONS -e -I                      #
#                    f:\Projects\[Drivers]\C\mros\TestApps\CommanderTester\  #
#                    -I f:\Projects\[Drivers]\C\mros\ -I "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\InternalEEPROM.lst                          #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\Obj\InternalEEPROM.r90                           #
#                                                                            #
#                                                                            #
##############################################################################

f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM.c
      1          #include <Globals.h>

   \                                 In segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS 2
      2          #include <Kernel/Kernel.h>
      3          
      4          

   \                                 In segment CODE, align 2, keep-with-next
      5          unsigned char InternalEEPROM_ReadByte(unsigned long address)
   \                     InternalEEPROM_ReadByte:
   \                     ??InternalEEPROM_ReadByte_0:
      6          {
      7          	while(EECR & (1<<EEWE));
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??InternalEEPROM_ReadByte_0
      8          	EEAR = address;
   \   00000004   BB1F               OUT     0x1F, R17
   \   00000006   BB0E               OUT     0x1E, R16
      9          	EECR |= (1 << EERE);
   \   00000008   9AE0               SBI     0x1C, 0x00
     10          	return EEDR;
   \   0000000A   B30D               IN      R16, 0x1D
   \   0000000C   9508               RET
     11          }
     12          
     13          

   \                                 In segment CODE, align 2, keep-with-next
     14          void InternalEEPROM_WriteByte(unsigned long address, unsigned char value)
   \                     InternalEEPROM_WriteByte:
     15          {
     16          	Critical();
   \   00000000   94F8               CLI
     17          	while(EECR & (1<<EEWE));
   \                     ??InternalEEPROM_WriteByte_0:
   \   00000002   99E1               SBIC    0x1C, 0x01
   \   00000004   CFFE               RJMP    ??InternalEEPROM_WriteByte_0
     18          	EEAR = address;
   \   00000006   BB1F               OUT     0x1F, R17
   \   00000008   BB0E               OUT     0x1E, R16
     19          	EEDR = value;
   \   0000000A   BB4D               OUT     0x1D, R20
     20          	EECR |= (1 << EEMWE);
   \   0000000C   9AE2               SBI     0x1C, 0x02
     21          	EECR |= (1 << EEWE);
   \   0000000E   9AE1               SBI     0x1C, 0x01
     22          	NonCritical();
   \   00000010   9478               SEI
     23          }
   \   00000012   9508               RET
     24          
     25          

   \                                 In segment CODE, align 2, keep-with-next
     26          void InternalEEPROM_ReadBytes(unsigned long address, unsigned char* data, unsigned short length)
   \                     InternalEEPROM_ReadBytes:
     27          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
   \   00000014   012A               MOVW    R5:R4, R21:R20
   \   00000016   013B               MOVW    R7:R6, R23:R22
   \   00000018   C00A               RJMP    ??InternalEEPROM_ReadBytes_0
     28          	while(length--)
     29          	{
     30          		*data++ = InternalEEPROM_ReadByte(address++);
   \                     ??InternalEEPROM_ReadBytes_1:
   \   0000001A   018C               MOVW    R17:R16, R25:R24
   \   0000001C   019D               MOVW    R19:R18, R27:R26
   \   0000001E   ....               RCALL   InternalEEPROM_ReadByte
   \   00000020   5F8F               SUBI    R24, 255
   \   00000022   4F9F               SBCI    R25, 255
   \   00000024   4FAF               SBCI    R26, 255
   \   00000026   4FBF               SBCI    R27, 255
   \   00000028   01F2               MOVW    R31:R30, R5:R4
   \   0000002A   9301               ST      Z+, R16
   \   0000002C   012F               MOVW    R5:R4, R31:R30
     31          	}
   \                     ??InternalEEPROM_ReadBytes_0:
   \   0000002E   0183               MOVW    R17:R16, R7:R6
   \   00000030   EF2F               LDI     R18, 255
   \   00000032   0E62               ADD     R6, R18
   \   00000034   1E72               ADC     R7, R18
   \   00000036   2B01               OR      R16, R17
   \   00000038   F781               BRNE    ??InternalEEPROM_ReadBytes_1
     32          }
   \   0000003A                      REQUIRE ?Subroutine0
   \   0000003A                      ;               // Fall through to label ?Subroutine0

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET
     33          
     34          

   \                                 In segment CODE, align 2, keep-with-next
     35          unsigned long InternalEEPROM_ReadLong(unsigned long address)
   \                     InternalEEPROM_ReadLong:
     36          {
   \   00000000   9724               SBIW    R29:R28, 4
     37          unsigned long t;
     38          	
     39          	InternalEEPROM_ReadBytes(address, (unsigned char*)&t, 4);
   \   00000002   E064               LDI     R22, 4
   \   00000004   E070               LDI     R23, 0
   \   00000006   01AE               MOVW    R21:R20, R29:R28
   \   00000008   ....               RCALL   InternalEEPROM_ReadBytes
     40          	
     41          	return t;
   \   0000000A   8108               LD      R16, Y
   \   0000000C   8119               LDD     R17, Y+1
   \   0000000E   812A               LDD     R18, Y+2
   \   00000010   813B               LDD     R19, Y+3
   \   00000012   9624               ADIW    R29:R28, 4
   \   00000014   9508               RET
     42          }
     43          
     44          

   \                                 In segment CODE, align 2, keep-with-next
     45          void InternalEEPROM_WriteBytes(unsigned long address, unsigned char* data, unsigned short length)
   \                     InternalEEPROM_WriteBytes:
     46          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
   \   00000014   013A               MOVW    R7:R6, R21:R20
   \   00000016   012B               MOVW    R5:R4, R23:R22
   \   00000018   C00A               RJMP    ??InternalEEPROM_WriteBytes_0
     47          	while(length--)
     48          	{
     49          		InternalEEPROM_WriteByte(address++, *data++);
   \                     ??InternalEEPROM_WriteBytes_1:
   \   0000001A   01F3               MOVW    R31:R30, R7:R6
   \   0000001C   9141               LD      R20, Z+
   \   0000001E   013F               MOVW    R7:R6, R31:R30
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   019D               MOVW    R19:R18, R27:R26
   \   00000024   ....               RCALL   InternalEEPROM_WriteByte
   \   00000026   5F8F               SUBI    R24, 255
   \   00000028   4F9F               SBCI    R25, 255
   \   0000002A   4FAF               SBCI    R26, 255
   \   0000002C   4FBF               SBCI    R27, 255
     50          	}
   \                     ??InternalEEPROM_WriteBytes_0:
   \   0000002E   0182               MOVW    R17:R16, R5:R4
   \   00000030   EF2F               LDI     R18, 255
   \   00000032   0E42               ADD     R4, R18
   \   00000034   1E52               ADC     R5, R18
   \   00000036   2B01               OR      R16, R17
   \   00000038   F781               BRNE    ??InternalEEPROM_WriteBytes_1
     51          }
   \   0000003A   ....               RJMP    ?Subroutine0

   Maximum stack usage in bytes:

     Function                      CSTACK RSTACK
     --------                      ------ ------
     InternalEEPROM_ReadByte           0      2
     InternalEEPROM_ReadBytes          8      2
       -> InternalEEPROM_ReadByte      8      2
     InternalEEPROM_ReadLong           4      2
       -> InternalEEPROM_ReadBytes     4      2
     InternalEEPROM_WriteByte          0      2
     InternalEEPROM_WriteBytes         8      2
       -> InternalEEPROM_WriteByte     8      2


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     _A_EECR                        1
     _A_EEDR                        1
     _A_EEAR                        2
     ??InternalEEPROM_ReadByte_0   14
     InternalEEPROM_WriteByte      20
     InternalEEPROM_ReadBytes      58
     ?Subroutine0                  18
     InternalEEPROM_ReadLong       22
     InternalEEPROM_WriteBytes     60

 
   4 bytes in segment ABSOLUTE
 192 bytes in segment CODE
 
 192 bytes of CODE memory
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
