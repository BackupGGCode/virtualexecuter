##############################################################################
#                                                                            #
#                                                      09/Mar/2008  16:57:10 #
# IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\MessageQueue.c      #
#    Command line =  --string_literals_in_flash                              #
#                    f:\Projects\[Drivers]\C\MROS\Kernel\MessageQueue.c      #
#                    --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\Obj\ -D NDEBUG -lC              #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\List\ --initializers_in_flash   #
#                    -s9 -DENABLE_BIT_DEFINITIONS -e -I                      #
#                    f:\Projects\[Drivers]\C\mros\TestApps\CommanderTester\  #
#                    -I f:\Projects\[Drivers]\C\mros\ -I "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\MessageQueue.lst                            #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\Obj\MessageQueue.r90                             #
#                                                                            #
#                                                                            #
##############################################################################

f:\Projects\[Drivers]\C\MROS\Kernel\MessageQueue.c
      1          #include <Globals.h>
      2          #include "Kernel.h"
      3          #include "KernelInternals.h"
      4          
      5          

   \                                 In segment CODE, align 2, keep-with-next
      6          bool Kernel_PostMessage(unsigned char msg, messageQueue* mq)
   \                     Kernel_PostMessage:
      7          {
   \   00000000   011D               MOVW    R3:R2, R27:R26
      8          unsigned char index;
      9          
     10          	if(mq->full)
   \   00000002   01F9               MOVW    R31:R30, R19:R18
   \   00000004   8112               LDD     R17, Z+2
   \   00000006   2311               TST     R17
   \   00000008   F011               BREQ    ??Kernel_PostMessage_0
     11          	{
     12          #if TASKER_DEBUG_LEVEL > 0
     13          		Kernel_DebuggerEvent(DEBUG_EVENT_POSTMESSAGE, null, DEBUG_STATUS_NO_ROOM, (unsigned long)mq);
     14          #endif
     15          		return false;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   C023               RJMP    ??Kernel_PostMessage_1
     16          	}
     17          	
     18          	mq->data[mq->head] = msg;
   \                     ??Kernel_PostMessage_0:
   \   0000000E   8140               LD      R20, Z
   \   00000010   E050               LDI     R21, 0
   \   00000012   0FE4               ADD     R30, R20
   \   00000014   1FF5               ADC     R31, R21
   \   00000016   8303               STD     Z+3, R16
     19          	
     20          	if(++mq->head >= MESSAGE_QUEUE_SIZE)
   \   00000018   01F9               MOVW    R31:R30, R19:R18
   \   0000001A   8100               LD      R16, Z
   \   0000001C   9503               INC     R16
   \   0000001E   8300               ST      Z, R16
   \   00000020   3008               CPI     R16, 8
   \   00000022   F008               BRCS    ??Kernel_PostMessage_2
     21          	{
     22          		mq->head = 0;
   \   00000024   8350               ST      Z, R21
     23          	}
     24          	
     25          	for(index = 0; index < MAX_NUMBER_OF_TASKS; index++)
   \                     ??Kernel_PostMessage_2:
   \   00000026   E040               LDI     R20, 0
   \   00000028   ....               LDI     R30, LOW(taskQueue)
   \   0000002A   ....               LDI     R31, (taskQueue) >> 8
     26          	{
     27          		if(taskQueue[index].blockingMessageQueue == mq)
   \                     ??Kernel_PostMessage_3:
   \   0000002C   E00D               LDI     R16, 13
   \   0000002E   9F04               MUL     R16, R20
   \   00000030   01DF               MOVW    R27:R26, R31:R30
   \   00000032   9619               ADIW    R27:R26, 9
   \   00000034   0DA0               ADD     R26, R0
   \   00000036   1DB1               ADC     R27, R1
   \   00000038   916D               LD      R22, X+
   \   0000003A   917C               LD      R23, X
   \   0000003C   1762               CP      R22, R18
   \   0000003E   0773               CPC     R23, R19
   \   00000040   F429               BRNE    ??Kernel_PostMessage_4
     28          		{
     29          			taskQueue[index].blockingMessageQueue = null;
   \   00000042   0DE0               ADD     R30, R0
   \   00000044   1DF1               ADC     R31, R1
   \   00000046   8751               STD     Z+9, R21
   \   00000048   8752               STD     Z+10, R21
     30          #if TASKER_DEBUG_LEVEL > 0
     31          			Kernel_DebuggerEvent(DEBUG_EVENT_POSTMESSAGE, null, DEBUG_STATUS_OK, (unsigned long)mq);
     32          #endif
     33          			return true;
   \   0000004A   C003               RJMP    ??Kernel_PostMessage_5
     34          		}
     35          	}
   \                     ??Kernel_PostMessage_4:
   \   0000004C   9543               INC     R20
   \   0000004E   304A               CPI     R20, 10
   \   00000050   F368               BRCS    ??Kernel_PostMessage_3
     36          	
     37          #if TASKER_DEBUG_LEVEL > 0
     38          	Kernel_DebuggerEvent(DEBUG_EVENT_POSTMESSAGE, null, DEBUG_STATUS_OK, (unsigned long)mq);
     39          #endif
     40          	return true;
   \                     ??Kernel_PostMessage_5:
   \   00000052   E001               LDI     R16, 1
   \                     ??Kernel_PostMessage_1:
   \   00000054   01D1               MOVW    R27:R26, R3:R2
   \   00000056   9508               RET
     41          }
     42          
     43          

   \                                 In segment CODE, align 2, keep-with-next
     44          bool Kernel_GetMessage(unsigned char* msg, messageQueue* mq)
   \                     Kernel_GetMessage:
     45          {
     46          	if(mq->full == false && mq->head == mq->tail)
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   8142               LDD     R20, Z+2
   \   00000004   2344               TST     R20
   \   00000006   F479               BRNE    ??Kernel_GetMessage_0
   \   00000008   8140               LD      R20, Z
   \   0000000A   8151               LDD     R21, Z+1
   \   0000000C   1745               CP      R20, R21
   \   0000000E   F459               BRNE    ??Kernel_GetMessage_0
     47          	{
     48          		taskQueue[currentTaskIndex].blockingMessageQueue = mq;
   \   00000010   9140....           LDS     R20, currentTaskIndex
   \   00000014   E00D               LDI     R16, 13
   \   00000016   9F04               MUL     R16, R20
   \   00000018   01F0               MOVW    R31:R30, R1:R0
   \   0000001A   ....               SUBI    R30, LOW((-(taskQueue) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(taskQueue) & 0xFFFF) >> 8
   \   0000001E   8721               STD     Z+9, R18
   \   00000020   8732               STD     Z+10, R19
     49          #if TASKER_DEBUG_LEVEL > 0
     50          		Kernel_DebuggerEvent(DEBUG_EVENT_GETMESSAGE, null, DEBUG_STATUS_NO_MESSAGE, (unsigned long)mq);
     51          #endif
     52          		return false;
   \   00000022   E000               LDI     R16, 0
   \   00000024   9508               RET
     53          	}
     54          	
     55          	*msg = mq->data[mq->tail];
   \                     ??Kernel_GetMessage_0:
   \   00000026   8141               LDD     R20, Z+1
   \   00000028   E050               LDI     R21, 0
   \   0000002A   0FE4               ADD     R30, R20
   \   0000002C   1FF5               ADC     R31, R21
   \   0000002E   8143               LDD     R20, Z+3
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   8340               ST      Z, R20
     56          	
     57          	if(++mq->tail >= MESSAGE_QUEUE_SIZE)
   \   00000034   01F9               MOVW    R31:R30, R19:R18
   \   00000036   8101               LDD     R16, Z+1
   \   00000038   9503               INC     R16
   \   0000003A   8301               STD     Z+1, R16
   \   0000003C   3008               CPI     R16, 8
   \   0000003E   F008               BRCS    ??Kernel_GetMessage_1
     58          	{
     59          		mq->tail = 0;
   \   00000040   8351               STD     Z+1, R21
     60          	}
     61          	mq->full = false;
   \                     ??Kernel_GetMessage_1:
   \   00000042   8352               STD     Z+2, R21
     62          	
     63          #if TASKER_DEBUG_LEVEL > 0
     64          	Kernel_DebuggerEvent(DEBUG_EVENT_GETMESSAGE, null, DEBUG_STATUS_OK, (unsigned long)mq);
     65          #endif
     66          	return true;
   \   00000044   E001               LDI     R16, 1
   \   00000046   9508               RET
     67          }

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     Kernel_GetMessage      0      2
     Kernel_PostMessage     0      2


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     Kernel_PostMessage   88
     Kernel_GetMessage    72

 
 160 bytes in segment CODE
 
 160 bytes of CODE memory

Errors: none
Warnings: none
