##############################################################################
#                                                                            #
#                                                      09/Mar/2008  16:57:11 #
# IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Peripherals\UART.c         #
#    Command line =  --string_literals_in_flash                              #
#                    f:\Projects\[Drivers]\C\MROS\Peripherals\UART.c         #
#                    --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\Obj\ -D NDEBUG -lC              #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\List\ --initializers_in_flash   #
#                    -s9 -DENABLE_BIT_DEFINITIONS -e -I                      #
#                    f:\Projects\[Drivers]\C\mros\TestApps\CommanderTester\  #
#                    -I f:\Projects\[Drivers]\C\mros\ -I "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\UART.lst                                    #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\Obj\UART.r90                                     #
#                                                                            #
#                                                                            #
##############################################################################

f:\Projects\[Drivers]\C\MROS\Peripherals\UART.c
      1          #include "UART.h"

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS 1
      2          
      3          
      4          #if defined(BUFFERED_UART_)
      5          static unsigned char RxBuffer[RX_BUFFER_SIZE];
      6          static unsigned char RxBufferIn=0;
      7          static unsigned char RxBufferOut=0;
      8          static unsigned char RxBufferFull=0;
      9          
     10          static unsigned char TxBuffer[TX_BUFFER_SIZE];
     11          static unsigned char TxBufferIn=0;
     12          static unsigned char TxBufferOut=0;
     13          static unsigned char TxBufferFull=0;
     14          #endif
     15          
     16          
     17          
     18          static void WriteHexDigit(unsigned char value);
     19          
     20          
     21          /**************************************************************
     22          
     23          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     24          void UART_Init(unsigned short baudrate)
   \                     UART_Init:
     25          {
     26          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
     27          	UBRR0H=(baudrate>>8);
     28          	UBRR0L=(baudrate&0xff);
     29          	UCSR0A=(1<<U2X0);
     30          #elif defined(__IOM32_H) || defined(__IOM8_H)
     31          	UBRRH=(baudrate>>8);
   \   00000000   BD10               OUT     0x20, R17
     32          	UBRRL=(baudrate&0xff);
   \   00000002   B909               OUT     0x09, R16
     33          	UCSRA=(1<<U2X);
   \   00000004   E002               LDI     R16, 2
   \   00000006   B90B               OUT     0x0B, R16
     34          #else
     35          #error Module UART_ does not support the selected processor!
     36          #endif
     37          
     38          #if defined(BUFFERED_UART_)
     39          
     40          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
     41          	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     42          #elif defined(__IOM32_H) || defined(__IOM8_H)
     43          	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     44          #else
     45          #error Module UART_ does not support the selected processor!
     46          #endif
     47          
     48          #else
     49          
     50          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
     51          	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     52          #elif defined(__IOM32_H) || defined(__IOM8_H)
     53          	UCSRB=(1<<RXEN)|(1<<TXEN);
   \   00000008   E108               LDI     R16, 24
   \   0000000A   B90A               OUT     0x0A, R16
     54          #else
     55          #error Module UART_ does not support the selected processor!
     56          #endif
     57          
     58          #endif
     59          
     60          }
   \   0000000C   9508               RET
     61          
     62          
     63          /**************************************************************
     64          
     65          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     66          void UART_SetBaudrate(unsigned short baudrate)
   \                     UART_SetBaudrate:
     67          {
     68          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
     69          	UBRR0H=(baudrate>>8);
     70          	UBRR0L=(baudrate&0xff);
     71          #elif defined(__IOM32_H) || defined(__IOM8_H)
     72          	UBRRH=(baudrate>>8);
   \   00000000   BD10               OUT     0x20, R17
     73          	UBRRL=(baudrate&0xff);
   \   00000002   B909               OUT     0x09, R16
     74          #else
     75          #error Module UART_ does not support the selected processor!
     76          #endif
     77          }
   \   00000004   9508               RET
     78          
     79          /**************************************************************
     80          
     81          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     82          unsigned char UART_BytesReady(void)
   \                     UART_BytesReady:
     83          {
     84          #if defined(BUFFERED_UART_)
     85          	if(RxBufferFull)
     86          		return RX_BUFFER_SIZE;
     87          	else
     88          	{
     89          		if(RxBufferIn==RxBufferOut)
     90          			return 0;
     91          		else if(RxBufferIn>RxBufferOut)
     92          			return (RxBufferIn-RxBufferOut);
     93          		else
     94          			return (RX_BUFFER_SIZE-(RxBufferOut-RxBufferIn));
     95          	}
     96          
     97          #else
     98          
     99          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
    100          	return ((UCSR0A&(1<<RXC0))!=0);
    101          #elif defined(__IOM32_H) || defined(__IOM8_H)
    102          	return ((UCSRA&(1<<RXC))!=0);
   \   00000000   E000               LDI     R16, 0
   \   00000002   995F               SBIC    0x0B, 0x07
   \   00000004   E001               LDI     R16, 1
   \                     ??UART_BytesReady_0:
   \   00000006   9508               RET
    103          #else
    104          #error Module UART_ does not support the selected processor!
    105          #endif
    106          
    107          #endif
    108          }
    109          
    110          
    111          /**************************************************************
    112          
    113          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    114          unsigned char UART_ReadByte(void)
   \                     UART_ReadByte:
   \                     ??UART_ReadByte_0:
    115          {
    116          #if defined(BUFFERED_UART_)
    117          unsigned char Temp;
    118          
    119          	while(UART_BytesReady()==0);
    120          
    121          	Temp=RxBuffer[RxBufferOut++];
    122          	if(RxBufferOut>=RX_BUFFER_SIZE)
    123          		RxBufferOut=0;
    124          	RxBufferFull=0;
    125          	return Temp;
    126          
    127          #else
    128          
    129          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
    130          	while(!(UCSR0A&(1<<RXC0)));
    131          	return UDR0;
    132          #elif defined(__IOM32_H) || defined(__IOM8_H)
    133          	while(!(UCSRA&(1<<RXC)));
   \   00000000   9B5F               SBIS    0x0B, 0x07
   \   00000002   CFFE               RJMP    ??UART_ReadByte_0
    134          	return UDR;
   \   00000004   B10C               IN      R16, 0x0C
   \   00000006   9508               RET
    135          #else
    136          #error Module UART_ does not support the selected processor!
    137          #endif
    138          
    139          #endif
    140          }
    141          
    142          
    143          /**************************************************************
    144          
    145          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    146          void UART_ReadBytes(unsigned char *buffer, unsigned char length)
   \                     UART_ReadBytes:
    147          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   2F82               MOV     R24, R18
   \   0000000A   2322               TST     R18
   \   0000000C   F021               BREQ    ??UART_ReadBytes_0
    148          	while(length)
    149          	{
    150          		*buffer++=UART_ReadByte();
   \                     ??UART_ReadBytes_1:
   \   0000000E   ....               RCALL   UART_ReadByte
   \   00000010   930D               ST      X+, R16
    151          		length--;
   \   00000012   958A               DEC     R24
    152          	}
   \   00000014   F7E1               BRNE    ??UART_ReadBytes_1
    153          }
   \                     ??UART_ReadBytes_0:
   \   00000016   9189               LD      R24, Y+
   \   00000018   91A9               LD      R26, Y+
   \   0000001A   91B9               LD      R27, Y+
   \   0000001C   9508               RET
    154          
    155          
    156          /**************************************************************
    157          
    158          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    159          void UART_WriteByte(unsigned char data)
   \                     UART_WriteByte:
   \                     ??UART_WriteByte_0:
    160          {
    161          #if defined(BUFFERED_UART_)
    162          
    163          	while(TxBufferFull);
    164          
    165          //	if(UCSRA&(1<<UDRE))
    166          //		UDR=Data;
    167          //	else
    168          //	{
    169          		TxBuffer[TxBufferIn++]=data;
    170          		if(TxBufferIn>=TX_BUFFER_SIZE)
    171          			TxBufferIn=0;
    172          		if(TxBufferIn==TxBufferOut)
    173          			TxBufferFull=1;
    174          		else
    175          			TxBufferFull=0;
    176          		UCSRB|=(1<<UDRIE);
    177          //	}
    178          
    179          #else
    180          
    181          #if defined(__IOM64_H) || defined(__IOM162_H) || defined(__IOM168_H)
    182          	while(!(UCSR0A&(1<<UDRE0)));
    183          	UDR0=data;
    184          #elif defined(__IOM32_H) || defined(__IOM8_H)
    185          	while(!(UCSRA&(1<<UDRE)));
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??UART_WriteByte_0
    186          	UDR=data;
   \   00000004   B90C               OUT     0x0C, R16
    187          #else
    188          #error Module UART_ does not support the selected processor!
    189          #endif
    190          
    191          #endif
    192          }
   \   00000006   9508               RET
    193          
    194          
    195          /**************************************************************
    196          
    197          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    198          void putc(unsigned char data)
   \                     putc:
   \                     ??putc_0:
    199          {
    200          	UART_WriteByte(data);
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??putc_0
   \   00000004   B90C               OUT     0x0C, R16
    201          }
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
    202          int putchar(int data)
   \                     putchar:
   \                     ??putchar_0:
    203          {
    204          	UART_WriteByte(data);
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??putchar_0
   \   00000004   B90C               OUT     0x0C, R16
    205          	return 0;
   \   00000006   E000               LDI     R16, 0
   \   00000008   E010               LDI     R17, 0
   \   0000000A   9508               RET
    206          }
    207          
    208          
    209          /**************************************************************
    210          
    211          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    212          unsigned char getc(void)
   \                     getc:
    213          {
    214          	return UART_ReadByte();
   \   00000000   ....               RJMP    UART_ReadByte
    215          }
    216          
    217          
    218          /**************************************************************
    219          
    220          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    221          void UART_WriteBytes(unsigned char *buffer, unsigned char length)
   \                     UART_WriteBytes:
    222          {
   \   00000000   2322               TST     R18
   \   00000002   F051               BREQ    ??UART_WriteBytes_0
    223          	while(length)
    224          	{
    225          		length--;
   \                     ??UART_WriteBytes_1:
   \   00000004   952A               DEC     R18
    226          		UART_WriteByte(*buffer++);
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8130               LD      R19, Z
   \                     ??UART_WriteBytes_2:
   \   0000000A   9B5D               SBIS    0x0B, 0x05
   \   0000000C   CFFE               RJMP    ??UART_WriteBytes_2
   \   0000000E   B93C               OUT     0x0C, R19
   \   00000010   5F0F               SUBI    R16, 255
   \   00000012   4F1F               SBCI    R17, 255
    227          	}
   \   00000014   2322               TST     R18
   \   00000016   F7B1               BRNE    ??UART_WriteBytes_1
    228          }
   \                     ??UART_WriteBytes_0:
   \   00000018   9508               RET
    229          
    230          
    231          /**************************************************************
    232          
    233          **************************************************************/
    234          #if defined(BUFFERED_UART_)
    235          #if defined(__IOM162_H) || defined(__IOM168_H)
    236          #pragma vector=USART0_RXC_vect
    237          #elif
    238          #error Module 'UART' does not support the selected processor!
    239          //#pragma vector=USART_RXC_vect
    240          #endif
    241          __interrupt void UART__RX_Interrupt(void)
    242          {
    243          unsigned char temp;
    244          
    245          #if defined(__IOM64_H) || defined(__IOM162_h)
    246          	temp=UDR0;
    247          #elif defined(__IOM32_H) || defined(__IOM8_H)
    248          	temp=UDR;
    249          #else
    250          #error Module 'UART' does not support the selected processor!
    251          #endif
    252          	if(!RxBufferFull)
    253          	{
    254          		RxBuffer[RxBufferIn++]=temp;
    255          		if(RxBufferIn>=RX_BUFFER_SIZE)
    256          			RxBufferIn=0;
    257          		if(RxBufferIn==RxBufferOut)
    258          			RxBufferFull=1;
    259          		else
    260          			RxBufferFull=0;
    261          	}
    262          }
    263          #endif
    264          
    265          
    266          /**************************************************************
    267          
    268          **************************************************************/
    269          #if defined(BUFFERED_UART_)
    270          #if defined(__IOM162_H) || defined(__IOM168_H)
    271          #pragma vector=USART0_UDRE_vect
    272          #elif
    273          #error Module 'UART' does not support the selected processor!
    274          //#pragma vector=USART_UDRE_vect
    275          #endif
    276          __interrupt void UART__UDRE_Interrupt(void)
    277          {
    278          	if(TxBufferFull || (TxBufferIn!=TxBufferOut))
    279          	{
    280          #if defined(__IOM64_H) || defined(__IOM162_h)
    281          		UDR0=TxBuffer[TxBufferOut++];
    282          #elif defined(__IOM32_H) || defined(__IOM8_H)
    283          		UDR=TxBuffer[TxBufferOut++];
    284          #else
    285          #error Module UART_ does not support the selected processor!
    286          #endif
    287          		if(TxBufferOut>=TX_BUFFER_SIZE)
    288          			TxBufferOut=0;
    289          		TxBufferFull=0;
    290          	}
    291          	else
    292          #if defined(__IOM64_H) || defined(__IOM162_h)
    293          		UCSR0B&=~(1<<UDRIE0);
    294          #elif defined(__IOM32_H) || defined(__IOM8_H)
    295          		UCSRB&=~(1<<UDRIE);
    296          #else
    297          #error Module UART_ does not support the selected processor!
    298          #endif
    299          }
    300          #endif
    301          
    302          
    303          
    304          /**************************************************************
    305          
    306          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    307          void UART_WriteString(char* str)
   \                     UART_WriteString:
    308          {
   \   00000000   C005               RJMP    ??UART_WriteString_0
    309          unsigned char temp;
    310          
    311          	while(*str)
    312          	{
    313          		temp=*str++;
   \                     ??UART_WriteString_1:
   \   00000002   9631               ADIW    R31:R30, 1
   \   00000004   018F               MOVW    R17:R16, R31:R30
    314          #if (SEND_CRLF==1)
    315          		if(temp==10)
    316          			UART_WriteByte(13);
    317          #endif
    318          		UART_WriteByte(temp);
   \                     ??UART_WriteString_2:
   \   00000006   9B5D               SBIS    0x0B, 0x05
   \   00000008   CFFE               RJMP    ??UART_WriteString_2
   \   0000000A   B92C               OUT     0x0C, R18
    319          	}
   \                     ??UART_WriteString_0:
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   8120               LD      R18, Z
   \   00000010   2322               TST     R18
   \   00000012   F7B9               BRNE    ??UART_WriteString_1
    320          }
   \   00000014   9508               RET
    321          
    322          
    323          /**************************************************************
    324          
    325          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    326          void UART_WriteString_P(string* str)
   \                     UART_WriteString_P:
    327          {
   \   00000000   C005               RJMP    ??UART_WriteString_P_0
    328          unsigned char temp;
    329          
    330          	while(*str)
    331          	{
    332          		temp=*str++;
   \                     ??UART_WriteString_P_1:
   \   00000002   9125               LPM     R18, Z+
   \   00000004   018F               MOVW    R17:R16, R31:R30
    333          #if (SEND_CRLF==1)
    334          		if(temp==10)
    335          			UART_WriteByte(13);
    336          #endif
    337          		UART_WriteByte(temp);
   \                     ??UART_WriteString_P_2:
   \   00000006   9B5D               SBIS    0x0B, 0x05
   \   00000008   CFFE               RJMP    ??UART_WriteString_P_2
   \   0000000A   B92C               OUT     0x0C, R18
    338          	}
   \                     ??UART_WriteString_P_0:
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   9124               LPM     R18, Z
   \   00000010   2322               TST     R18
   \   00000012   F7B9               BRNE    ??UART_WriteString_P_1
    339          }
   \   00000014   9508               RET
    340          
    341          
    342          
    343          /**************************************************************
    344          
    345          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    346          void UART_WriteValueUnsigned(unsigned long value)
   \                     UART_WriteValueUnsigned:
    347          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   2FF8               MOV     R31, R24
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   01D9               MOVW    R27:R26, R19:R18
    348          	if(value > 999999)
   \   0000000C   3400               CPI     R16, 64
   \   0000000E   E402               LDI     R16, 66
   \   00000010   0790               CPC     R25, R16
   \   00000012   E00F               LDI     R16, 15
   \   00000014   07A0               CPC     R26, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   07B0               CPC     R27, R16
   \   0000001A   F090               BRCS    ??UART_WriteValueUnsigned_0
    349          	{
    350          		UART_WriteByte(((value / 1000000) % 10) + '0');
   \   0000001C   018C               MOVW    R17:R16, R25:R24
   \   0000001E   E440               LDI     R20, 64
   \   00000020   E452               LDI     R21, 66
   \   00000022   E06F               LDI     R22, 15
   \   00000024   E070               LDI     R23, 0
   \   00000026   ........           CALL    ?UL_DIVMOD_L03
   \   0000002A   E04A               LDI     R20, 10
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   E060               LDI     R22, 0
   \   00000030   E070               LDI     R23, 0
   \   00000032   ........           CALL    ?UL_DIVMOD_L03
   \   00000036   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_1:
   \   00000038   9B5D               SBIS    0x0B, 0x05
   \   0000003A   CFFE               RJMP    ??UART_WriteValueUnsigned_1
   \   0000003C   B94C               OUT     0x0C, R20
   \   0000003E   C008               RJMP    ??UART_WriteValueUnsigned_2
    351          	}
    352          	if(value > 99999)
   \                     ??UART_WriteValueUnsigned_0:
   \   00000040   3A80               CPI     R24, 160
   \   00000042   E806               LDI     R16, 134
   \   00000044   0790               CPC     R25, R16
   \   00000046   E001               LDI     R16, 1
   \   00000048   07A0               CPC     R26, R16
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   07B0               CPC     R27, R16
   \   0000004E   F098               BRCS    ??UART_WriteValueUnsigned_3
    353          	{
    354          		UART_WriteByte(((value / 100000) % 10) + '0');
   \                     ??UART_WriteValueUnsigned_2:
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   019D               MOVW    R19:R18, R27:R26
   \   00000054   EA40               LDI     R20, 160
   \   00000056   E856               LDI     R21, 134
   \   00000058   E061               LDI     R22, 1
   \   0000005A   E070               LDI     R23, 0
   \   0000005C   ........           CALL    ?UL_DIVMOD_L03
   \   00000060   E04A               LDI     R20, 10
   \   00000062   E050               LDI     R21, 0
   \   00000064   E060               LDI     R22, 0
   \   00000066   E070               LDI     R23, 0
   \   00000068   ........           CALL    ?UL_DIVMOD_L03
   \   0000006C   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_4:
   \   0000006E   9B5D               SBIS    0x0B, 0x05
   \   00000070   CFFE               RJMP    ??UART_WriteValueUnsigned_4
   \   00000072   B94C               OUT     0x0C, R20
   \   00000074   C007               RJMP    ??UART_WriteValueUnsigned_5
    355          	}
    356          	if(value > 9999)
   \                     ??UART_WriteValueUnsigned_3:
   \   00000076   3180               CPI     R24, 16
   \   00000078   E207               LDI     R16, 39
   \   0000007A   0790               CPC     R25, R16
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   07A0               CPC     R26, R16
   \   00000080   07B0               CPC     R27, R16
   \   00000082   F098               BRCS    ??UART_WriteValueUnsigned_6
    357          	{
    358          		UART_WriteByte(((value / 10000) % 10) + '0');
   \                     ??UART_WriteValueUnsigned_5:
   \   00000084   018C               MOVW    R17:R16, R25:R24
   \   00000086   019D               MOVW    R19:R18, R27:R26
   \   00000088   E140               LDI     R20, 16
   \   0000008A   E257               LDI     R21, 39
   \   0000008C   E060               LDI     R22, 0
   \   0000008E   E070               LDI     R23, 0
   \   00000090   ........           CALL    ?UL_DIVMOD_L03
   \   00000094   E04A               LDI     R20, 10
   \   00000096   E050               LDI     R21, 0
   \   00000098   E060               LDI     R22, 0
   \   0000009A   E070               LDI     R23, 0
   \   0000009C   ........           CALL    ?UL_DIVMOD_L03
   \   000000A0   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_7:
   \   000000A2   9B5D               SBIS    0x0B, 0x05
   \   000000A4   CFFE               RJMP    ??UART_WriteValueUnsigned_7
   \   000000A6   B94C               OUT     0x0C, R20
   \   000000A8   C007               RJMP    ??UART_WriteValueUnsigned_8
    359          	}
    360          	if(value > 999)
   \                     ??UART_WriteValueUnsigned_6:
   \   000000AA   3E88               CPI     R24, 232
   \   000000AC   E003               LDI     R16, 3
   \   000000AE   0790               CPC     R25, R16
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   07A0               CPC     R26, R16
   \   000000B4   07B0               CPC     R27, R16
   \   000000B6   F098               BRCS    ??UART_WriteValueUnsigned_9
    361          	{
    362          		UART_WriteByte(((value / 1000) % 10) + '0');
   \                     ??UART_WriteValueUnsigned_8:
   \   000000B8   018C               MOVW    R17:R16, R25:R24
   \   000000BA   019D               MOVW    R19:R18, R27:R26
   \   000000BC   EE48               LDI     R20, 232
   \   000000BE   E053               LDI     R21, 3
   \   000000C0   E060               LDI     R22, 0
   \   000000C2   E070               LDI     R23, 0
   \   000000C4   ........           CALL    ?UL_DIVMOD_L03
   \   000000C8   E04A               LDI     R20, 10
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   E060               LDI     R22, 0
   \   000000CE   E070               LDI     R23, 0
   \   000000D0   ........           CALL    ?UL_DIVMOD_L03
   \   000000D4   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_10:
   \   000000D6   9B5D               SBIS    0x0B, 0x05
   \   000000D8   CFFE               RJMP    ??UART_WriteValueUnsigned_10
   \   000000DA   B94C               OUT     0x0C, R20
   \   000000DC   C005               RJMP    ??UART_WriteValueUnsigned_11
    363          	}
    364          	if(value > 99)
   \                     ??UART_WriteValueUnsigned_9:
   \   000000DE   3684               CPI     R24, 100
   \   000000E0   0790               CPC     R25, R16
   \   000000E2   07A0               CPC     R26, R16
   \   000000E4   07B0               CPC     R27, R16
   \   000000E6   F098               BRCS    ??UART_WriteValueUnsigned_12
    365          	{
    366          		UART_WriteByte(((value / 100) % 10) + '0');
   \                     ??UART_WriteValueUnsigned_11:
   \   000000E8   018C               MOVW    R17:R16, R25:R24
   \   000000EA   019D               MOVW    R19:R18, R27:R26
   \   000000EC   E644               LDI     R20, 100
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   E060               LDI     R22, 0
   \   000000F2   E070               LDI     R23, 0
   \   000000F4   ........           CALL    ?UL_DIVMOD_L03
   \   000000F8   E04A               LDI     R20, 10
   \   000000FA   E050               LDI     R21, 0
   \   000000FC   E060               LDI     R22, 0
   \   000000FE   E070               LDI     R23, 0
   \   00000100   ........           CALL    ?UL_DIVMOD_L03
   \   00000104   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_13:
   \   00000106   9B5D               SBIS    0x0B, 0x05
   \   00000108   CFFE               RJMP    ??UART_WriteValueUnsigned_13
   \   0000010A   B94C               OUT     0x0C, R20
   \   0000010C   C005               RJMP    ??UART_WriteValueUnsigned_14
    367          	}
    368          	if(value > 9)
   \                     ??UART_WriteValueUnsigned_12:
   \   0000010E   308A               CPI     R24, 10
   \   00000110   0790               CPC     R25, R16
   \   00000112   07A0               CPC     R26, R16
   \   00000114   07B0               CPC     R27, R16
   \   00000116   F090               BRCS    ??UART_WriteValueUnsigned_15
    369          	{
    370          		UART_WriteByte(((value / 10) % 10) + '0');
   \                     ??UART_WriteValueUnsigned_14:
   \   00000118   018C               MOVW    R17:R16, R25:R24
   \   0000011A   019D               MOVW    R19:R18, R27:R26
   \   0000011C   E04A               LDI     R20, 10
   \   0000011E   E050               LDI     R21, 0
   \   00000120   E060               LDI     R22, 0
   \   00000122   E070               LDI     R23, 0
   \   00000124   ........           CALL    ?UL_DIVMOD_L03
   \   00000128   E04A               LDI     R20, 10
   \   0000012A   E050               LDI     R21, 0
   \   0000012C   E060               LDI     R22, 0
   \   0000012E   E070               LDI     R23, 0
   \   00000130   ........           CALL    ?UL_DIVMOD_L03
   \   00000134   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_16:
   \   00000136   9B5D               SBIS    0x0B, 0x05
   \   00000138   CFFE               RJMP    ??UART_WriteValueUnsigned_16
   \   0000013A   B94C               OUT     0x0C, R20
    371          	}
    372          	UART_WriteByte((value % 10) + '0');
   \                     ??UART_WriteValueUnsigned_15:
   \   0000013C   018C               MOVW    R17:R16, R25:R24
   \   0000013E   019D               MOVW    R19:R18, R27:R26
   \   00000140   E04A               LDI     R20, 10
   \   00000142   E050               LDI     R21, 0
   \   00000144   E060               LDI     R22, 0
   \   00000146   E070               LDI     R23, 0
   \   00000148   ........           CALL    ?UL_DIVMOD_L03
   \   0000014C   5D40               SUBI    R20, 208
   \                     ??UART_WriteValueUnsigned_17:
   \   0000014E   9B5D               SBIS    0x0B, 0x05
   \   00000150   CFFE               RJMP    ??UART_WriteValueUnsigned_17
   \   00000152   B94C               OUT     0x0C, R20
    373          }
   \   00000154   2F8F               MOV     R24, R31
   \   00000156   9199               LD      R25, Y+
   \   00000158   91A9               LD      R26, Y+
   \   0000015A   91B9               LD      R27, Y+
   \   0000015C   9508               RET
    374          
    375          

   \                                 In segment CODE, align 2, keep-with-next
    376          void UART_WritePointer(void* pointer)
   \                     UART_WritePointer:
    377          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006   2F80               MOV     R24, R16
    378          	WriteHexDigit((unsigned short)pointer >> 12);
   \   00000008   01D8               MOVW    R27:R26, R17:R16
   \   0000000A   2F01               MOV     R16, R17
   \   0000000C   9506               LSR     R16
   \   0000000E   9506               LSR     R16
   \   00000010   9506               LSR     R16
   \   00000012   9506               LSR     R16
   \   00000014   ....               RCALL   WriteHexDigit
    379          	WriteHexDigit((unsigned short)pointer >> 8);
   \   00000016   2F0B               MOV     R16, R27
   \   00000018   ....               RCALL   WriteHexDigit
    380          	WriteHexDigit((unsigned short)pointer >> 4);
   \   0000001A   95B6               LSR     R27
   \   0000001C   95A7               ROR     R26
   \   0000001E   95B6               LSR     R27
   \   00000020   95A7               ROR     R26
   \   00000022   95B6               LSR     R27
   \   00000024   95A7               ROR     R26
   \   00000026   95B6               LSR     R27
   \   00000028   95A7               ROR     R26
   \   0000002A   2F0A               MOV     R16, R26
   \   0000002C   ....               RCALL   WriteHexDigit
    381          	WriteHexDigit((unsigned short)pointer);
   \   0000002E   2F08               MOV     R16, R24
   \   00000030   ....               RCALL   WriteHexDigit
    382          }
   \   00000032   9189               LD      R24, Y+
   \   00000034   91A9               LD      R26, Y+
   \   00000036   91B9               LD      R27, Y+
   \   00000038   9508               RET
    383          
    384          

   \                                 In segment CODE, align 2, keep-with-next
    385          static void WriteHexDigit(unsigned char value)
   \                     WriteHexDigit:
    386          {
    387          	value &= 0x0f;
   \   00000000   700F               ANDI    R16, 0x0F
    388          	
    389          	if(value > 9)
   \   00000002   300A               CPI     R16, 10
   \   00000004   F020               BRCS    ??WriteHexDigit_0
    390          		UART_WriteByte(value + 'A' - 10);
   \   00000006   5C09               SUBI    R16, 201
   \                     ??WriteHexDigit_1:
   \   00000008   9B5D               SBIS    0x0B, 0x05
   \   0000000A   CFFE               RJMP    ??WriteHexDigit_1
   \   0000000C   C003               RJMP    ??WriteHexDigit_2
    391          	else
    392          		UART_WriteByte(value + '0');
   \                     ??WriteHexDigit_0:
   \   0000000E   5D00               SUBI    R16, 208
   \                     ??WriteHexDigit_3:
   \   00000010   9B5D               SBIS    0x0B, 0x05
   \   00000012   CFFE               RJMP    ??WriteHexDigit_3
   \                     ??WriteHexDigit_2:
   \   00000014   B90C               OUT     0x0C, R16
    393          }
   \   00000016   9508               RET
    394          
    395          /**************************************************************
    396          
    397          **************************************************************/
    398          /*
    399          void UART__WriteShort(unsigned short Data)
    400          {
    401          	if(Data>9999)
    402          		UART_WriteByte((Data/10000)%10+'0');
    403          	if(Data>999)
    404          		UART_WriteByte((Data/1000)%10+'0');
    405          	if(Data>99)
    406          		UART_WriteByte((Data/100)%10+'0');
    407          	if(Data>9)
    408          		UART_WriteByte((Data/10)%10+'0');
    409          	UART_WriteByte(Data%10+'0');
    410          }
    411          */
    412          
    413          /**************************************************************
    414          
    415          **************************************************************/
    416          /*
    417          void Flush(void)
    418          {
    419          	while(UART_BytesReady())
    420          		UART_ReadByte();
    421          }
    422          */

   Maximum stack usage in bytes:

     Function                CSTACK RSTACK
     --------                ------ ------
     UART_BytesReady             0      2
     UART_Init                   0      2
     UART_ReadByte               0      2
     UART_ReadBytes              3      2
       -> UART_ReadByte          3      2
     UART_SetBaudrate            0      2
     UART_WriteByte              0      2
     UART_WriteBytes             0      2
     UART_WritePointer           4      2
       -> WriteHexDigit          4      2
       -> WriteHexDigit          4      2
       -> WriteHexDigit          4      2
       -> WriteHexDigit          4      2
     UART_WriteString            0      2
     UART_WriteString_P          0      2
     UART_WriteValueUnsigned     4      4
     WriteHexDigit               0      2
     getc                        0      2
       -> UART_ReadByte          0      2
     putc                        0      2
     putchar                     0      2


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     _A_UBRRL                   1
     _A_UCSRB                   1
     _A_UCSRA                   1
     _A_UDR                     1
     _A_UBRRH                   1
     UART_Init                 14
     UART_SetBaudrate           6
     UART_BytesReady            8
     ??UART_ReadByte_0          8
     UART_ReadBytes            30
     ??UART_WriteByte_0         8
     ??putc_0                   8
     ??putchar_0               12
     getc                       2
     UART_WriteBytes           26
     UART_WriteString          22
     UART_WriteString_P        22
     UART_WriteValueUnsigned  350
     UART_WritePointer         58
     WriteHexDigit             24

 
   5 bytes in segment ABSOLUTE
 598 bytes in segment CODE
 
 598 bytes of CODE memory
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
