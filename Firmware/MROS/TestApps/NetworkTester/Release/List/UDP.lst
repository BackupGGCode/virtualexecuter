##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:35:46 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Network\UDP.c              #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\N #
#                    etwork\UDP.c                                            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\UDP.lst                                       #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\UDP.r90                                        #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "Network.h"
      2          
      3          
      4          typedef struct
      5          {
      6          	unsigned short port;
      7          	void (*registeredFunctions)(unsigned char *buffer);
      8          } UDP_RegisteredPorts;

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      9          static UDP_RegisteredPorts registeredPorts[UDP_MAX_REGISTERED_PORTS]={NULL};
   \   static struct <unnamed> __near registeredPorts[3];
   \                     registeredPorts:
   \   00000000                              DS 12
     10          
     11          
     12          /*
     13          	Sends 'Buffer' to the specified destination IP and port.
     14          */

   \                                 In segment CODE, align 2, keep-with-next
     15          void UDP_Send(unsigned long destinationIP, unsigned short destinationPort, unsigned short sourcePort, unsigned char *buffer, unsigned short length)
     16          {
   \   __nearfunc void UDP_Send(unsigned long, unsigned short, unsigned short, unsigned char *, unsigned short);
   \                     UDP_Send:
   \   00000000   929A                       ST      -Y,R9
   \   00000002   928A                       ST      -Y,R8
   \   00000004   927A                       ST      -Y,R7
   \   00000006   926A                       ST      -Y,R6
   \   00000008   925A                       ST      -Y,R5
   \   0000000A   924A                       ST      -Y,R4
   \   0000000C   93BA                       ST      -Y,R27
   \   0000000E   93AA                       ST      -Y,R26
   \   00000010   939A                       ST      -Y,R25
   \   00000012   938A                       ST      -Y,R24
   \   00000014                              REQUIRE ?Register_R4_is_cg_reg
   \   00000014                              REQUIRE ?Register_R5_is_cg_reg
   \   00000014                              REQUIRE ?Register_R6_is_cg_reg
   \   00000014                              REQUIRE ?Register_R7_is_cg_reg
   \   00000014                              REQUIRE ?Register_R8_is_cg_reg
   \   00000014                              REQUIRE ?Register_R9_is_cg_reg
   \   00000014   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000016   01D9                       MOVW    R27 : R26,R19 : R18
   \   00000018   012A                       MOVW    R5 : R4,R21 : R20
   \   0000001A   019B                       MOVW    R19 : R18,R23 : R22
   \   0000001C   846A                       LDD     R6,Y+10
   \   0000001E   847B                       LDD     R7,Y+11
   \   00000020   848C                       LDD     R8,Y+12
   \   00000022   849D                       LDD     R9,Y+13
     17          	PutShort(buffer + UDP_SOURCE, sourcePort);
   \   00000024   0183                       MOVW    R17 : R16,R7 : R6
   \   00000026   5D0E                       SUBI    R16,222
   \   00000028   4F1F                       SBCI    R17,255
   \   0000002A   ........                   CALL    PutShort
     18          	PutShort(buffer + UDP_DESTINATION, destinationPort);
   \   0000002E   0192                       MOVW    R19 : R18,R5 : R4
   \   00000030   0183                       MOVW    R17 : R16,R7 : R6
   \   00000032   5D0C                       SUBI    R16,220
   \   00000034   4F1F                       SBCI    R17,255
   \   00000036   ........                   CALL    PutShort
     19          	PutShort(buffer + UDP_LENGTH,UDP_HEADER_SIZE + length);
   \   0000003A   E008                       LDI     R16,8
   \   0000003C   0E80                       ADD     R8,R16
   \   0000003E   E000                       LDI     R16,0
   \   00000040   1E90                       ADC     R9,R16
   \   00000042   0194                       MOVW    R19 : R18,R9 : R8
   \   00000044   0183                       MOVW    R17 : R16,R7 : R6
   \   00000046   5D0A                       SUBI    R16,218
   \   00000048   4F1F                       SBCI    R17,255
   \   0000004A   ........                   CALL    PutShort
     20          	PutShort(buffer + UDP_CHECKSUM, NULL);
   \   0000004E   E020                       LDI     R18,0
   \   00000050   E030                       LDI     R19,0
   \   00000052   0183                       MOVW    R17 : R16,R7 : R6
   \   00000054   5D08                       SUBI    R16,216
   \   00000056   4F1F                       SBCI    R17,255
   \   00000058   ........                   CALL    PutShort
     21          	IP_Send(destinationIP, IP_PROTOCOL_UDP, buffer, UDP_HEADER_SIZE + length);
   \   0000005C   929A                       ST      -Y,R9
   \   0000005E   928A                       ST      -Y,R8
   \   00000060   01B3                       MOVW    R23 : R22,R7 : R6
   \   00000062   E141                       LDI     R20,17
   \   00000064   018C                       MOVW    R17 : R16,R25 : R24
   \   00000066   019D                       MOVW    R19 : R18,R27 : R26
   \   00000068   ........                   CALL    IP_Send
     22          }
   \   0000006C   9189                       LD      R24,Y+
   \   0000006E   9199                       LD      R25,Y+
   \   00000070   91A9                       LD      R26,Y+
   \   00000072   91B9                       LD      R27,Y+
   \   00000074   9049                       LD      R4,Y+
   \   00000076   9059                       LD      R5,Y+
   \   00000078   9069                       LD      R6,Y+
   \   0000007A   9079                       LD      R7,Y+
   \   0000007C   9089                       LD      R8,Y+
   \   0000007E   9099                       LD      R9,Y+
   \   00000080   9624                       ADIW    R29 : R28,4
   \   00000082   9508                       RET
     23          
     24          
     25          /*
     26          	Manages port demultiplexing.
     27          */

   \                                 In segment CODE, align 2, keep-with-next
     28          void UDP_Receive(unsigned char *buffer)
     29          {
   \   __nearfunc void UDP_Receive(unsigned char *);
   \                     UDP_Receive:
   \   00000000   927A                       ST      -Y,R7
   \   00000002   926A                       ST      -Y,R6
   \   00000004   925A                       ST      -Y,R5
   \   00000006   924A                       ST      -Y,R4
   \   00000008   93BA                       ST      -Y,R27
   \   0000000A   93AA                       ST      -Y,R26
   \   0000000C   938A                       ST      -Y,R24
   \   0000000E                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                              REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                              REQUIRE ?Register_R7_is_cg_reg
   \   0000000E   0128                       MOVW    R5 : R4,R17 : R16
     30          unsigned char temp;
     31          
     32          	for(temp = 0 ; temp < UDP_MAX_REGISTERED_PORTS ; temp++)
   \   00000010   E080                       LDI     R24,0
     33          	{
     34          		if(registeredPorts[temp].port == GetShort(buffer + UDP_DESTINATION))
   \                     ??UDP_Receive_0:
   \   00000012   ....                       LDI     R26,LOW(registeredPorts)
   \   00000014   ....                       LDI     R27,(registeredPorts) >> 8
   \   00000016   E004                       LDI     R16,4
   \   00000018   9F80                       MUL     R24,R16
   \   0000001A   0DA0                       ADD     R26,R0
   \   0000001C   1DB1                       ADC     R27,R1
   \   0000001E   906D                       LD      R6,X+
   \   00000020   907C                       LD      R7,X
   \   00000022   9711                       SBIW    R27 : R26,1
   \   00000024   0182                       MOVW    R17 : R16,R5 : R4
   \   00000026   5D0C                       SUBI    R16,220
   \   00000028   4F1F                       SBCI    R17,255
   \   0000002A   ........                   CALL    GetShort
   \   0000002E   1660                       CP      R6,R16
   \   00000030   0671                       CPC     R7,R17
   \   00000032   F439                       BRNE    ??UDP_Receive_1
     35          		{
     36          			(*registeredPorts[temp].registeredFunctions)(buffer);
   \   00000034   0182                       MOVW    R17 : R16,R5 : R4
   \   00000036   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000038   8122                       LDD     R18,Z+2
   \   0000003A   8133                       LDD     R19,Z+3
   \   0000003C   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000003E   9509                       ICALL
     37          			return;
   \   00000040   C003                       RJMP    ??UDP_Receive_2
   \                     ??UDP_Receive_1:
   \   00000042   9583                       INC     R24
   \   00000044   3083                       CPI     R24,3
   \   00000046   F328                       BRCS    ??UDP_Receive_0
   \                     ??UDP_Receive_2:
   \   00000048   9189                       LD      R24,Y+
   \   0000004A   91A9                       LD      R26,Y+
   \   0000004C   91B9                       LD      R27,Y+
   \   0000004E   9049                       LD      R4,Y+
   \   00000050   9059                       LD      R5,Y+
   \   00000052   9069                       LD      R6,Y+
   \   00000054   9079                       LD      R7,Y+
   \   00000056   9508                       RET
     38          		}
     39          	}
     40          }
     41          
     42          
     43          /*
     44          	Registers 'TheFunction' to 'Port'. When a UDP datagram is received 'TheFunction' will be called
     45          	and will be given the entire buffer including Ethernet, IP and UDP headers.
     46          	A port can only be registered once.
     47          */

   \                                 In segment CODE, align 2, keep-with-next
     48          unsigned char UDP_RegisterPort(unsigned short port, void (*theFunction)(unsigned char *buffer))
     49          {
   \   __nearfunc unsigned char UDP_RegisterPort(unsigned short, void (*)(unsigned char *));
   \                     UDP_RegisterPort:
   \   00000000   01A8                       MOVW    R21 : R20,R17 : R16
     50          unsigned char temp;
     51          
     52          	for(temp = 0 ; temp < UDP_MAX_REGISTERED_PORTS ; temp++)
   \   00000002   E010                       LDI     R17,0
     53          	{
     54          		if(registeredPorts[temp].port == port)
   \                     ??UDP_RegisterPort_0:
   \   00000004   E004                       LDI     R16,4
   \   00000006   9F10                       MUL     R17,R16
   \   00000008   01F0                       MOVW    R31 : R30,R1 : R0
   \   0000000A   ....                       SUBI    R30,LOW((-(registeredPorts) & 0xFFFF))
   \   0000000C   ....                       SBCI    R31,(-(registeredPorts) & 0xFFFF) >> 8
   \   0000000E   8160                       LD      R22,Z
   \   00000010   8171                       LDD     R23,Z+1
   \   00000012   1764                       CP      R22,R20
   \   00000014   0775                       CPC     R23,R21
   \   00000016   F411                       BRNE    ??UDP_RegisterPort_1
     55          		{
     56          			return UDP_ERROR_PORT_ALREADY_REGISTERED;
   \   00000018   E002                       LDI     R16,2
   \   0000001A   9508                       RET
   \                     ??UDP_RegisterPort_1:
   \   0000001C   9513                       INC     R17
   \   0000001E   3013                       CPI     R17,3
   \   00000020   F388                       BRCS    ??UDP_RegisterPort_0
     57          		}
     58          	}
     59          	
     60          	for(temp = 0 ; temp < UDP_MAX_REGISTERED_PORTS ; temp++)
   \   00000022   E010                       LDI     R17,0
     61          	{
     62          		if(registeredPorts[temp].port == NULL)
   \                     ??UDP_RegisterPort_2:
   \   00000024   ....                       LDI     R30,LOW(registeredPorts)
   \   00000026   ....                       LDI     R31,(registeredPorts) >> 8
   \   00000028   9F10                       MUL     R17,R16
   \   0000002A   0DE0                       ADD     R30,R0
   \   0000002C   1DF1                       ADC     R31,R1
   \   0000002E   8160                       LD      R22,Z
   \   00000030   8171                       LDD     R23,Z+1
   \   00000032   2B67                       OR      R22,R23
   \   00000034   F431                       BRNE    ??UDP_RegisterPort_3
     63          		{
     64          			registeredPorts[temp].port = port;
   \   00000036   8340                       ST      Z,R20
   \   00000038   8351                       STD     Z+1,R21
     65          			registeredPorts[temp].registeredFunctions=theFunction;
   \   0000003A   8322                       STD     Z+2,R18
   \   0000003C   8333                       STD     Z+3,R19
     66          			return UDP_OK;
   \   0000003E   E000                       LDI     R16,0
   \   00000040   9508                       RET
   \                     ??UDP_RegisterPort_3:
   \   00000042   9513                       INC     R17
   \   00000044   3013                       CPI     R17,3
   \   00000046   F370                       BRCS    ??UDP_RegisterPort_2
     67          		}
     68          	}
     69          	
     70          	return UDP_ERROR_NO_FREE_SLOTS;
   \   00000048   E001                       LDI     R16,1
   \   0000004A   9508                       RET
     71          }
     72          
     73          
     74          /*
     75          	Releases the priorly registered port.
     76          */

   \                                 In segment CODE, align 2, keep-with-next
     77          unsigned char UDP_UnregisterPort(unsigned short port)
     78          {
     79          unsigned char temp;
     80          
     81          	for(temp = 0 ; temp < UDP_MAX_REGISTERED_PORTS ; temp++)
   \   __nearfunc unsigned char UDP_UnregisterPort(unsigned short);
   \                     UDP_UnregisterPort:
   \   00000000   E020                       LDI     R18,0
     82          	{
     83          		if(registeredPorts[temp].port == port)
   \                     ??UDP_UnregisterPort_0:
   \   00000002   ....                       LDI     R30,LOW(registeredPorts)
   \   00000004   ....                       LDI     R31,(registeredPorts) >> 8
   \   00000006   E034                       LDI     R19,4
   \   00000008   9F23                       MUL     R18,R19
   \   0000000A   0DE0                       ADD     R30,R0
   \   0000000C   1DF1                       ADC     R31,R1
   \   0000000E   8140                       LD      R20,Z
   \   00000010   8151                       LDD     R21,Z+1
   \   00000012   1740                       CP      R20,R16
   \   00000014   0751                       CPC     R21,R17
   \   00000016   F431                       BRNE    ??UDP_UnregisterPort_1
     84          		{
     85          			registeredPorts[temp].port = NULL;
   \   00000018   E000                       LDI     R16,0
   \   0000001A   8300                       ST      Z,R16
   \   0000001C   8301                       STD     Z+1,R16
     86          			registeredPorts[temp].registeredFunctions = NULL;
   \   0000001E   8302                       STD     Z+2,R16
   \   00000020   8303                       STD     Z+3,R16
     87          			return UDP_OK;
   \   00000022   9508                       RET
   \                     ??UDP_UnregisterPort_1:
   \   00000024   9523                       INC     R18
   \   00000026   3023                       CPI     R18,3
   \   00000028   F360                       BRCS    ??UDP_UnregisterPort_0
     88          		}
     89          	}
     90          	
     91          	return UDP_ERROR_PORT_NOT_REGISTERED;
   \   0000002A   E003                       LDI     R16,3
   \   0000002C   9508                       RET
     92          }

   Maximum stack usage in bytes:

     Function              CSTACK  RSTACK
     --------              ------  ------
     UDP_Receive               7       2 
       -> GetShort             7       2 
       ->   Indirect call      7       2 
     UDP_RegisterPort          0       0 
     UDP_Send                 16       2 
       -> PutShort            14       2 
       -> PutShort            14       2 
       -> PutShort            14       2 
       -> PutShort            14       2 
       -> IP_Send             16       2 
     UDP_UnregisterPort        0       0 

 
    342 bytes in segment CODE
      6 bytes in segment INITTAB
     12 bytes in segment NEAR_Z
 
    342 bytes of CODE memory (+ 6 bytes shared)
     12 bytes of DATA memory

Errors: none
Warnings: none
