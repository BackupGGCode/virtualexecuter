##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:29:54 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Peripherals\SPI.c          #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\P #
#                    eripherals\SPI.c                                        #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\SPI.lst                                       #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\SPI.r90                                        #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "SPI.h"

   \                                 In segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_SPCR;
   \                     _A_SPCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_SPSR;
   \                     _A_SPSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2f
   \   union <unnamed> volatile __io _A_SPDR;
   \                     _A_SPDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB;
   \                     _A_DDRB:
   \   00000000                              DS 1
      2          
      3          

   \                                 In segment CODE, align 2, keep-with-next
      4          void SPI_Init(unsigned char Prescaler)
      5          {
      6          #if defined(__IOM64_H)
      7          	DDRB |= (1 << 2) | (1 << 1);
      8          	DDRB &= ~(1 << 3);
      9          #elif defined(__IOM32_H)
     10          	DDRB |= (1 << 7) | (1 << 5);
   \   __nearfunc void SPI_Init(unsigned char);
   \                     SPI_Init:
   \   00000000   B317                       IN      R17,0x17
   \   00000002   6A10                       ORI     R17,0xA0
   \   00000004   BB17                       OUT     0x17,R17
     11          	DDRB &= ~(1 << 6);
   \   00000006   98BE                       CBI     0x17,0x06
     12          #else
     13          #error Module SPI does not support the selected processor!
     14          #endif
     15          
     16          	SPCR = (1 << SPE) | (1 << MSTR) | (Prescaler & 0x03);		// Mode 0,0 - sample on leading (rising) edge and setup on trailing (falling) edge
   \   00000008   2F10                       MOV     R17,R16
   \   0000000A   7013                       ANDI    R17,0x03
   \   0000000C   6510                       ORI     R17,0x50
   \   0000000E   B91D                       OUT     0x0D,R17
     17          
     18          	if(Prescaler & 0x04)
   \   00000010   FB02                       BST     R16,2
   \   00000012   F41E                       BRTC    ??SPI_Init_0
     19          		SPSR = 0x01;
   \   00000014   E001                       LDI     R16,1
   \   00000016   B90E                       OUT     0x0E,R16
   \   00000018   9508                       RET
     20          	else
     21          		SPSR = 0x00;
   \                     ??SPI_Init_0:
   \   0000001A   E000                       LDI     R16,0
   \   0000001C   B90E                       OUT     0x0E,R16
     22          }
   \   0000001E   9508                       RET
     23          
     24          

   \                                 In segment CODE, align 2, keep-with-next
     25          unsigned char SPI_Transfer(unsigned char Data)
     26          {
     27          	SPDR = Data;
   \   __nearfunc unsigned char SPI_Transfer(unsigned char);
   \                     SPI_Transfer:
   \   00000000   B90F                       OUT     0x0F,R16
     28          
     29          	while((SPSR & (1 << SPIF)) == false);
   \                     ??SPI_Transfer_0:
   \   00000002   9B77                       SBIS    0x0E,0x07
   \   00000004   CFFE                       RJMP    ??SPI_Transfer_0
     30          
     31          	return SPDR;
   \   00000006   B10F                       IN      R16,0x0F
   \   00000008   9508                       RET
     32          }

   Maximum stack usage in bytes:

     Function      CSTACK  RSTACK
     --------      ------  ------
     SPI_Init          0       0 
     SPI_Transfer      0       0 

 
      4 bytes in segment ABSOLUTE
     42 bytes in segment CODE
 
     42 bytes of CODE memory
      0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
