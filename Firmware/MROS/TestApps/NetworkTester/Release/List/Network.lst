##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:35:46 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Network\Network.c          #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\N #
#                    etwork\Network.c                                        #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\Network.lst                                   #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\Network.r90                                    #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "Network.h"
      2          #include <Kernel/Kernel.h>
      3          #include <Peripherals/UART.h>
      4          
      5          

   \                                 In segment CODE, align 2, keep-with-next
      6          unsigned char Network_Init(unsigned char ip1, unsigned char ip2, unsigned char ip3, unsigned char ip4)
      7          {
   \   __nearfunc unsigned char Network_Init(unsigned char, unsigned char, unsigned char, unsigned char);
   \                     Network_Init:
   \   00000000   938A                       ST      -Y,R24
      8          signed char result;
      9          
     10          	ip=Num2IP(ip1, ip2, ip3, ip4);
   \   00000002   2F61                       MOV     R22,R17
   \   00000004   2F70                       MOV     R23,R16
   \   00000006   2F03                       MOV     R16,R19
   \   00000008   2F12                       MOV     R17,R18
   \   0000000A   0F22                       LSL     R18
   \   0000000C   0B22                       SBC     R18,R18
   \   0000000E   2F32                       MOV     R19,R18
   \   00000010   2B26                       OR      R18,R22
   \   00000012   2B37                       OR      R19,R23
   \   00000014   ....                       LDI     R30,LOW(ip)
   \   00000016   ....                       LDI     R31,(ip) >> 8
   \   00000018   8300                       ST      Z,R16
   \   0000001A   8311                       STD     Z+1,R17
   \   0000001C   8322                       STD     Z+2,R18
   \   0000001E   8333                       STD     Z+3,R19
     11          
     12          	result=NIC_Init(0);
   \   00000020   E000                       LDI     R16,0
   \   00000022   E010                       LDI     R17,0
   \   00000024   ........                   CALL    NIC_Init
   \   00000028   2F80                       MOV     R24,R16
     13          
     14          	UART_WriteByte(result+'0');
   \   0000002A   5D00                       SUBI    R16,208
   \   0000002C   ........                   CALL    UART_WriteByte
     15          
     16          	if(result)
   \   00000030   2388                       TST     R24
   \   00000032   F011                       BREQ    ??Network_Init_0
     17          	{
     18          		return 1;
   \   00000034   E001                       LDI     R16,1
   \   00000036   C009                       RJMP    ??Network_Init_1
     19          	}
     20          
     21          	Kernel_CreateTask(ARP_Tick);
   \                     ??Network_Init_0:
   \   00000038   ....                       LDI     R16,LOW(ARP_Tick/2)
   \   0000003A   ....                       LDI     R17,(ARP_Tick/2) >> 8
   \   0000003C   ........                   CALL    Kernel_CreateTask
     22          	
     23          	Kernel_CreateTask(ETHERNET_Receive);
   \   00000040   ....                       LDI     R16,LOW(ETHERNET_Receive/2)
   \   00000042   ....                       LDI     R17,(ETHERNET_Receive/2) >> 8
   \   00000044   ........                   CALL    Kernel_CreateTask
     24          	
     25          	return 0;
   \   00000048   E000                       LDI     R16,0
   \                     ??Network_Init_1:
   \   0000004A   9189                       LD      R24,Y+
   \   0000004C   9508                       RET
     26          }
     27          
     28          

   \                                 In segment CODE, align 2, keep-with-next
     29          unsigned long Num2IP(unsigned char ip1, unsigned char ip2, unsigned char ip3, unsigned char ip4)
     30          {
     31          unsigned long temp;
     32          
     33          	temp = (ip1 << 8) | ip2;
     34          	temp <<= 16;
     35          	temp |= (ip3 << 8) | ip4;
     36          	
     37          	return temp;
   \   __nearfunc unsigned long Num2IP(unsigned char, unsigned char, unsigned char, unsigned char);
   \                     Num2IP:
   \   00000000   2F61                       MOV     R22,R17
   \   00000002   2F70                       MOV     R23,R16
   \   00000004   2F03                       MOV     R16,R19
   \   00000006   2F12                       MOV     R17,R18
   \   00000008   0F22                       LSL     R18
   \   0000000A   0B22                       SBC     R18,R18
   \   0000000C   2F32                       MOV     R19,R18
   \   0000000E   2B26                       OR      R18,R22
   \   00000010   2B37                       OR      R19,R23
   \   00000012   9508                       RET
     38          }
     39          
     40          /*
     41          unsigned long Str2IP(char* ip)
     42          {
     43          	return NULL;
     44          }
     45          
     46          
     47          unsigned long Str2IP_P(__flash char* ip)
     48          {
     49          	return NULL;
     50          }
     51          */

   Maximum stack usage in bytes:

     Function                CSTACK  RSTACK
     --------                ------  ------
     Network_Init                1       2 
       -> NIC_Init               1       2 
       -> UART_WriteByte         1       2 
       -> Kernel_CreateTask      1       2 
       -> Kernel_CreateTask      1       2 
     Num2IP                      0       0 

 
     98 bytes in segment CODE
 
     98 bytes of CODE memory

Errors: none
Warnings: none
