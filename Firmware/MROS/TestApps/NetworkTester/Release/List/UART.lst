##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:19:37 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Peripherals\UART.c         #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\P #
#                    eripherals\UART.c                                       #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\UART.lst                                      #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\UART.r90                                       #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "UART.h"

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL;
   \                     _A_UBRRL:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB;
   \                     _A_UCSRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA;
   \                     _A_UCSRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR;
   \                     _A_UDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH;
   \                     _A_UBRRH:
   \   00000000                              DS 1
      2          
      3          #define SEND_CRLF
      4          
      5          #if defined(BUFFERED_UART_)
      6          static unsigned char RxBuffer[RX_BUFFER_SIZE];
      7          static unsigned char RxBufferIn=0;
      8          static unsigned char RxBufferOut=0;
      9          static unsigned char RxBufferFull=0;
     10          
     11          static unsigned char TxBuffer[TX_BUFFER_SIZE];
     12          static unsigned char TxBufferIn=0;
     13          static unsigned char TxBufferOut=0;
     14          static unsigned char TxBufferFull=0;
     15          #endif
     16          
     17          
     18          /**************************************************************
     19          
     20          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     21          void UART_Init(unsigned short baudrate)
     22          {
     23          #if defined(__IOM64_H) 
     24          	UBRR0H=(baudrate>>8);
     25          	UBRR0L=(baudrate&0xff);
     26          	UCSR0A=(1<<U2X0);
     27          #elif defined(__IOM32_H) || defined(__IOM8_H)
     28          	UBRRH=(baudrate>>8);
   \   __nearfunc void UART_Init(unsigned short);
   \                     UART_Init:
   \   00000000   BD10                       OUT     0x20,R17
     29          	UBRRL=(baudrate&0xff);
   \   00000002   B909                       OUT     0x09,R16
     30          	UCSRA=(1<<U2X);
   \   00000004   E002                       LDI     R16,2
   \   00000006   B90B                       OUT     0x0B,R16
     31          #else
     32          #error Module UART_ does not support the selected processor!
     33          #endif
     34          
     35          #if defined(BUFFERED_UART_)
     36          
     37          #if defined(__IOM64_H) 
     38          	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     39          #elif defined(__IOM32_H) || defined(__IOM8_H)
     40          	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     41          #else
     42          #error Module UART_ does not support the selected processor!
     43          #endif
     44          
     45          #else
     46          
     47          #if defined(__IOM64_H) 
     48          	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     49          #elif defined(__IOM32_H) || defined(__IOM8_H)
     50          	UCSRB=(1<<RXEN)|(1<<TXEN);
   \   00000008   E108                       LDI     R16,24
   \   0000000A   B90A                       OUT     0x0A,R16
     51          #else
     52          #error Module UART_ does not support the selected processor!
     53          #endif
     54          
     55          #endif
     56          
     57          }
   \   0000000C   9508                       RET
     58          
     59          
     60          /**************************************************************
     61          
     62          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     63          void UART_SetBaudrate(unsigned short baudrate)
     64          {
     65          #if defined(__IOM64_H) 
     66          	UBRR0H=(baudrate>>8);
     67          	UBRR0L=(baudrate&0xff);
     68          #elif defined(__IOM32_H) || defined(__IOM8_H)
     69          	UBRRH=(baudrate>>8);
   \   __nearfunc void UART_SetBaudrate(unsigned short);
   \                     UART_SetBaudrate:
   \   00000000   BD10                       OUT     0x20,R17
     70          	UBRRL=(baudrate&0xff);
   \   00000002   B909                       OUT     0x09,R16
     71          #else
     72          #error Module UART_ does not support the selected processor!
     73          #endif
     74          }
   \   00000004   9508                       RET
     75          
     76          /**************************************************************
     77          
     78          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     79          unsigned char UART_BytesReady(void)
     80          {
     81          #if defined(BUFFERED_UART_)
     82          	if(RxBufferFull)
     83          		return RX_BUFFER_SIZE;
     84          	else
     85          	{
     86          		if(RxBufferIn==RxBufferOut)
     87          			return 0;
     88          		else if(RxBufferIn>RxBufferOut)
     89          			return (RxBufferIn-RxBufferOut);
     90          		else
     91          			return (RX_BUFFER_SIZE-(RxBufferOut-RxBufferIn));
     92          	}
     93          
     94          #else
     95          
     96          #if defined(__IOM64_H)
     97          	return ((UCSR0A&(1<<RXC0))!=0);
     98          #elif defined(__IOM32_H) || defined(__IOM8_H)
     99          	return ((UCSRA&(1<<RXC))!=0);
   \   __nearfunc unsigned char UART_BytesReady();
   \                     UART_BytesReady:
   \   00000000   9B5F                       SBIS    0x0B,0x07
   \   00000002   C002                       RJMP    ??UART_BytesReady_0
   \   00000004   E001                       LDI     R16,1
   \   00000006   9508                       RET
   \                     ??UART_BytesReady_0:
   \   00000008   E000                       LDI     R16,0
   \   0000000A   9508                       RET
    100          #else
    101          #error Module UART_ does not support the selected processor!
    102          #endif
    103          
    104          #endif
    105          }
    106          
    107          
    108          /**************************************************************
    109          
    110          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    111          unsigned char UART_ReadByte(void)
    112          {
    113          #if defined(BUFFERED_UART_)
    114          unsigned char Temp;
    115          
    116          	while(UART_ByteSReady()==0);
    117          
    118          	Temp=RxBuffer[RxBufferOut++];
    119          	if(RxBufferOut>=RX_BUFFER_SIZE)
    120          		RxBufferOut=0;
    121          	RxBufferFull=0;
    122          	return Temp;
    123          
    124          #else
    125          
    126          #if defined(__IOM64_H)
    127          	while(!(UCSR0A&(1<<RXC0)));
    128          	return UDR0;
    129          #elif defined(__IOM32_H) || defined(__IOM8_H)
    130          	while(!(UCSRA&(1<<RXC)));
   \   __nearfunc unsigned char UART_ReadByte();
   \                     UART_ReadByte:
   \                     ??UART_ReadByte_0:
   \   00000000   9B5F                       SBIS    0x0B,0x07
   \   00000002   CFFE                       RJMP    ??UART_ReadByte_0
    131          	return UDR;
   \   00000004   B10C                       IN      R16,0x0C
   \   00000006   9508                       RET
    132          #else
    133          #error Module UART_ does not support the selected processor!
    134          #endif
    135          
    136          #endif
    137          }
    138          
    139          
    140          /**************************************************************
    141          
    142          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    143          void UART_ReadBytes(unsigned char *buffer, unsigned char length)
    144          {
   \   __nearfunc void UART_ReadBytes(unsigned char *, unsigned char);
   \                     UART_ReadBytes:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   2F82                       MOV     R24,R18
   \   0000000A   C003                       RJMP    ??UART_ReadBytes_0
    145          	while(length)
    146          	{
    147          		*buffer++=UART_ReadByte();
   \                     ??UART_ReadBytes_1:
   \   0000000C   ....                       RCALL   UART_ReadByte
   \   0000000E   930D                       ST      X+,R16
    148          		length--;
   \   00000010   958A                       DEC     R24
   \                     ??UART_ReadBytes_0:
   \   00000012   2388                       TST     R24
   \   00000014   F7D9                       BRNE    ??UART_ReadBytes_1
    149          	}
    150          }
   \   00000016   9189                       LD      R24,Y+
   \   00000018   91A9                       LD      R26,Y+
   \   0000001A   91B9                       LD      R27,Y+
   \   0000001C   9508                       RET
    151          
    152          
    153          /**************************************************************
    154          
    155          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    156          void UART_WriteByte(unsigned char data)
    157          {
    158          #if defined(BUFFERED_UART_)
    159          
    160          	while(TxBufferFull);
    161          
    162          //	if(UCSRA&(1<<UDRE))
    163          //		UDR=Data;
    164          //	else
    165          //	{
    166          		TxBuffer[TxBufferIn++]=data;
    167          		if(TxBufferIn>=TX_BUFFER_SIZE)
    168          			TxBufferIn=0;
    169          		if(TxBufferIn==TxBufferOut)
    170          			TxBufferFull=1;
    171          		else
    172          			TxBufferFull=0;
    173          		UCSRB|=(1<<UDRIE);
    174          //	}
    175          
    176          #else
    177          
    178          #if defined(__IOM64_H)
    179          	while(!(UCSR0A&(1<<UDRE0)));
    180          	UDR0=data;
    181          #elif defined(__IOM32_H) || defined(__IOM8_H)
    182          	while(!(UCSRA&(1<<UDRE)));
   \   __nearfunc void UART_WriteByte(unsigned char);
   \                     UART_WriteByte:
   \                     ??UART_WriteByte_0:
   \   00000000   9B5D                       SBIS    0x0B,0x05
   \   00000002   CFFE                       RJMP    ??UART_WriteByte_0
    183          	UDR=data;
   \   00000004   B90C                       OUT     0x0C,R16
    184          #else
    185          #error Module UART_ does not support the selected processor!
    186          #endif
    187          
    188          #endif
    189          }
   \   00000006   9508                       RET
    190          
    191          
    192          /**************************************************************
    193          
    194          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    195          void putc(unsigned char data)
    196          {
    197          	UART_WriteByte(data);
   \   __nearfunc void putc(unsigned char);
   \                     putc:
   \   00000000   ....                       RJMP    UART_WriteByte
    198          }

   \                                 In segment CODE, align 2, keep-with-next
    199          int putchar(int data)
    200          {
    201          	UART_WriteByte(data);
   \   __nearfunc int putchar(int);
   \                     putchar:
   \   00000000   ....                       RCALL   UART_WriteByte
    202          	return 0;
   \   00000002   E000                       LDI     R16,0
   \   00000004   E010                       LDI     R17,0
   \   00000006   9508                       RET
    203          }
    204          
    205          
    206          /**************************************************************
    207          
    208          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    209          unsigned char getc(void)
    210          {
    211          	return UART_ReadByte();
   \   __nearfunc unsigned char getc();
   \                     getc:
   \   00000000   ....                       RJMP    UART_ReadByte
    212          }
    213          
    214          
    215          /**************************************************************
    216          
    217          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    218          void UART_WriteBytes(unsigned char *buffer, unsigned char length)
    219          {
   \   __nearfunc void UART_WriteBytes(unsigned char *, unsigned char);
   \                     UART_WriteBytes:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   2F82                       MOV     R24,R18
   \   0000000A   C003                       RJMP    ??UART_WriteBytes_0
    220          	while(length)
    221          	{
    222          		length--;
   \                     ??UART_WriteBytes_1:
   \   0000000C   958A                       DEC     R24
    223          		UART_WriteByte(*buffer++);
   \   0000000E   910D                       LD      R16,X+
   \   00000010   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteBytes_0:
   \   00000012   2388                       TST     R24
   \   00000014   F7D9                       BRNE    ??UART_WriteBytes_1
    224          	}
    225          }
   \   00000016   9189                       LD      R24,Y+
   \   00000018   91A9                       LD      R26,Y+
   \   0000001A   91B9                       LD      R27,Y+
   \   0000001C   9508                       RET
    226          
    227          
    228          /**************************************************************
    229          
    230          **************************************************************/
    231          #if defined(BUFFERED_UART_)
    232          #pragma vector=USART_RXC_vect
    233          __interrupt void UART__RX_Interrupt(void)
    234          {
    235          unsigned char temp;
    236          
    237          #if defined(__IOM64_H)
    238          	temp=UDR0;
    239          #elif defined(__IOM32_H) || defined(__IOM8_H)
    240          	temp=UDR;
    241          #else
    242          #error Module UART_ does not support the selected processor!
    243          #endif
    244          	if(!RxBufferFull)
    245          	{
    246          		RxBuffer[RxBufferIn++]=temp;
    247          		if(RxBufferIn>=RX_BUFFER_SIZE)
    248          			RxBufferIn=0;
    249          		if(RxBufferIn==RxBufferOut)
    250          			RxBufferFull=1;
    251          		else
    252          			RxBufferFull=0;
    253          	}
    254          }
    255          #endif
    256          
    257          
    258          /**************************************************************
    259          
    260          **************************************************************/
    261          #if defined(BUFFERED_UART_)
    262          #pragma vector=USART_UDRE_vect
    263          __interrupt void UART__UDRE_Interrupt(void)
    264          {
    265          	if(TxBufferFull || (TxBufferIn!=TxBufferOut))
    266          	{
    267          #if defined(__IOM64_H)
    268          		UDR0=TxBuffer[TxBufferOut++];
    269          #elif defined(__IOM32_H) || defined(__IOM8_H)
    270          		UDR=TxBuffer[TxBufferOut++];
    271          #else
    272          #error Module UART_ does not support the selected processor!
    273          #endif
    274          		if(TxBufferOut>=TX_BUFFER_SIZE)
    275          			TxBufferOut=0;
    276          		TxBufferFull=0;
    277          	}
    278          	else
    279          #if defined(__IOM64_H)
    280          		UCSR0B&=~(1<<UDRIE0);
    281          #elif defined(__IOM32_H) || defined(__IOM8_H)
    282          		UCSRB&=~(1<<UDRIE);
    283          #else
    284          #error Module UART_ does not support the selected processor!
    285          #endif
    286          }
    287          #endif
    288          
    289          
    290          
    291          /**************************************************************
    292          
    293          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    294          void UART_WriteString(char* str)
    295          {
   \   __nearfunc void UART_WriteString(char *);
   \                     UART_WriteString:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000008   C007                       RJMP    ??UART_WriteString_0
    296          unsigned char temp;
    297          
    298          	while(*str)
    299          	{
    300          		temp=*str++;
   \                     ??UART_WriteString_1:
   \   0000000A   9611                       ADIW    R27 : R26,1
    301          		UART_WriteByte(temp);
   \   0000000C   2F08                       MOV     R16,R24
   \   0000000E   ....                       RCALL   UART_WriteByte
    302          #if defined(SEND_CRLF)
    303          		if(temp==10)
   \   00000010   308A                       CPI     R24,10
   \   00000012   F411                       BRNE    ??UART_WriteString_0
    304          			UART_WriteByte(13);
   \   00000014   E00D                       LDI     R16,13
   \   00000016   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteString_0:
   \   00000018   918C                       LD      R24,X
   \   0000001A   2388                       TST     R24
   \   0000001C   F7B1                       BRNE    ??UART_WriteString_1
    305          #endif
    306          	}
    307          }
   \   0000001E   9189                       LD      R24,Y+
   \   00000020   91A9                       LD      R26,Y+
   \   00000022   91B9                       LD      R27,Y+
   \   00000024   9508                       RET
    308          
    309          
    310          /**************************************************************
    311          
    312          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    313          void UART_WriteString_P(string* str)
    314          {
   \   __nearfunc void UART_WriteString_P(char const __flash *);
   \                     UART_WriteString_P:
   \   00000000   93AA                       ST      -Y,R26
   \   00000002   939A                       ST      -Y,R25
   \   00000004   938A                       ST      -Y,R24
   \   00000006   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000008   C007                       RJMP    ??UART_WriteString_P_0
    315          unsigned char temp;
    316          
    317          	while(*str)
    318          	{
    319          		temp=*str++;
   \                     ??UART_WriteString_P_1:
   \   0000000A   9601                       ADIW    R25 : R24,1
    320          		UART_WriteByte(temp);
   \   0000000C   2F0A                       MOV     R16,R26
   \   0000000E   ....                       RCALL   UART_WriteByte
    321          #if defined(SEND_CRLF)
    322          		if(temp==10)
   \   00000010   30AA                       CPI     R26,10
   \   00000012   F411                       BRNE    ??UART_WriteString_P_0
    323          			UART_WriteByte(13);
   \   00000014   E00D                       LDI     R16,13
   \   00000016   ....                       RCALL   UART_WriteByte
   \                     ??UART_WriteString_P_0:
   \   00000018   01FC                       MOVW    R31 : R30,R25 : R24
   \   0000001A   91A4                       LPM     R26,Z
   \   0000001C   23AA                       TST     R26
   \   0000001E   F7A9                       BRNE    ??UART_WriteString_P_1
    324          #endif
    325          	}
    326          }
   \   00000020   9189                       LD      R24,Y+
   \   00000022   9199                       LD      R25,Y+
   \   00000024   91A9                       LD      R26,Y+
   \   00000026   9508                       RET
    327          
    328          
    329          
    330          /**************************************************************
    331          
    332          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    333          void UART_WriteValueUnsignedChar(unsigned char Data)
    334          {
   \   __nearfunc void UART_WriteValueUnsignedChar(unsigned char);
   \                     UART_WriteValueUnsignedChar:
   \   00000000   938A                       ST      -Y,R24
   \   00000002   2F80                       MOV     R24,R16
    335          	if(Data>99)
   \   00000004   3684                       CPI     R24,100
   \   00000006   F030                       BRCS    ??UART_WriteValueUnsignedChar_0
    336          		UART_WriteByte(Data/100+'0');
   \   00000008   E644                       LDI     R20,100
   \   0000000A   ........                   CALL    ?UC_DIVMOD_L01
   \   0000000E   5D00                       SUBI    R16,208
   \   00000010   ....                       RCALL   UART_WriteByte
   \   00000012   C004                       RJMP    ??UART_WriteValueUnsignedChar_1
    337          	else
    338          		UART_WriteByte(' ');
   \                     ??UART_WriteValueUnsignedChar_0:
   \   00000014   E200                       LDI     R16,32
   \   00000016   ....                       RCALL   UART_WriteByte
    339          	if(Data>9)
   \   00000018   308A                       CPI     R24,10
   \   0000001A   F050                       BRCS    ??UART_WriteValueUnsignedChar_2
    340          		UART_WriteByte((Data/10)%10+'0');
   \                     ??UART_WriteValueUnsignedChar_1:
   \   0000001C   2F08                       MOV     R16,R24
   \   0000001E   E04A                       LDI     R20,10
   \   00000020   ........                   CALL    ?UC_DIVMOD_L01
   \   00000024   E04A                       LDI     R20,10
   \   00000026   ........                   CALL    ?UC_DIVMOD_L01
   \   0000002A   2F04                       MOV     R16,R20
   \   0000002C   5D00                       SUBI    R16,208
   \   0000002E   C001                       RJMP    ??UART_WriteValueUnsignedChar_3
    341          	else
    342          		UART_WriteByte(' ');
   \                     ??UART_WriteValueUnsignedChar_2:
   \   00000030   E200                       LDI     R16,32
   \                     ??UART_WriteValueUnsignedChar_3:
   \   00000032   ....                       RCALL   UART_WriteByte
    343          	UART_WriteByte(Data%10+'0');
   \   00000034   2F08                       MOV     R16,R24
   \   00000036   E04A                       LDI     R20,10
   \   00000038   ........                   CALL    ?UC_DIVMOD_L01
   \   0000003C   2F04                       MOV     R16,R20
   \   0000003E   5D00                       SUBI    R16,208
   \   00000040   ....                       RCALL   UART_WriteByte
    344          }
   \   00000042   9189                       LD      R24,Y+
   \   00000044   9508                       RET
    345          
    346          
    347          /**************************************************************
    348          
    349          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    350          void UART__WriteShort(unsigned short Data)
    351          {
   \   __nearfunc void UART__WriteShort(unsigned short);
   \                     UART__WriteShort:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   01C8                       MOVW    R25 : R24,R17 : R16
    352          	if(Data>9999)
   \   00000006   3180                       CPI     R24,16
   \   00000008   E207                       LDI     R16,39
   \   0000000A   0710                       CPC     R17,R16
   \   0000000C   F068                       BRCS    ??UART__WriteShort_0
    353          		UART_WriteByte((Data/10000)%10+'0');
   \   0000000E   2F08                       MOV     R16,R24
   \   00000010   E140                       LDI     R20,16
   \   00000012   E257                       LDI     R21,39
   \   00000014   ........                   CALL    ?US_DIVMOD_L02
   \   00000018   E04A                       LDI     R20,10
   \   0000001A   E050                       LDI     R21,0
   \   0000001C   ........                   CALL    ?US_DIVMOD_L02
   \   00000020   2F04                       MOV     R16,R20
   \   00000022   5D00                       SUBI    R16,208
   \   00000024   ....                       RCALL   UART_WriteByte
   \   00000026   C004                       RJMP    ??UART__WriteShort_1
    354          	if(Data>999)
   \                     ??UART__WriteShort_0:
   \   00000028   3E88                       CPI     R24,232
   \   0000002A   E003                       LDI     R16,3
   \   0000002C   0790                       CPC     R25,R16
   \   0000002E   F068                       BRCS    ??UART__WriteShort_2
    355          		UART_WriteByte((Data/1000)%10+'0');
   \                     ??UART__WriteShort_1:
   \   00000030   018C                       MOVW    R17 : R16,R25 : R24
   \   00000032   EE48                       LDI     R20,232
   \   00000034   E053                       LDI     R21,3
   \   00000036   ........                   CALL    ?US_DIVMOD_L02
   \   0000003A   E04A                       LDI     R20,10
   \   0000003C   E050                       LDI     R21,0
   \   0000003E   ........                   CALL    ?US_DIVMOD_L02
   \   00000042   2F04                       MOV     R16,R20
   \   00000044   5D00                       SUBI    R16,208
   \   00000046   ....                       RCALL   UART_WriteByte
   \   00000048   C004                       RJMP    ??UART__WriteShort_3
    356          	if(Data>99)
   \                     ??UART__WriteShort_2:
   \   0000004A   3684                       CPI     R24,100
   \   0000004C   E000                       LDI     R16,0
   \   0000004E   0790                       CPC     R25,R16
   \   00000050   F068                       BRCS    ??UART__WriteShort_4
    357          		UART_WriteByte((Data/100)%10+'0');
   \                     ??UART__WriteShort_3:
   \   00000052   018C                       MOVW    R17 : R16,R25 : R24
   \   00000054   E644                       LDI     R20,100
   \   00000056   E050                       LDI     R21,0
   \   00000058   ........                   CALL    ?US_DIVMOD_L02
   \   0000005C   E04A                       LDI     R20,10
   \   0000005E   E050                       LDI     R21,0
   \   00000060   ........                   CALL    ?US_DIVMOD_L02
   \   00000064   2F04                       MOV     R16,R20
   \   00000066   5D00                       SUBI    R16,208
   \   00000068   ....                       RCALL   UART_WriteByte
   \   0000006A   C003                       RJMP    ??UART__WriteShort_5
    358          	if(Data>9)
   \                     ??UART__WriteShort_4:
   \   0000006C   308A                       CPI     R24,10
   \   0000006E   0790                       CPC     R25,R16
   \   00000070   F060                       BRCS    ??UART__WriteShort_6
    359          		UART_WriteByte((Data/10)%10+'0');
   \                     ??UART__WriteShort_5:
   \   00000072   018C                       MOVW    R17 : R16,R25 : R24
   \   00000074   E04A                       LDI     R20,10
   \   00000076   E050                       LDI     R21,0
   \   00000078   ........                   CALL    ?US_DIVMOD_L02
   \   0000007C   E04A                       LDI     R20,10
   \   0000007E   E050                       LDI     R21,0
   \   00000080   ........                   CALL    ?US_DIVMOD_L02
   \   00000084   2F04                       MOV     R16,R20
   \   00000086   5D00                       SUBI    R16,208
   \   00000088   ....                       RCALL   UART_WriteByte
    360          	UART_WriteByte(Data%10+'0');
   \                     ??UART__WriteShort_6:
   \   0000008A   018C                       MOVW    R17 : R16,R25 : R24
   \   0000008C   E04A                       LDI     R20,10
   \   0000008E   E050                       LDI     R21,0
   \   00000090   ........                   CALL    ?US_DIVMOD_L02
   \   00000094   2F04                       MOV     R16,R20
   \   00000096   5D00                       SUBI    R16,208
   \   00000098   ....                       RCALL   UART_WriteByte
    361          }
   \   0000009A   9189                       LD      R24,Y+
   \   0000009C   9199                       LD      R25,Y+
   \   0000009E   9508                       RET
    362          
    363          
    364          /**************************************************************
    365          
    366          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    367          void UART__WriteHex(unsigned char Data)
    368          {
   \   __nearfunc void UART__WriteHex(unsigned char);
   \                     UART__WriteHex:
   \   00000000   938A                       ST      -Y,R24
   \   00000002   2F80                       MOV     R24,R16
    369          	if((Data>>4)>9)
   \   00000004   9502                       SWAP    R16
   \   00000006   700F                       ANDI    R16,0x0F
   \   00000008   300A                       CPI     R16,10
   \   0000000A   F010                       BRCS    ??UART__WriteHex_0
    370          		UART_WriteByte((Data>>4)+'A'-10);
   \   0000000C   5C09                       SUBI    R16,201
   \   0000000E   C001                       RJMP    ??UART__WriteHex_1
    371          	else
    372          		UART_WriteByte((Data>>4)+'0');
   \                     ??UART__WriteHex_0:
   \   00000010   5D00                       SUBI    R16,208
   \                     ??UART__WriteHex_1:
   \   00000012   ....                       RCALL   UART_WriteByte
    373          	if((Data&0x0f)>9)
   \   00000014   2F08                       MOV     R16,R24
   \   00000016   700F                       ANDI    R16,0x0F
   \   00000018   300A                       CPI     R16,10
   \   0000001A   F010                       BRCS    ??UART__WriteHex_2
    374          		UART_WriteByte((Data&0x0f)+'A'-10);
   \   0000001C   5C09                       SUBI    R16,201
   \   0000001E   C001                       RJMP    ??UART__WriteHex_3
    375          	else
    376          		UART_WriteByte((Data&0x0f)+'0');
   \                     ??UART__WriteHex_2:
   \   00000020   5D00                       SUBI    R16,208
   \                     ??UART__WriteHex_3:
   \   00000022   ....                       RCALL   UART_WriteByte
    377          }
   \   00000024   9189                       LD      R24,Y+
   \   00000026   9508                       RET
    378          
    379          
    380          /**************************************************************
    381          
    382          **************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    383          void Flush(void)
    384          {
   \   __nearfunc void Flush();
   \                     Flush:
   \   00000000   C001                       RJMP    ??Flush_0
    385          	while(UART_BytesReady())
    386          		UART_ReadByte();
   \                     ??Flush_1:
   \   00000002   ....                       RCALL   UART_ReadByte
   \                     ??Flush_0:
   \   00000004   995F                       SBIC    0x0B,0x07
   \   00000006   CFFD                       RJMP    ??Flush_1
    387          }
   \   00000008   9508                       RET

   Maximum stack usage in bytes:

     Function                     CSTACK  RSTACK
     --------                     ------  ------
     Flush                            0       2 
       -> UART_ReadByte               0       2 
     UART_BytesReady                  0       0 
     UART_Init                        0       0 
     UART_ReadByte                    0       0 
     UART_ReadBytes                   3       2 
       -> UART_ReadByte               3       2 
     UART_SetBaudrate                 0       0 
     UART_WriteByte                   0       0 
     UART_WriteBytes                  3       2 
       -> UART_WriteByte              3       2 
     UART_WriteString                 3       2 
       -> UART_WriteByte              3       2 
       -> UART_WriteByte              3       2 
     UART_WriteString_P               3       2 
       -> UART_WriteByte              3       2 
       -> UART_WriteByte              3       2 
     UART_WriteValueUnsignedChar      1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
     UART__WriteHex                   1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
       -> UART_WriteByte              1       2 
     UART__WriteShort                 2       2 
       -> UART_WriteByte              2       2 
       -> UART_WriteByte              2       2 
       -> UART_WriteByte              2       2 
       -> UART_WriteByte              2       2 
       -> UART_WriteByte              2       2 
     getc                             0       2 
       -> UART_ReadByte               0       2 
     putc                             0       2 
       -> UART_WriteByte              0       2 
     putchar                          0       2 
       -> UART_WriteByte              0       2 

 
      5 bytes in segment ABSOLUTE
    478 bytes in segment CODE
 
    478 bytes of CODE memory
      0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
