##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:56:12 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\mai #
#                    n.c                                                     #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\T #
#                    estApps\NetworkTester\main.c                            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\main.lst                                      #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\main.r90                                       #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <Kernel/kernel.h>

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB;
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB;
   \                     _A_PORTB:
   \   00000000                              DS 1
      2          #include <Network/Network.h>
      3          #include <Peripherals/UART.h>
      4          #include <Peripherals/SPI.h>
      5          
      6          

   \                                 In segment NEAR_F, align 1, keep-with-next
      7          string txt[]="Hello\n";
   \   char const __flash txt[7];
   \                     txt:
   \   00000000   65486C6C0A6F               DB "Hello\012"
   \            00          
      8          string txtGo[]="Go\n";
      9          string txtRevision[]="NIC revision: ";
   \   char const __flash txtRevision[15];
   \                     txtRevision:
   \   00000007   494E20436572               DB "NIC revision: "
   \            697669736E6F
   \            203A00      

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   char const __flash txtGo[4];
   \                     txtGo:
   \   00000000   6F47000A                   DB "Go\012"
     10          
     11          
     12          

   \                                 In segment CODE, align 2, keep-with-next
     13          void send()
     14          {
     15          	YieldBegin
   \   __nearfunc void send();
   \                     send:
   \   00000000   9100....                   LDS     R16,??__state
   \   00000004   2300                       TST     R16
   \   00000006   F451                       BRNE    ??send_0
     16          	YieldWait(1000)
   \   00000008   EE08                       LDI     R16,232
   \   0000000A   E013                       LDI     R17,3
   \   0000000C   ........                   CALL    Kernel_Sleep
   \   00000010   ....                       LDI     R30,LOW(??__state)
   \   00000012   ....                       LDI     R31,(??__state) >> 8
   \   00000014   8100                       LD      R16,Z
   \   00000016   9503                       INC     R16
   \   00000018   8300                       ST      Z,R16
   \   0000001A   9508                       RET
   \                     ??send_0:
   \   0000001C   3001                       CPI     R16,1
   \   0000001E   F491                       BRNE    ??send_1
     17          	IP_Send(Num2IP(192,168,0,1), IP_PROTOCOL_UDP, globalBuffer, 40);
   \   00000020   E031                       LDI     R19,1
   \   00000022   E020                       LDI     R18,0
   \   00000024   EA18                       LDI     R17,168
   \   00000026   EC00                       LDI     R16,192
   \   00000028   ........                   CALL    Num2IP
   \   0000002C   E248                       LDI     R20,40
   \   0000002E   E050                       LDI     R21,0
   \   00000030   935A                       ST      -Y,R21
   \   00000032   934A                       ST      -Y,R20
   \   00000034   ....                       LDI     R22,LOW(globalBuffer)
   \   00000036   ....                       LDI     R23,(globalBuffer) >> 8
   \   00000038   E141                       LDI     R20,17
   \   0000003A   ........                   CALL    IP_Send
     18          	YieldEnd
   \   0000003E   E000                       LDI     R16,0
   \   00000040   9300....                   STS     ??__state,R16
   \                     ??send_1:
   \   00000044   9508                       RET
     19          }

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near __state;
   \                     ??__state:
   \   00000000                              DS 1
     20          

   \                                 In segment CODE, align 2, keep-with-next
     21          void dummy()
     22          {
     23          
     24          }
   \   __nearfunc void dummy();
   \                     dummy:
   \   00000000   9508                       RET
     25          

   \                                 In segment CODE, align 2, keep-with-next
     26          void main()
     27          {
     28          	DDRB=0xb0;
   \   __nearfunc void main();
   \                     main:
   \   00000000   EB00                       LDI     R16,176
   \   00000002   BB07                       OUT     0x17,R16
     29          	PORTB|=0x10;
   \   00000004   9AC4                       SBI     0x18,0x04
     30          
     31          	Kernel_InitScheduler();
   \   00000006   ........                   CALL    Kernel_InitScheduler
     32          
     33          	UART_Init(11);
   \   0000000A   E00B                       LDI     R16,11
   \   0000000C   E010                       LDI     R17,0
   \   0000000E   ........                   CALL    UART_Init
     34          	SPI_Init(SPI_PRESCALER_32);
   \   00000012   E006                       LDI     R16,6
   \   00000014   ........                   CALL    SPI_Init
     35          
     36          	NIC_Init(null);
   \   00000018   E000                       LDI     R16,0
   \   0000001A   E010                       LDI     R17,0
   \   0000001C   ........                   CALL    NIC_Init
     37          
     38          	UART_WriteString_P(txtRevision);
   \   00000020   ....                       LDI     R16,LOW(txtRevision)
   \   00000022   ....                       LDI     R17,(txtRevision) >> 8
   \   00000024   ........                   CALL    UART_WriteString_P
     39          	UART_WriteByte(GetVersion() + '0');
   \   00000028   ........                   CALL    GetVersion
   \   0000002C   5D00                       SUBI    R16,208
   \   0000002E   ........                   CALL    UART_WriteByte
     40          	UART_WriteByte(10);
   \   00000032   E00A                       LDI     R16,10
   \   00000034   ........                   CALL    UART_WriteByte
     41          	UART_WriteByte(13);
   \   00000038   E00D                       LDI     R16,13
   \   0000003A   ........                   CALL    UART_WriteByte
     42          	
     43          	UART_WriteString_P(txt);
   \   0000003E   ....                       LDI     R16,LOW(txt)
   \   00000040   ....                       LDI     R17,(txt) >> 8
   \   00000042   ........                   CALL    UART_WriteString_P
     44          /*
     45          	Network_Init(192, 168, 0, 70);
     46          
     47          	UART_WriteString_P(txtGo);
     48          
     49          	Kernel_CreateTask(send);
     50          	*/
     51          	
     52          	Kernel_CreateTask(dummy);
   \   00000046   ....                       LDI     R16,LOW(dummy/2)
   \   00000048   ....                       LDI     R17,(dummy/2) >> 8
   \   0000004A   ........                   CALL    Kernel_CreateTask
     53          	
     54          	Kernel_RunScheduler();
   \   0000004E   ........                   JMP     Kernel_RunScheduler
     55          }

   Maximum stack usage in bytes:

     Function                   CSTACK  RSTACK
     --------                   ------  ------
     dummy                          0       0 
     main                           0       2 
       -> Kernel_InitScheduler      0       2 
       -> UART_Init                 0       2 
       -> SPI_Init                  0       2 
       -> NIC_Init                  0       2 
       -> UART_WriteString_P        0       2 
       -> GetVersion                0       2 
       -> UART_WriteByte            0       2 
       -> UART_WriteByte            0       2 
       -> UART_WriteByte            0       2 
       -> UART_WriteString_P        0       2 
       -> Kernel_CreateTask         0       2 
       -> Kernel_RunScheduler       0       2 
     send                           2       2 
       -> Kernel_Sleep              0       2 
       -> Num2IP                    0       2 
       -> IP_Send                   2       2 

 
      2 bytes in segment ABSOLUTE
    154 bytes in segment CODE
      6 bytes in segment INITTAB
     26 bytes in segment NEAR_F
      1 byte  in segment NEAR_Z
 
    180 bytes of CODE memory (+ 6 bytes shared)
      1 byte  of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
