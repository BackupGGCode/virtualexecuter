//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Mar/2008  16:57:10 /
// IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  f:\Projects\[Drivers]\C\MROS\Terminal\Terminal.c       /
//    Command line =  --string_literals_in_flash                             /
//                    f:\Projects\[Drivers]\C\MROS\Terminal\Terminal.c       /
//                    --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps /
//                    \CommanderTester\Release\Obj\ -D NDEBUG -lC            /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApp /
//                    s\CommanderTester\Release\List\                        /
//                    --initializers_in_flash -s9 -DENABLE_BIT_DEFINITIONS   /
//                    -e -I f:\Projects\[Drivers]\C\mros\TestApps\CommanderT /
//                    ester\ -I f:\Projects\[Drivers]\C\mros\ -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024           /
//    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\Terminal.s90                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Terminal

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R12_is_cg_reg
        EXTERN ?Register_R13_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg

        PUBLIC ListFiles
        FUNCTION ListFiles,021603H
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC LoadFileToDisc
        FUNCTION LoadFileToDisc,021603H
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC PrintFile
        FUNCTION PrintFile,021603H
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC RunProgram
        FUNCTION RunProgram,021603H
        LOCFRAME CSTACK, 16, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Terminal_Init
        FUNCTION Terminal_Init,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC commands
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN Kernel_CreateTask
        FUNCTION Kernel_CreateTask,0202H
        EXTERN FileStore_GetNextFileEntry
        FUNCTION FileStore_GetNextFileEntry,0202H
        EXTERN UART_WriteString_P
        FUNCTION UART_WriteString_P,0202H
        EXTERN FileStore_GetFileName
        FUNCTION FileStore_GetFileName,0202H
        EXTERN UART_WriteString
        FUNCTION UART_WriteString,0202H
        EXTERN UART_WriteByte
        FUNCTION UART_WriteByte,0202H
        EXTERN UART_WriteValueUnsigned
        FUNCTION UART_WriteValueUnsigned,0202H
        EXTERN GetNextWord
        FUNCTION GetNextWord,0202H
        EXTERN FileStore_OpenFile
        FUNCTION FileStore_OpenFile,0202H
        EXTERN FileStore_ReadBytes
        FUNCTION FileStore_ReadBytes,0202H
        EXTERN UART_WriteBytes
        FUNCTION UART_WriteBytes,0202H
        EXTERN ReadInteger
        FUNCTION ReadInteger,0202H
        EXTERN UART_ReadBytes
        FUNCTION UART_ReadBytes,0202H
        EXTERN InternalEEPROM_WriteBytes
        FUNCTION InternalEEPROM_WriteBytes,0202H
        EXTERN Commander_Run
        FUNCTION Commander_Run,0600H

// f:\Projects\[Drivers]\C\MROS\Terminal\Terminal.c
//    1 #include <Globals.h>
//    2 #include "Config.h"
//    3 #include <Kernel/Kernel.h>
//    4 #include <Peripherals/UART.h>
//    5 #include <Commander/Commander.h>
//    6 #include <strings.h>
//    7 #include <FileStore/FileStore.h>
//    8 #include <FileStore/InternalEEPROM.h>
//    9 

        RSEG CODE:CODE:NOROOT(1)
//   10 void Terminal_Init()
Terminal_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Terminal_Init
//   11 {
//   12 	Kernel_CreateTask(Commander_Run);
        FUNCALL Terminal_Init, Kernel_CreateTask
        LOCFRAME RSTACK, 2, STACK
        LDI     R16, LOW(Commander_Run/2)
        LDI     R17, (Commander_Run/2) >> 8
        JMP     Kernel_CreateTask
        CFI EndBlock cfiBlock0
//   13 }
//   14 

        RSEG CODE:CODE:NOROOT(1)
//   15 void ListFiles(char* line)
ListFiles:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ListFiles
//   16 {
        FUNCALL ListFiles, FileStore_GetNextFileEntry
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString_P
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, FileStore_GetFileName
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteByte
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteValueUnsigned
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString_P
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, FileStore_GetNextFileEntry
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString_P
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteValueUnsigned
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString_P
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteValueUnsigned
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ListFiles, UART_WriteString_P
        LOCFRAME CSTACK, 72, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        SBIW    R29:R28, 63
        CFI CFA_Y Y+69
        SBIW    R29:R28, 3
        CFI CFA_Y Y+72
//   17 	fsFile f;
//   18 	char name[50];
//   19 	unsigned long totalBytes=0;
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
//   20 	unsigned short totalFiles=0;
        CLR     R4
        CLR     R5
//   21 	
//   22 	if(FileStore_GetNextFileEntry(&f, true) == false)
        LDI     R18, 1
        MOVW    R17:R16, R29:R28
        CALL    FileStore_GetNextFileEntry
        TST     R16
        BRNE    ??ListFiles_0
//   23 	{
//   24 		UART_WriteString_P("No files\n");
        LDI     R16, LOW(`?<Constant "No files\\n">`)
        LDI     R17, (`?<Constant "No files\\n">`) >> 8
        CALL    UART_WriteString_P
        RJMP    ??ListFiles_1
//   25 	}
//   26 	else
//   27 	{
//   28 		do
//   29 		{
//   30 			FileStore_GetFileName(&f, name, 50);
??ListFiles_0:
        LDI     R20, 50
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        CALL    FileStore_GetFileName
//   31 			UART_WriteString(name);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
        CALL    UART_WriteString
//   32 			UART_WriteByte(' ');
        LDI     R16, 32
        CALL    UART_WriteByte
//   33 			UART_WriteValueUnsigned(f.size);
        LDD     R16, Y+8
        LDD     R17, Y+9
        LDD     R18, Y+10
        LDD     R19, Y+11
        CALL    UART_WriteValueUnsigned
//   34 			UART_WriteString_P("\n");
        LDI     R16, LOW((`?<Constant "No files\\n">` + 10))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 10))
        CALL    UART_WriteString_P
//   35 			totalBytes += f.size;
        LDD     R16, Y+8
        LDD     R17, Y+9
        LDD     R18, Y+10
        LDD     R19, Y+11
        ADD     R24, R16
        ADC     R25, R17
        ADC     R26, R18
        ADC     R27, R19
//   36 			totalFiles++;
        LDI     R16, 1
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
//   37 		}	while(FileStore_GetNextFileEntry(&f, false));
        LDI     R18, 0
        MOVW    R17:R16, R29:R28
        CALL    FileStore_GetNextFileEntry
        TST     R16
        BRNE    ??ListFiles_0
//   38 	}
//   39 	
//   40 	UART_WriteString_P("\n");
??ListFiles_1:
        LDI     R16, LOW((`?<Constant "No files\\n">` + 10))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 10))
        CALL    UART_WriteString_P
//   41 	UART_WriteValueUnsigned(totalFiles);
        MOVW    R17:R16, R5:R4
        LDI     R18, 0
        LDI     R19, 0
        CALL    UART_WriteValueUnsigned
//   42 	UART_WriteString_P(" files ");
        LDI     R16, LOW((`?<Constant "No files\\n">` + 12))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 12))
        CALL    UART_WriteString_P
//   43 	UART_WriteValueUnsigned(totalBytes);
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    UART_WriteValueUnsigned
//   44 	UART_WriteString_P(" bytes");
        LDI     R16, LOW((`?<Constant "No files\\n">` + 20))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 20))
        CALL    UART_WriteString_P
//   45 }
        ADIW    R29:R28, 63
        CFI CFA_Y Y+9
        ADIW    R29:R28, 3
        CFI CFA_Y Y+6
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+5
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+4
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+3
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+2
        LD      R4, Y+
        CFI R4 SameValue
        CFI CFA_Y Y+1
        LD      R5, Y+
        CFI R5 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock1
//   46 

        RSEG CODE:CODE:NOROOT(1)
//   47 void PrintFile(char* line)
PrintFile:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function PrintFile
//   48 {
        FUNCALL PrintFile, GetNextWord
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL PrintFile, FileStore_OpenFile
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL PrintFile, UART_WriteString_P
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL PrintFile, FileStore_ReadBytes
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL PrintFile, UART_WriteBytes
        LOCFRAME CSTACK, 37, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 36
        CFI CFA_Y Y+37
//   49 	fsFile f;
//   50 	unsigned char bytes;
//   51 	unsigned char buf[20];
//   52 	
//   53 	if(FileStore_OpenFile(GetNextWord(line), &f) == false)
        CALL    GetNextWord
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 255
        CALL    FileStore_OpenFile
        TST     R16
        BRNE    ??PrintFile_0
//   54 	{
//   55 		UART_WriteString_P("File not found");
        LDI     R16, LOW(`?<Constant "File not found">`)
        LDI     R17, (`?<Constant "File not found">`) >> 8
        CALL    UART_WriteString_P
//   56 		return;
        RJMP    ??PrintFile_1
//   57 	}
//   58 	
//   59 	do
//   60 	{
//   61 		bytes = FileStore_ReadBytes(&f, buf, 20);
??PrintFile_0:
        LDI     R20, 20
        LDI     R21, 0
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 236
        SBCI    R17, 255
        CALL    FileStore_ReadBytes
        MOV     R24, R16
//   62 		UART_WriteBytes(buf, bytes);
        MOV     R18, R16
        MOVW    R17:R16, R29:R28
        CALL    UART_WriteBytes
//   63 	} while(bytes == 20);
        CPI     R24, 20
        BREQ    ??PrintFile_0
??PrintFile_1:
        ADIW    R29:R28, 36
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock2
//   64 }
//   65 

        RSEG CODE:CODE:NOROOT(1)
//   66 void RunProgram(char* line)
RunProgram:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function RunProgram
//   67 {
        FUNCALL RunProgram, GetNextWord
        LOCFRAME CSTACK, 16, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL RunProgram, FileStore_OpenFile
        LOCFRAME CSTACK, 16, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL RunProgram, UART_WriteString_P
        LOCFRAME CSTACK, 16, STACK
        LOCFRAME RSTACK, 2, STACK
        SBIW    R29:R28, 16
        CFI CFA_Y Y+16
//   68 	fsFile f;
//   69 	
//   70 	if(FileStore_OpenFile(GetNextWord(line), &f) == false)
        CALL    GetNextWord
        MOVW    R19:R18, R29:R28
        CALL    FileStore_OpenFile
        TST     R16
        BRNE    ??RunProgram_0
//   71 	{
//   72 		UART_WriteString_P("File not found");
        LDI     R16, LOW(`?<Constant "File not found">`)
        LDI     R17, (`?<Constant "File not found">`) >> 8
        CALL    UART_WriteString_P
//   73 		return;
??RunProgram_0:
        ADIW    R29:R28, 16
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock3
//   74 	}
//   75 	
//   76 	// pass it on to the VX loader
//   77 }
//   78 
//   79 #define BLOCK_SIZE 16
//   80 #define DISC_SIZE 1024

        RSEG CODE:CODE:NOROOT(1)
//   81 void LoadFileToDisc(char* line)
LoadFileToDisc:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function LoadFileToDisc
//   82 {
        FUNCALL LoadFileToDisc, GetNextWord
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, ReadInteger
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, GetNextWord
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, ReadInteger
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteString_P
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteByte
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteByte
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteValueUnsigned
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteString_P
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteByte
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_ReadBytes
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, InternalEEPROM_WriteBytes
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL LoadFileToDisc, UART_WriteByte
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R13
        CFI R13 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R12
        CFI R12 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R11
        CFI R11 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R10
        CFI R10 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R9
        CFI R9 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R8
        CFI R8 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        SBIW    R29:R28, 16
        CFI CFA_Y Y+30
//   83 unsigned char buf[BLOCK_SIZE];
//   84 unsigned char length;
//   85 unsigned long blockSize, size, current=0;
        CLR     R8
        CLR     R9
        CLR     R10
        CLR     R11
//   86 char* word;
//   87 
//   88 	word = GetNextWord(line);
        CALL    GetNextWord
        MOVW    R25:R24, R17:R16
//   89 	size = ReadInteger(word);
        CALL    ReadInteger
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//   90 	word = GetNextWord(word);
        MOVW    R17:R16, R25:R24
        CALL    GetNextWord
//   91 	blockSize = ReadInteger(word);
        CALL    ReadInteger
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   92 	
//   93 	if(blockSize > BLOCK_SIZE)
        CPI     R16, 17
        CPC     R25, R8
        CPC     R26, R8
        CPC     R27, R8
        BRCS    ??LoadFileToDisc_0
//   94 	{
//   95 		blockSize = BLOCK_SIZE;
        LDI     R24, 16
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
//   96 	}
//   97 	
//   98 	if(size > DISC_SIZE)
??LoadFileToDisc_0:
        LDI     R16, 1
        CP      R4, R16
        LDI     R16, 4
        CPC     R5, R16
        CPC     R6, R8
        CPC     R7, R8
        BRCS    ??LoadFileToDisc_1
//   99 	{
//  100 		UART_WriteString_P("N 0\n");
        LDI     R16, LOW((`?<Constant "No files\\n">` + 27))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 27))
        CALL    UART_WriteString_P
//  101 		return;
        RJMP    ??LoadFileToDisc_2
//  102 	}
//  103 	else
//  104 	{
//  105 		UART_WriteByte('A');
??LoadFileToDisc_1:
        LDI     R16, 65
        CALL    UART_WriteByte
//  106 		UART_WriteByte(' ');
        LDI     R16, 32
        CALL    UART_WriteByte
//  107 		UART_WriteValueUnsigned(blockSize);
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    UART_WriteValueUnsigned
//  108 		UART_WriteString_P("\n");
        LDI     R16, LOW((`?<Constant "No files\\n">` + 10))
        LDI     R17, HIGH((`?<Constant "No files\\n">` + 10))
        CALL    UART_WriteString_P
        MOV     R16, R4
        OR      R16, R5
        OR      R16, R6
        OR      R16, R7
        BRNE    ??LoadFileToDisc_3
//  109 	}
//  110 	
//  111 	while(current < size)
//  112 	{
//  113 		if((current + blockSize) >= size)
//  114 		{
//  115 			length = size - current;
//  116 		}
//  117 		else
//  118 		{
//  119 			length = blockSize;
//  120 		}
//  121 		UART_ReadBytes(buf, length);
//  122 		InternalEEPROM_WriteBytes(current, buf, length);
//  123 		UART_WriteByte('*');
//  124 		current += length;
//  125 	}
//  126 	UART_WriteByte('!');
??LoadFileToDisc_4:
        LDI     R16, 33
        CALL    UART_WriteByte
//  127 }
??LoadFileToDisc_2:
        ADIW    R29:R28, 16
        CFI CFA_Y Y+14
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+13
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+12
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+11
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+10
        LD      R4, Y+
        CFI R4 SameValue
        CFI CFA_Y Y+9
        LD      R5, Y+
        CFI R5 SameValue
        CFI CFA_Y Y+8
        LD      R6, Y+
        CFI R6 SameValue
        CFI CFA_Y Y+7
        LD      R7, Y+
        CFI R7 SameValue
        CFI CFA_Y Y+6
        LD      R8, Y+
        CFI R8 SameValue
        CFI CFA_Y Y+5
        LD      R9, Y+
        CFI R9 SameValue
        CFI CFA_Y Y+4
        LD      R10, Y+
        CFI R10 SameValue
        CFI CFA_Y Y+3
        LD      R11, Y+
        CFI R11 SameValue
        CFI CFA_Y Y+2
        LD      R12, Y+
        CFI R12 SameValue
        CFI CFA_Y Y+1
        LD      R13, Y+
        CFI R13 SameValue
        CFI CFA_Y Y+0
        RET
        CFI R24 Frame(CFA_Y, -14)
        CFI R25 Frame(CFA_Y, -13)
        CFI R26 Frame(CFA_Y, -12)
        CFI R27 Frame(CFA_Y, -11)
        CFI R4 Frame(CFA_Y, -10)
        CFI R5 Frame(CFA_Y, -9)
        CFI R6 Frame(CFA_Y, -8)
        CFI R7 Frame(CFA_Y, -7)
        CFI R8 Frame(CFA_Y, -6)
        CFI R9 Frame(CFA_Y, -5)
        CFI R10 Frame(CFA_Y, -4)
        CFI R11 Frame(CFA_Y, -3)
        CFI R12 Frame(CFA_Y, -2)
        CFI R13 Frame(CFA_Y, -1)
        CFI CFA_Y Y+30
??LoadFileToDisc_5:
        MOV     R12, R24
??LoadFileToDisc_6:
        MOV     R18, R12
        MOVW    R17:R16, R29:R28
        CALL    UART_ReadBytes
        MOV     R22, R12
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        CALL    InternalEEPROM_WriteBytes
        LDI     R16, 42
        CALL    UART_WriteByte
        CLR     R13
        ADD     R8, R12
        ADC     R9, R13
        ADC     R10, R13
        ADC     R11, R13
??LoadFileToDisc_3:
        CP      R8, R4
        CPC     R9, R5
        CPC     R10, R6
        CPC     R11, R7
        BRCC    ??LoadFileToDisc_4
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        ADD     R16, R8
        ADC     R17, R9
        ADC     R18, R10
        ADC     R19, R11
        CP      R16, R4
        CPC     R17, R5
        CPC     R18, R6
        CPC     R19, R7
        BRCS    ??LoadFileToDisc_5
        MOV     R12, R4
        SUB     R12, R8
        RJMP    ??LoadFileToDisc_6
        CFI EndBlock cfiBlock4

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "ls">`:
        DB "ls"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "prn">`:
        DB "prn"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "run">`:
        DB "run"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "load">`:
        DB "load"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "No files\\n">`:
        DB "No files\012"
        DB "\012"
        DB " files "
        DB " bytes"
        DB "N 0\012"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "File not found">`:
        DB "File not found"
//  128 

        RSEG NEAR_F:CODE:NOROOT(0)
//  129 __flash command commands[] = {{"ls", ListFiles}, {"prn", PrintFile}, {"run", RunProgram}, {"load", LoadFileToDisc}};
commands:
        DW `?<Constant "ls">`, ListFiles/2, `?<Constant "prn">`, PrintFile/2
        DW `?<Constant "run">`, RunProgram/2, `?<Constant "load">`
        DW LoadFileToDisc/2

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
// 562 bytes in segment CODE
//  79 bytes in segment NEAR_F
// 
// 641 bytes of CODE memory
//
//Errors: none
//Warnings: none
