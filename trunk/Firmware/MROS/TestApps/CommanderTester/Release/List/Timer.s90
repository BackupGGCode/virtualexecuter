//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Mar/2008  16:57:11 /
// IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c            /
//    Command line =  --string_literals_in_flash                             /
//                    f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c --cpu=m32  /
//                    -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\Commander /
//                    Tester\Release\Obj\ -D NDEBUG -lC                      /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApp /
//                    s\CommanderTester\Release\List\                        /
//                    --initializers_in_flash -s9 -DENABLE_BIT_DEFINITIONS   /
//                    -e -I f:\Projects\[Drivers]\C\mros\TestApps\CommanderT /
//                    ester\ -I f:\Projects\[Drivers]\C\mros\ -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024           /
//    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\Timer.s90                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Timer

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??Kernel_TimerInterruptHandler??INTVEC 40`
        PUBLIC Kernel_Delay
        FUNCTION Kernel_Delay,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Kernel_InitTimer
        FUNCTION Kernel_InitTimer,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Kernel_TimerInterruptHandler
        FUNCTION Kernel_TimerInterruptHandler,041233H
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_OCR0
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon1
        
Kernel_TimerInterruptHandler SYMBOL "Kernel_TimerInterruptHandler"
`??Kernel_TimerInterruptHandler??INTVEC 40` SYMBOL "??INTVEC 40", Kernel_TimerInterruptHandler

// f:\Projects\[Drivers]\C\MROS\Kernel\Timer.c
//    1 #include "Timer.h"

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,05cH
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS 1
//    2 #include "KernelInternals.h"
//    3 
//    4 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    5 volatile static unsigned short timerTicks = 0;
timerTicks:
        DS 2
        DS 2
//    6 
//    7 static void (*timerEventHandler)(void) = null;
//    8 
//    9 

        RSEG CODE:CODE:NOROOT(1)
//   10 void Kernel_InitTimer(void (*handler)(void))
Kernel_InitTimer:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Kernel_InitTimer
//   11 {
//   12 #if defined(__IOM8_H)
//   13 	TCCR0 = TIMER_PRESCALER;
//   14 	TCNT0 = (unsigned char)(0 - TIMER_RELOAD);
//   15 	TIMSK |= (1 << TOIE0);
//   16 #elif defined(__IOM32_H) || defined(__IOM162_H)
//   17 	TCCR0 = (1<<WGM01) | TIMER_PRESCALER;
        LDI     R18, 11
        OUT     0x33, R18
//   18 	OCR0 = TIMER_RELOAD;
        LDI     R18, 172
        OUT     0x3C, R18
//   19 	TIMSK |= (1 << OCIE0);
        IN      R18, 0x39
        ORI     R18, 0x02
        OUT     0x39, R18
//   20 #elif defined(__IOM128_H) || defined(__IOM64_H)
//   21 	TCCR0 = (1 << WGM01) | TIMER_PRESCALER;
//   22 	OCR0 = TIMER_RELOAD;
//   23 	TIMSK |= (1 << OCIE0);
//   24 #elif defined(__IOM168_H)
//   25 	TCCR0A = (1<<WGM01);
//   26 	TCCR0B = TIMER_PRESCALER;
//   27 	OCR0A = TIMER_RELOAD;
//   28 	TIMSK0 |= (1 << OCIE0A);
//   29 #else
//   30 #error MROS_Kernel_Timer does not support the selected processor!
//   31 #endif
//   32 	timerEventHandler = handler;
        LDI     R30, LOW(timerTicks)
        LDI     R31, (timerTicks) >> 8
        STD     Z+2, R16
        STD     Z+3, R17
//   33 }
        RET
        CFI EndBlock cfiBlock0
//   34 
//   35 

        RSEG CODE:CODE:NOROOT(1)
//   36 void Kernel_Delay(unsigned short time)
Kernel_Delay:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Kernel_Delay
//   37 {
//   38 #if TASKER_DEBUG_LEVEL > 0
//   39 	Kernel_DebuggerEvent(DEBUG_EVENT_DELAY, null, DEBUG_STATUS_OK, time);
//   40 #endif
//   41 
//   42 	Critical();
        CLI
//   43 	
//   44 	timerTicks = time;
        LDI     R30, LOW(timerTicks)
        LDI     R31, (timerTicks) >> 8
        ST      Z, R16
        STD     Z+1, R17
        RJMP    ??Kernel_Delay_0
//   45 	while(timerTicks > 0)
//   46 	{
//   47 		NonCritical();
//   48 		__no_operation();
??Kernel_Delay_1:
        NOP
//   49 		Critical();
        CLI
//   50 	}
??Kernel_Delay_0:
        LD      R16, Z
        LDD     R17, Z+1
        OR      R16, R17
        SEI
        BRNE    ??Kernel_Delay_1
//   51 	NonCritical();
//   52 }
        RET
        CFI EndBlock cfiBlock1
//   53 
//   54 
//   55 #if defined(__IOM8_H)
//   56 #pragma vector=TIMER0_OVF_vect
//   57 #elif defined(__IOM32_H) || defined(__IOM128_H) || defined(__IOM64_H) || defined(__IOM162_H)
//   58 #pragma vector=TIMER0_COMP_vect
//   59 #elif defined(__IOM168_H)
//   60 #pragma vector=TIMER0_COMPA_vect
//   61 #else
//   62 #error MROS_Kernel_Timer does not support the selected processor!
//   63 #endif

        RSEG CODE:CODE:NOROOT(1)
//   64 __interrupt void Kernel_TimerInterruptHandler(void)
Kernel_TimerInterruptHandler:
        CFI Block cfiBlock2 Using cfiCommon1
        CFI Function Kernel_TimerInterruptHandler
//   65 {
        FUNCALL Kernel_TimerInterruptHandler
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R31
        CFI R31 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R30
        CFI R30 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R3
        CFI R3 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R2
        CFI R2 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R1
        CFI R1 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R0
        CFI R0 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R23
        CFI R23 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        ST      -Y, R22
        CFI R22 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
        ST      -Y, R21
        CFI R21 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
        ST      -Y, R20
        CFI R20 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
        ST      -Y, R19
        CFI R19 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
        ST      -Y, R18
        CFI R18 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
        ST      -Y, R17
        CFI R17 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
        ST      -Y, R16
        CFI R16 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
        IN      R24, 0x3F
//   66 #if defined(__IOM8_H)
//   67 	TCNT0 = (unsigned char)(0-TIMER_RELOAD);
//   68 #endif
//   69 
//   70 	if(timerTicks > 0)
        LDI     R30, LOW(timerTicks)
        LDI     R31, (timerTicks) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        OR      R16, R17
        BREQ    ??Kernel_TimerInterruptHandler_0
//   71 	{
//   72 		timerTicks--;
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 1
        SBCI    R17, 0
        ST      Z, R16
        STD     Z+1, R17
//   73 	}
//   74 
//   75 	if(timerEventHandler != null)
??Kernel_TimerInterruptHandler_0:
        LDD     R16, Z+2
        LDD     R17, Z+3
        LDI     R18, 0
        CPI     R16, 0
        CPC     R17, R18
        BREQ    ??Kernel_TimerInterruptHandler_1
//   76 	{
//   77 		timerEventHandler();
        MOVW    R31:R30, R17:R16
        ICALL
//   78 	}
//   79 }
??Kernel_TimerInterruptHandler_1:
        OUT     0x3F, R24
        LD      R16, Y+
        CFI R16 SameValue
        CFI CFA_Y Y+14
        LD      R17, Y+
        CFI R17 SameValue
        CFI CFA_Y Y+13
        LD      R18, Y+
        CFI R18 SameValue
        CFI CFA_Y Y+12
        LD      R19, Y+
        CFI R19 SameValue
        CFI CFA_Y Y+11
        LD      R20, Y+
        CFI R20 SameValue
        CFI CFA_Y Y+10
        LD      R21, Y+
        CFI R21 SameValue
        CFI CFA_Y Y+9
        LD      R22, Y+
        CFI R22 SameValue
        CFI CFA_Y Y+8
        LD      R23, Y+
        CFI R23 SameValue
        CFI CFA_Y Y+7
        LD      R0, Y+
        CFI R0 SameValue
        CFI CFA_Y Y+6
        LD      R1, Y+
        CFI R1 SameValue
        CFI CFA_Y Y+5
        LD      R2, Y+
        CFI R2 SameValue
        CFI CFA_Y Y+4
        LD      R3, Y+
        CFI R3 SameValue
        CFI CFA_Y Y+3
        LD      R30, Y+
        CFI R30 SameValue
        CFI CFA_Y Y+2
        LD      R31, Y+
        CFI R31 SameValue
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RETI
        CFI EndBlock cfiBlock2

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 40
`??Kernel_TimerInterruptHandler??INTVEC 40`:
        JMP     Kernel_TimerInterruptHandler

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DW      SFE(NEAR_Z) - SFB(NEAR_Z)
        DW      SFB(NEAR_Z)
        DW      0
        REQUIRE ?need_segment_init

        END
// 
//   3 bytes in segment ABSOLUTE
// 158 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   4 bytes in segment NEAR_Z
// 
// 158 bytes of CODE memory (+ 10 bytes shared)
//   4 bytes of DATA memory (+  3 bytes shared)
//
//Errors: none
//Warnings: none
