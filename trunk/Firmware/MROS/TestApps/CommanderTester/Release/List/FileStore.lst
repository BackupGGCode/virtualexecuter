##############################################################################
#                                                                            #
#                                                      09/Mar/2008  16:57:09 #
# IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c      #
#    Command line =  --string_literals_in_flash                              #
#                    f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c      #
#                    --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\Obj\ -D NDEBUG -lC              #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    CommanderTester\Release\List\ --initializers_in_flash   #
#                    -s9 -DENABLE_BIT_DEFINITIONS -e -I                      #
#                    f:\Projects\[Drivers]\C\mros\TestApps\CommanderTester\  #
#                    -I f:\Projects\[Drivers]\C\mros\ -I "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024            #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\List\FileStore.lst                               #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\R #
#                    elease\Obj\FileStore.r90                                #
#                                                                            #
#                                                                            #
##############################################################################

f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c
      1          #include <FileStore/FileStore.h>
      2          
      3          #define FLAG_TYPE																0x03
      4          #define FLAG_FILE																(1<<0)
      5          #define FLAG_DIRECTORYTERMINATOR								(1<<1)
      6          
      7          #define ENTRY_SIZE															10
      8          #define OFFSET_FLAGS														0
      9          #define OFFSET_START														1
     10          #define OFFSET_SIZE															5
     11          #define OFFSET_NAMELENGTH												9
     12          #define OFFSET_NAME															10
     13          
     14          /*
     15          
     16          Each file entry on media complies to the following format:
     17          
     18          unsigned char flags;
     19          unsigned long start;
     20          unsigned long size;
     21          unsigned char fileNameLength;
     22          unsigned char fileName[fileNameLength];
     23          
     24          The flags:
     25          
     26          0 - File
     27          1 - Directory terminator
     28          2 - Directory (not implemented)
     29          3 - Reserved
     30          4 - Reserved
     31          5 - Reserved
     32          6 - Reserved
     33          7 - Reserved
     34          
     35          */
     36          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     37          unsigned char (*readByte)(unsigned long address);
   \                     readByte:
   \   00000000                      DS 2
     38          void (*readBytes)(unsigned long address, unsigned char* data, unsigned short length);
   \                     readBytes:
   \   00000002                      DS 2
     39          unsigned long (*readLong)(unsigned long address);
   \                     readLong:
   \   00000004                      DS 2
     40          
     41          
     42          unsigned long FindNextFileEntry(unsigned long current);
     43          bool MatchFileName(char* name, unsigned long address);
     44          

   \                                 In segment CODE, align 2, keep-with-next
     45          void FileStore_Init(unsigned char (*functionReadByte)(unsigned long address),
   \                     FileStore_Init:
     46          										void (*functionReadBytes)(unsigned long address, unsigned char* data, unsigned short length),
     47          										unsigned long (*functionReadLong)(unsigned long address))
     48          {
     49          	readByte = functionReadByte;
   \   00000000   ....               LDI     R30, LOW(readByte)
   \   00000002   ....               LDI     R31, (readByte) >> 8
   \   00000004   8300               ST      Z, R16
   \   00000006   8311               STD     Z+1, R17
     50          	readBytes = functionReadBytes;
   \   00000008   8322               STD     Z+2, R18
   \   0000000A   8333               STD     Z+3, R19
     51          	readLong = functionReadLong;
   \   0000000C   8344               STD     Z+4, R20
   \   0000000E   8355               STD     Z+5, R21
     52          }
   \   00000010   9508               RET
     53          
     54          

   \                                 In segment CODE, align 2, keep-with-next
     55          bool FileStore_OpenFile(char* name, fsFile* file)
   \                     FileStore_OpenFile:
     56          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   0138               MOVW    R7:R6, R17:R16
   \   00000012   0129               MOVW    R5:R4, R19:R18
     57          	unsigned long index=0, newIndex;
   \   00000014   E080               LDI     R24, 0
   \   00000016   E090               LDI     R25, 0
   \   00000018   E0A0               LDI     R26, 0
   \   0000001A   E0B0               LDI     R27, 0
   \   0000001C   C002               RJMP    ??FileStore_OpenFile_0
     58          	
     59          	while(MatchFileName(name, index)==false)
     60          	{
     61          		newIndex=FindNextFileEntry(index);
     62          		if(index==newIndex)
     63          		{
     64          			return false;
     65          		}
     66          		index=newIndex;
   \                     ??FileStore_OpenFile_1:
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   01D9               MOVW    R27:R26, R19:R18
   \                     ??FileStore_OpenFile_0:
   \   00000022   01AC               MOVW    R21:R20, R25:R24
   \   00000024   01BD               MOVW    R23:R22, R27:R26
   \   00000026   0183               MOVW    R17:R16, R7:R6
   \   00000028   ....               RCALL   MatchFileName
   \   0000002A   2300               TST     R16
   \   0000002C   F451               BRNE    ??FileStore_OpenFile_2
   \   0000002E   018C               MOVW    R17:R16, R25:R24
   \   00000030   019D               MOVW    R19:R18, R27:R26
   \   00000032   ....               RCALL   FindNextFileEntry
   \   00000034   1780               CP      R24, R16
   \   00000036   0791               CPC     R25, R17
   \   00000038   07A2               CPC     R26, R18
   \   0000003A   07B3               CPC     R27, R19
   \   0000003C   F781               BRNE    ??FileStore_OpenFile_1
   \   0000003E   E000               LDI     R16, 0
   \   00000040   C02D               RJMP    ??FileStore_OpenFile_3
     67          	}
     68          	
     69          	file->index=index;
   \                     ??FileStore_OpenFile_2:
   \   00000042   01F2               MOVW    R31:R30, R5:R4
   \   00000044   8380               ST      Z, R24
   \   00000046   8391               STD     Z+1, R25
   \   00000048   83A2               STD     Z+2, R26
   \   0000004A   83B3               STD     Z+3, R27
     70          	file->start=readLong(index+OFFSET_START);
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   019D               MOVW    R19:R18, R27:R26
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   4F2F               SBCI    R18, 255
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   ....               LDI     R30, LOW(readByte)
   \   0000005A   ....               LDI     R31, (readByte) >> 8
   \   0000005C   8144               LDD     R20, Z+4
   \   0000005E   8155               LDD     R21, Z+5
   \   00000060   01FA               MOVW    R31:R30, R21:R20
   \   00000062   9509               ICALL
   \   00000064   01F2               MOVW    R31:R30, R5:R4
   \   00000066   8304               STD     Z+4, R16
   \   00000068   8315               STD     Z+5, R17
   \   0000006A   8326               STD     Z+6, R18
   \   0000006C   8337               STD     Z+7, R19
     71          	file->size=readLong(index+OFFSET_SIZE);
   \   0000006E   5F8B               SUBI    R24, 251
   \   00000070   4F9F               SBCI    R25, 255
   \   00000072   4FAF               SBCI    R26, 255
   \   00000074   4FBF               SBCI    R27, 255
   \   00000076   018C               MOVW    R17:R16, R25:R24
   \   00000078   019D               MOVW    R19:R18, R27:R26
   \   0000007A   ....               LDI     R30, LOW(readByte)
   \   0000007C   ....               LDI     R31, (readByte) >> 8
   \   0000007E   8144               LDD     R20, Z+4
   \   00000080   8155               LDD     R21, Z+5
   \   00000082   01FA               MOVW    R31:R30, R21:R20
   \   00000084   9509               ICALL
   \   00000086   01F2               MOVW    R31:R30, R5:R4
   \   00000088   8700               STD     Z+8, R16
   \   0000008A   8711               STD     Z+9, R17
   \   0000008C   8722               STD     Z+10, R18
   \   0000008E   8733               STD     Z+11, R19
     72          	file->current=0;
   \   00000090   E000               LDI     R16, 0
   \   00000092   8704               STD     Z+12, R16
   \   00000094   8705               STD     Z+13, R16
   \   00000096   8706               STD     Z+14, R16
   \   00000098   8707               STD     Z+15, R16
     73          	
     74          	return true;
   \   0000009A   E001               LDI     R16, 1
   \                     ??FileStore_OpenFile_3:
   \   0000009C                      REQUIRE ?Subroutine0
   \   0000009C                      ;               // Fall through to label ?Subroutine0
     75          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET
     76          

   \                                 In segment CODE, align 2, keep-with-next
     77          void FileStore_GetFileName(fsFile* file, char* name, unsigned char maxLength)
   \                     FileStore_GetFileName:
     78          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   0138               MOVW    R7:R6, R17:R16
   \   00000012   0129               MOVW    R5:R4, R19:R18
   \   00000014   2F94               MOV     R25, R20
     79          	unsigned char length;
     80          
     81          	length = readByte(file->index + OFFSET_NAMELENGTH);
   \   00000016   ....               LDI     R26, LOW(readByte)
   \   00000018   ....               LDI     R27, (readByte) >> 8
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   8100               LD      R16, Z
   \   0000001E   8111               LDD     R17, Z+1
   \   00000020   8122               LDD     R18, Z+2
   \   00000022   8133               LDD     R19, Z+3
   \   00000024   5F07               SUBI    R16, 247
   \   00000026   4F1F               SBCI    R17, 255
   \   00000028   4F2F               SBCI    R18, 255
   \   0000002A   4F3F               SBCI    R19, 255
   \   0000002C   91ED               LD      R30, X+
   \   0000002E   91FC               LD      R31, X
   \   00000030   9711               SBIW    R27:R26, 1
   \   00000032   9509               ICALL
   \   00000034   2F80               MOV     R24, R16
     82          	if(length >= maxLength)
   \   00000036   1789               CP      R24, R25
   \   00000038   F010               BRCS    ??FileStore_GetFileName_0
     83          	{
     84          		length = maxLength - 1;
   \   0000003A   959A               DEC     R25
   \   0000003C   2F89               MOV     R24, R25
     85          	}
     86          	
     87          	readBytes(file->index + OFFSET_NAME, (unsigned char*)name, (unsigned short)length);
   \                     ??FileStore_GetFileName_0:
   \   0000003E   2F68               MOV     R22, R24
   \   00000040   E070               LDI     R23, 0
   \   00000042   01A2               MOVW    R21:R20, R5:R4
   \   00000044   01F3               MOVW    R31:R30, R7:R6
   \   00000046   8100               LD      R16, Z
   \   00000048   8111               LDD     R17, Z+1
   \   0000004A   8122               LDD     R18, Z+2
   \   0000004C   8133               LDD     R19, Z+3
   \   0000004E   5F06               SUBI    R16, 246
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   4F2F               SBCI    R18, 255
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   8002               LDD     R0, Z+2
   \   0000005A   8013               LDD     R1, Z+3
   \   0000005C   01F0               MOVW    R31:R30, R1:R0
   \   0000005E   9509               ICALL
     88          	name[length] = 0;
   \   00000060   E000               LDI     R16, 0
   \   00000062   0E48               ADD     R4, R24
   \   00000064   1E50               ADC     R5, R16
   \   00000066   01F2               MOVW    R31:R30, R5:R4
   \   00000068   8300               ST      Z, R16
     89          }
   \   0000006A   ....               RJMP    ?Subroutine0
     90          

   \                                 In segment CODE, align 2, keep-with-next
     91          unsigned short FileStore_ReadBytes(fsFile* file, unsigned char* data, unsigned short length)
   \                     FileStore_ReadBytes:
     92          {
   \   00000000   92BA               ST      -Y, R11
   \   00000002   92AA               ST      -Y, R10
   \   00000004   929A               ST      -Y, R9
   \   00000006   928A               ST      -Y, R8
   \   00000008   927A               ST      -Y, R7
   \   0000000A   926A               ST      -Y, R6
   \   0000000C   925A               ST      -Y, R5
   \   0000000E   924A               ST      -Y, R4
   \   00000010   93BA               ST      -Y, R27
   \   00000012   93AA               ST      -Y, R26
   \   00000014   939A               ST      -Y, R25
   \   00000016   938A               ST      -Y, R24
   \   00000018                      REQUIRE ?Register_R4_is_cg_reg
   \   00000018                      REQUIRE ?Register_R5_is_cg_reg
   \   00000018                      REQUIRE ?Register_R6_is_cg_reg
   \   00000018                      REQUIRE ?Register_R7_is_cg_reg
   \   00000018                      REQUIRE ?Register_R8_is_cg_reg
   \   00000018                      REQUIRE ?Register_R9_is_cg_reg
   \   00000018                      REQUIRE ?Register_R10_is_cg_reg
   \   00000018                      REQUIRE ?Register_R11_is_cg_reg
   \   00000018   01D8               MOVW    R27:R26, R17:R16
   \   0000001A   0109               MOVW    R1:R0, R19:R18
   \   0000001C   01CA               MOVW    R25:R24, R21:R20
     93          	if(length > (file->size - file->current))
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8504               LDD     R16, Z+12
   \   00000022   8515               LDD     R17, Z+13
   \   00000024   8526               LDD     R18, Z+14
   \   00000026   8537               LDD     R19, Z+15
   \   00000028   8440               LDD     R4, Z+8
   \   0000002A   8451               LDD     R5, Z+9
   \   0000002C   8462               LDD     R6, Z+10
   \   0000002E   8473               LDD     R7, Z+11
   \   00000030   0142               MOVW    R9:R8, R5:R4
   \   00000032   0153               MOVW    R11:R10, R7:R6
   \   00000034   1A80               SUB     R8, R16
   \   00000036   0A91               SBC     R9, R17
   \   00000038   0AA2               SBC     R10, R18
   \   0000003A   0AB3               SBC     R11, R19
   \   0000003C   E060               LDI     R22, 0
   \   0000003E   1684               CP      R8, R20
   \   00000040   0695               CPC     R9, R21
   \   00000042   06A6               CPC     R10, R22
   \   00000044   06B6               CPC     R11, R22
   \   00000046   F418               BRCC    ??FileStore_ReadBytes_0
     94          	{
     95          		length = file->size - file->current;
   \   00000048   01C2               MOVW    R25:R24, R5:R4
   \   0000004A   1B80               SUB     R24, R16
   \   0000004C   0B91               SBC     R25, R17
     96          	}
     97          	
     98          	readBytes(file->start + file->current, data, length);
   \                     ??FileStore_ReadBytes_0:
   \   0000004E   01BC               MOVW    R23:R22, R25:R24
   \   00000050   01A0               MOVW    R21:R20, R1:R0
   \   00000052   8004               LDD     R0, Z+4
   \   00000054   8015               LDD     R1, Z+5
   \   00000056   8026               LDD     R2, Z+6
   \   00000058   8037               LDD     R3, Z+7
   \   0000005A   0E00               ADD     R0, R16
   \   0000005C   1E11               ADC     R1, R17
   \   0000005E   1E22               ADC     R2, R18
   \   00000060   1E33               ADC     R3, R19
   \   00000062   0180               MOVW    R17:R16, R1:R0
   \   00000064   0191               MOVW    R19:R18, R3:R2
   \   00000066   ....               LDI     R30, LOW(readByte)
   \   00000068   ....               LDI     R31, (readByte) >> 8
   \   0000006A   8002               LDD     R0, Z+2
   \   0000006C   8013               LDD     R1, Z+3
   \   0000006E   01F0               MOVW    R31:R30, R1:R0
   \   00000070   9509               ICALL
     99          	file->current += length;
   \   00000072   018C               MOVW    R17:R16, R25:R24
   \   00000074   E020               LDI     R18, 0
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8544               LDD     R20, Z+12
   \   0000007A   8555               LDD     R21, Z+13
   \   0000007C   8566               LDD     R22, Z+14
   \   0000007E   8577               LDD     R23, Z+15
   \   00000080   0F48               ADD     R20, R24
   \   00000082   1F59               ADC     R21, R25
   \   00000084   1F62               ADC     R22, R18
   \   00000086   1F72               ADC     R23, R18
   \   00000088   8744               STD     Z+12, R20
   \   0000008A   8755               STD     Z+13, R21
   \   0000008C   8766               STD     Z+14, R22
   \   0000008E   8777               STD     Z+15, R23
    100          	
    101          	return length;
   \   00000090   9189               LD      R24, Y+
   \   00000092   9199               LD      R25, Y+
   \   00000094   91A9               LD      R26, Y+
   \   00000096   91B9               LD      R27, Y+
   \   00000098   9049               LD      R4, Y+
   \   0000009A   9059               LD      R5, Y+
   \   0000009C   9069               LD      R6, Y+
   \   0000009E   9079               LD      R7, Y+
   \   000000A0   9089               LD      R8, Y+
   \   000000A2   9099               LD      R9, Y+
   \   000000A4   90A9               LD      R10, Y+
   \   000000A6   90B9               LD      R11, Y+
   \   000000A8   9508               RET
    102          }
    103          
    104          /*
    105          unsigned long FileStore_ReadLine(fsFile* file, unsigned char* data, unsigned short maxLength)
    106          {
    107          unsigned char t;
    108          unsigned long count=0;
    109          
    110          while(count < maxLength)
    111          {
    112          if(FileStore_ReadBytes(file, &t, 1)==1)
    113          {
    114          *data++ == t;
    115          		}
    116          
    117          	}
    118          
    119          return maxLength;
    120          }
    121          */
    122          

   \                                 In segment CODE, align 2, keep-with-next
    123          bool FileStore_GetNextFileEntry(fsFile* file, bool getFirst)
   \                     FileStore_GetNextFileEntry:
    124          {
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128               MOVW    R5:R4, R17:R16
    125          	unsigned long index;
    126          	
    127          	if(getFirst)
   \   0000000E   2322               TST     R18
   \   00000010   F029               BREQ    ??FileStore_GetNextFileEntry_0
    128          	{
    129          		index = 0;
   \   00000012   E080               LDI     R24, 0
   \   00000014   E090               LDI     R25, 0
   \   00000016   E0A0               LDI     R26, 0
   \   00000018   E0B0               LDI     R27, 0
   \   0000001A   C008               RJMP    ??FileStore_GetNextFileEntry_1
    130          	}
    131          	else
    132          	{
    133          		index = FindNextFileEntry(file->index);
   \                     ??FileStore_GetNextFileEntry_0:
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   8122               LDD     R18, Z+2
   \   00000024   8133               LDD     R19, Z+3
   \   00000026   ....               RCALL   FindNextFileEntry
   \   00000028   01C8               MOVW    R25:R24, R17:R16
   \   0000002A   01D9               MOVW    R27:R26, R19:R18
    134          	}
    135          	
    136          	if((readByte(index + OFFSET_FLAGS) & FLAG_TYPE) != FLAG_FILE)
   \                     ??FileStore_GetNextFileEntry_1:
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   019D               MOVW    R19:R18, R27:R26
   \   00000030   ....               LDI     R30, LOW(readByte)
   \   00000032   ....               LDI     R31, (readByte) >> 8
   \   00000034   8140               LD      R20, Z
   \   00000036   8151               LDD     R21, Z+1
   \   00000038   01FA               MOVW    R31:R30, R21:R20
   \   0000003A   9509               ICALL
   \   0000003C   7003               ANDI    R16, 0x03
   \   0000003E   3001               CPI     R16, 1
   \   00000040   F011               BREQ    ??FileStore_GetNextFileEntry_2
    137          	{
    138          		return false;
   \   00000042   E000               LDI     R16, 0
   \   00000044   C02D               RJMP    ??FileStore_GetNextFileEntry_3
    139          	}
    140          	
    141          	file->index = index;
   \                     ??FileStore_GetNextFileEntry_2:
   \   00000046   01F2               MOVW    R31:R30, R5:R4
   \   00000048   8380               ST      Z, R24
   \   0000004A   8391               STD     Z+1, R25
   \   0000004C   83A2               STD     Z+2, R26
   \   0000004E   83B3               STD     Z+3, R27
    142          	file->start = readLong(index + OFFSET_START);
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   019D               MOVW    R19:R18, R27:R26
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   4F2F               SBCI    R18, 255
   \   0000005A   4F3F               SBCI    R19, 255
   \   0000005C   ....               LDI     R30, LOW(readByte)
   \   0000005E   ....               LDI     R31, (readByte) >> 8
   \   00000060   8144               LDD     R20, Z+4
   \   00000062   8155               LDD     R21, Z+5
   \   00000064   01FA               MOVW    R31:R30, R21:R20
   \   00000066   9509               ICALL
   \   00000068   01F2               MOVW    R31:R30, R5:R4
   \   0000006A   8304               STD     Z+4, R16
   \   0000006C   8315               STD     Z+5, R17
   \   0000006E   8326               STD     Z+6, R18
   \   00000070   8337               STD     Z+7, R19
    143          	file->size = readLong(index + OFFSET_SIZE);
   \   00000072   5F8B               SUBI    R24, 251
   \   00000074   4F9F               SBCI    R25, 255
   \   00000076   4FAF               SBCI    R26, 255
   \   00000078   4FBF               SBCI    R27, 255
   \   0000007A   018C               MOVW    R17:R16, R25:R24
   \   0000007C   019D               MOVW    R19:R18, R27:R26
   \   0000007E   ....               LDI     R30, LOW(readByte)
   \   00000080   ....               LDI     R31, (readByte) >> 8
   \   00000082   8144               LDD     R20, Z+4
   \   00000084   8155               LDD     R21, Z+5
   \   00000086   01FA               MOVW    R31:R30, R21:R20
   \   00000088   9509               ICALL
   \   0000008A   01F2               MOVW    R31:R30, R5:R4
   \   0000008C   8700               STD     Z+8, R16
   \   0000008E   8711               STD     Z+9, R17
   \   00000090   8722               STD     Z+10, R18
   \   00000092   8733               STD     Z+11, R19
    144          	file->current = 0;
   \   00000094   E000               LDI     R16, 0
   \   00000096   8704               STD     Z+12, R16
   \   00000098   8705               STD     Z+13, R16
   \   0000009A   8706               STD     Z+14, R16
   \   0000009C   8707               STD     Z+15, R16
    145          	
    146          	return true;
   \   0000009E   E001               LDI     R16, 1
   \                     ??FileStore_GetNextFileEntry_3:
   \   000000A0                      REQUIRE ?Subroutine1
   \   000000A0                      ;               // Fall through to label ?Subroutine1
    147          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9508               RET
    148          
    149          
    150          
    151          ////////////////////////////////////////////////////////////////////////////////////////
    152          
    153          
    154          /*
    155          Given a pointer to a valid file entry a pointer to the next file entry is returned.
    156          If the current entry is not valid the same entry is returned.
    157          No check is made to ensure that the entry found is valid!
    158          */

   \                                 In segment CODE, align 2, keep-with-next
    159          unsigned long FindNextFileEntry(unsigned long current)
   \                     FindNextFileEntry:
    160          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
    161          	unsigned long next = current;
   \   00000014   0128               MOVW    R5:R4, R17:R16
   \   00000016   0139               MOVW    R7:R6, R19:R18
    162          	
    163          	if((readByte(current + OFFSET_FLAGS) & FLAG_TYPE) == FLAG_FILE)
   \   00000018   ....               LDI     R30, LOW(readByte)
   \   0000001A   ....               LDI     R31, (readByte) >> 8
   \   0000001C   8140               LD      R20, Z
   \   0000001E   8151               LDD     R21, Z+1
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   9509               ICALL
   \   00000024   7003               ANDI    R16, 0x03
   \   00000026   3001               CPI     R16, 1
   \   00000028   F4A1               BRNE    ??FindNextFileEntry_0
    164          	{
    165          		next = next + ENTRY_SIZE + readByte(current + OFFSET_NAMELENGTH);
   \   0000002A   5F87               SUBI    R24, 247
   \   0000002C   4F9F               SBCI    R25, 255
   \   0000002E   4FAF               SBCI    R26, 255
   \   00000030   4FBF               SBCI    R27, 255
   \   00000032   018C               MOVW    R17:R16, R25:R24
   \   00000034   019D               MOVW    R19:R18, R27:R26
   \   00000036   ....               LDI     R30, LOW(readByte)
   \   00000038   ....               LDI     R31, (readByte) >> 8
   \   0000003A   8140               LD      R20, Z
   \   0000003C   8151               LDD     R21, Z+1
   \   0000003E   01FA               MOVW    R31:R30, R21:R20
   \   00000040   9509               ICALL
   \   00000042   E010               LDI     R17, 0
   \   00000044   E020               LDI     R18, 0
   \   00000046   5F06               SUBI    R16, 246
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   0E40               ADD     R4, R16
   \   0000004C   1E51               ADC     R5, R17
   \   0000004E   1E62               ADC     R6, R18
   \   00000050   1E72               ADC     R7, R18
    166          	}
    167          	
    168          	return next;
   \                     ??FindNextFileEntry_0:
   \   00000052   0182               MOVW    R17:R16, R5:R4
   \   00000054   0193               MOVW    R19:R18, R7:R6
   \   00000056   ....               RJMP    ?Subroutine0
    169          }
    170          
    171          
    172          /*
    173          Tests if the file specified by name is located on the index given.
    174          Returns true if the file is found otherwise false;
    175          */

   \                                 In segment CODE, align 2, keep-with-next
    176          bool MatchFileName(char* name, unsigned long index)
   \                     MatchFileName:
    177          {
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128               MOVW    R5:R4, R17:R16
   \   0000000E   01CA               MOVW    R25:R24, R21:R20
   \   00000010   01DB               MOVW    R27:R26, R23:R22
    178          	if((readByte(index + OFFSET_FLAGS) & FLAG_TYPE) != FLAG_FILE)
   \   00000012   018A               MOVW    R17:R16, R21:R20
   \   00000014   019B               MOVW    R19:R18, R23:R22
   \   00000016   ....               LDI     R30, LOW(readByte)
   \   00000018   ....               LDI     R31, (readByte) >> 8
   \   0000001A   8140               LD      R20, Z
   \   0000001C   8151               LDD     R21, Z+1
   \   0000001E   01FA               MOVW    R31:R30, R21:R20
   \   00000020   9509               ICALL
   \   00000022   7003               ANDI    R16, 0x03
   \   00000024   3001               CPI     R16, 1
   \   00000026   F011               BREQ    ??MatchFileName_0
    179          	{
    180          		return false;
   \                     ??MatchFileName_1:
   \   00000028   E000               LDI     R16, 0
   \   0000002A   C01B               RJMP    ??MatchFileName_2
    181          	}
    182          	
    183          	index += OFFSET_NAME;
   \                     ??MatchFileName_0:
   \   0000002C   5F86               SUBI    R24, 246
   \   0000002E   4F9F               SBCI    R25, 255
   \   00000030   4FAF               SBCI    R26, 255
   \   00000032   4FBF               SBCI    R27, 255
   \   00000034   C011               RJMP    ??MatchFileName_3
    184          	
    185          	while(*name)
    186          	{
    187          		if(readByte(index++) != *name++)
   \                     ??MatchFileName_4:
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   ....               LDI     R30, LOW(readByte)
   \   0000003C   ....               LDI     R31, (readByte) >> 8
   \   0000003E   8140               LD      R20, Z
   \   00000040   8151               LDD     R21, Z+1
   \   00000042   01FA               MOVW    R31:R30, R21:R20
   \   00000044   9509               ICALL
   \   00000046   5F8F               SUBI    R24, 255
   \   00000048   4F9F               SBCI    R25, 255
   \   0000004A   4FAF               SBCI    R26, 255
   \   0000004C   4FBF               SBCI    R27, 255
   \   0000004E   01F2               MOVW    R31:R30, R5:R4
   \   00000050   9111               LD      R17, Z+
   \   00000052   012F               MOVW    R5:R4, R31:R30
   \   00000054   1701               CP      R16, R17
   \   00000056   F741               BRNE    ??MatchFileName_1
    188          		{
    189          			return false;
    190          		}
    191          	}
   \                     ??MatchFileName_3:
   \   00000058   01F2               MOVW    R31:R30, R5:R4
   \   0000005A   8100               LD      R16, Z
   \   0000005C   2300               TST     R16
   \   0000005E   F759               BRNE    ??MatchFileName_4
    192          	
    193          	return true;
   \   00000060   E001               LDI     R16, 1
   \                     ??MatchFileName_2:
   \   00000062   ....               RJMP    ?Subroutine1
    194          }

   Maximum stack usage in bytes:

     Function                   CSTACK RSTACK
     --------                   ------ ------
     FileStore_GetFileName          8      2
       ->   Indirect call           8      2
       ->   Indirect call           8      2
     FileStore_GetNextFileEntry     8      2
       -> FindNextFileEntry         8      2
       ->   Indirect call           8      2
       ->   Indirect call           8      2
       ->   Indirect call           8      2
     FileStore_Init                 0      2
     FileStore_OpenFile             8      2
       -> MatchFileName             8      2
       -> FindNextFileEntry         8      2
       ->   Indirect call           8      2
       ->   Indirect call           8      2
     FileStore_ReadBytes           12      2
       ->   Indirect call          12      2
     FindNextFileEntry              8      2
       ->   Indirect call           8      2
       ->   Indirect call           8      2
     MatchFileName                  6      2
       ->   Indirect call           6      2
       ->   Indirect call           6      2


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     readByte                      6
     FileStore_Init               18
     FileStore_OpenFile          156
     ?Subroutine0                 18
     FileStore_GetFileName       108
     FileStore_ReadBytes         170
     FileStore_GetNextFileEntry  160
     ?Subroutine1                 14
     FindNextFileEntry            88
     MatchFileName               100
      Others                       6

 
 832 bytes in segment CODE
   6 bytes in segment INITTAB
   6 bytes in segment NEAR_Z
 
 832 bytes of CODE memory (+ 6 bytes shared)
   6 bytes of DATA memory

Errors: none
Warnings: none
