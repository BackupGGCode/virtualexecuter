//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Mar/2008  16:57:09 /
// IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM. /
//                    c                                                      /
//    Command line =  --string_literals_in_flash                             /
//                    f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM. /
//                    c --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestAp /
//                    ps\CommanderTester\Release\Obj\ -D NDEBUG -lC          /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApp /
//                    s\CommanderTester\Release\List\                        /
//                    --initializers_in_flash -s9 -DENABLE_BIT_DEFINITIONS   /
//                    -e -I f:\Projects\[Drivers]\C\mros\TestApps\CommanderT /
//                    ester\ -I f:\Projects\[Drivers]\C\mros\ -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024           /
//    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\InternalEEPROM.s90                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME InternalEEPROM

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg

        PUBLIC InternalEEPROM_ReadByte
        FUNCTION InternalEEPROM_ReadByte,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC InternalEEPROM_ReadBytes
        FUNCTION InternalEEPROM_ReadBytes,021203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC InternalEEPROM_ReadLong
        FUNCTION InternalEEPROM_ReadLong,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC InternalEEPROM_WriteByte
        FUNCTION InternalEEPROM_WriteByte,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC InternalEEPROM_WriteBytes
        FUNCTION InternalEEPROM_WriteBytes,021203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
// f:\Projects\[Drivers]\C\MROS\FileStore\InternalEEPROM.c
//    1 #include <Globals.h>

        ASEGN ABSOLUTE:DATA:NOROOT,03cH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,03dH
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,03eH
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS 2
//    2 #include <Kernel/Kernel.h>
//    3 
//    4 

        RSEG CODE:CODE:NOROOT(1)
//    5 unsigned char InternalEEPROM_ReadByte(unsigned long address)
InternalEEPROM_ReadByte:
??InternalEEPROM_ReadByte_0:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function InternalEEPROM_ReadByte
//    6 {
//    7 	while(EECR & (1<<EEWE));
        SBIC    0x1C, 0x01
        RJMP    ??InternalEEPROM_ReadByte_0
//    8 	EEAR = address;
        OUT     0x1F, R17
        OUT     0x1E, R16
//    9 	EECR |= (1 << EERE);
        SBI     0x1C, 0x00
//   10 	return EEDR;
        IN      R16, 0x1D
        RET
        CFI EndBlock cfiBlock0
//   11 }
//   12 
//   13 

        RSEG CODE:CODE:NOROOT(1)
//   14 void InternalEEPROM_WriteByte(unsigned long address, unsigned char value)
InternalEEPROM_WriteByte:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function InternalEEPROM_WriteByte
//   15 {
//   16 	Critical();
        CLI
//   17 	while(EECR & (1<<EEWE));
??InternalEEPROM_WriteByte_0:
        SBIC    0x1C, 0x01
        RJMP    ??InternalEEPROM_WriteByte_0
//   18 	EEAR = address;
        OUT     0x1F, R17
        OUT     0x1E, R16
//   19 	EEDR = value;
        OUT     0x1D, R20
//   20 	EECR |= (1 << EEMWE);
        SBI     0x1C, 0x02
//   21 	EECR |= (1 << EEWE);
        SBI     0x1C, 0x01
//   22 	NonCritical();
        SEI
//   23 }
        RET
        CFI EndBlock cfiBlock1
//   24 
//   25 

        RSEG CODE:CODE:NOROOT(1)
//   26 void InternalEEPROM_ReadBytes(unsigned long address, unsigned char* data, unsigned short length)
InternalEEPROM_ReadBytes:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function InternalEEPROM_ReadBytes
//   27 {
        FUNCALL InternalEEPROM_ReadBytes, InternalEEPROM_ReadByte
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        RJMP    ??InternalEEPROM_ReadBytes_0
//   28 	while(length--)
//   29 	{
//   30 		*data++ = InternalEEPROM_ReadByte(address++);
??InternalEEPROM_ReadBytes_1:
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        RCALL   InternalEEPROM_ReadByte
        SUBI    R24, 255
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
//   31 	}
??InternalEEPROM_ReadBytes_0:
        MOVW    R17:R16, R7:R6
        LDI     R18, 255
        ADD     R6, R18
        ADC     R7, R18
        OR      R16, R17
        BRNE    ??InternalEEPROM_ReadBytes_1
        CFI EndBlock cfiBlock2
//   32 }
        REQUIRE ?Subroutine0
        ;               // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_Y Y+8
        CFI R4 Frame(CFA_Y, -4)
        CFI R5 Frame(CFA_Y, -3)
        CFI R6 Frame(CFA_Y, -2)
        CFI R7 Frame(CFA_Y, -1)
        CFI R24 Frame(CFA_Y, -8)
        CFI R25 Frame(CFA_Y, -7)
        CFI R26 Frame(CFA_Y, -6)
        CFI R27 Frame(CFA_Y, -5)
        LD      R24, Y+
        CFI CFA_Y Y+7
        CFI R24 SameValue
        LD      R25, Y+
        CFI CFA_Y Y+6
        CFI R25 SameValue
        LD      R26, Y+
        CFI CFA_Y Y+5
        CFI R26 SameValue
        LD      R27, Y+
        CFI CFA_Y Y+4
        CFI R27 SameValue
        LD      R4, Y+
        CFI CFA_Y Y+3
        CFI R4 SameValue
        LD      R5, Y+
        CFI CFA_Y Y+2
        CFI R5 SameValue
        LD      R6, Y+
        CFI CFA_Y Y+1
        CFI R6 SameValue
        LD      R7, Y+
        CFI CFA_Y Y+0
        CFI R7 SameValue
        RET
        CFI EndBlock cfiBlock3
//   33 
//   34 

        RSEG CODE:CODE:NOROOT(1)
//   35 unsigned long InternalEEPROM_ReadLong(unsigned long address)
InternalEEPROM_ReadLong:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function InternalEEPROM_ReadLong
//   36 {
        FUNCALL InternalEEPROM_ReadLong, InternalEEPROM_ReadBytes
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        SBIW    R29:R28, 4
        CFI CFA_Y Y+4
//   37 unsigned long t;
//   38 	
//   39 	InternalEEPROM_ReadBytes(address, (unsigned char*)&t, 4);
        LDI     R22, 4
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        RCALL   InternalEEPROM_ReadBytes
//   40 	
//   41 	return t;
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        ADIW    R29:R28, 4
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock4
//   42 }
//   43 
//   44 

        RSEG CODE:CODE:NOROOT(1)
//   45 void InternalEEPROM_WriteBytes(unsigned long address, unsigned char* data, unsigned short length)
InternalEEPROM_WriteBytes:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function InternalEEPROM_WriteBytes
//   46 {
        FUNCALL InternalEEPROM_WriteBytes, InternalEEPROM_WriteByte
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R7:R6, R21:R20
        MOVW    R5:R4, R23:R22
        RJMP    ??InternalEEPROM_WriteBytes_0
//   47 	while(length--)
//   48 	{
//   49 		InternalEEPROM_WriteByte(address++, *data++);
??InternalEEPROM_WriteBytes_1:
        MOVW    R31:R30, R7:R6
        LD      R20, Z+
        MOVW    R7:R6, R31:R30
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        RCALL   InternalEEPROM_WriteByte
        SUBI    R24, 255
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
//   50 	}
??InternalEEPROM_WriteBytes_0:
        MOVW    R17:R16, R5:R4
        LDI     R18, 255
        ADD     R4, R18
        ADC     R5, R18
        OR      R16, R17
        BRNE    ??InternalEEPROM_WriteBytes_1
//   51 }
        RJMP    ?Subroutine0
        CFI EndBlock cfiBlock5

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
//   4 bytes in segment ABSOLUTE
// 192 bytes in segment CODE
// 
// 192 bytes of CODE memory
//   0 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
