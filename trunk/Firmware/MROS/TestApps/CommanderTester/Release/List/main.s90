//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Mar/2008  16:57:11 /
// IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    main.c                                                 /
//    Command line =  --string_literals_in_flash                             /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    main.c --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\T /
//                    estApps\CommanderTester\Release\Obj\ -D NDEBUG -lC     /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApp /
//                    s\CommanderTester\Release\List\                        /
//                    --initializers_in_flash -s9 -DENABLE_BIT_DEFINITIONS   /
//                    -e -I f:\Projects\[Drivers]\C\mros\TestApps\CommanderT /
//                    ester\ -I f:\Projects\[Drivers]\C\mros\ -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024           /
//    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\main.s90                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK _A_DDRB
        PUBWEAK _A_PORTB
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC blink
        FUNCTION blink,021601H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a01H
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN Kernel_Sleep
        FUNCTION Kernel_Sleep,0202H
        EXTERN Kernel_Init
        FUNCTION Kernel_Init,0202H
        EXTERN UART_Init
        FUNCTION UART_Init,0202H
        EXTERN FileStore_Init
        FUNCTION FileStore_Init,0202H
        EXTERN Terminal_Init
        FUNCTION Terminal_Init,0200H
        EXTERN Kernel_CreateTask
        FUNCTION Kernel_CreateTask,0202H
        EXTERN Kernel_Run
        FUNCTION Kernel_Run,0202H
        EXTERN InternalEEPROM_ReadByte
        FUNCTION InternalEEPROM_ReadByte,0602H
        EXTERN InternalEEPROM_ReadBytes
        FUNCTION InternalEEPROM_ReadBytes,0602H
        EXTERN InternalEEPROM_ReadLong
        FUNCTION InternalEEPROM_ReadLong,0602H

// f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\main.c
//    1 #include <Globals.h>

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1
//    2 #include "Config.h"
//    3 #include <Kernel/Kernel.h>
//    4 #include <Peripherals/UART.h>
//    5 #include <FileStore/FileStore.h>
//    6 #include <FileStore/InternalEEPROM.h>
//    7 #include <Terminal/Terminal.h>
//    8 

        RSEG CODE:CODE:NOROOT(1)
//    9 void blink()
blink:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function blink
//   10 {
//   11 	PORTB^=(1<<7);
        FUNCALL blink, Kernel_Sleep
        LOCFRAME RSTACK, 2, STACK
        LDI     R16, 128
        IN      R17, 0x18
        EOR     R17, R16
        OUT     0x18, R17
//   12 	Kernel_Sleep(500);
        LDI     R16, 244
        LDI     R17, 1
        JMP     Kernel_Sleep
        CFI EndBlock cfiBlock0
//   13 }
//   14 

        RSEG CODE:CODE:NOROOT(1)
//   15 void main()
main:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function main
//   16 {
//   17 	DDRB=0xff;
        FUNCALL main, Kernel_Init
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, UART_Init
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, FileStore_Init
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, Terminal_Init
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, Kernel_CreateTask
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, Kernel_Run
        LOCFRAME RSTACK, 2, STACK
        LDI     R16, 255
        OUT     0x17, R16
//   18 	PORTB=0xff;
        OUT     0x18, R16
//   19 	
//   20 	Kernel_Init();
        CALL    Kernel_Init
//   21 
//   22 	UART_Init(__BAUDRATE__(115200));
        LDI     R16, 11
        LDI     R17, 0
        CALL    UART_Init
//   23 	FileStore_Init(InternalEEPROM_ReadByte, InternalEEPROM_ReadBytes, InternalEEPROM_ReadLong);
        LDI     R20, LOW(InternalEEPROM_ReadLong/2)
        LDI     R21, (InternalEEPROM_ReadLong/2) >> 8
        LDI     R18, LOW(InternalEEPROM_ReadBytes/2)
        LDI     R19, (InternalEEPROM_ReadBytes/2) >> 8
        LDI     R16, LOW(InternalEEPROM_ReadByte/2)
        LDI     R17, (InternalEEPROM_ReadByte/2) >> 8
        CALL    FileStore_Init
//   24 	Terminal_Init();	
        CALL    Terminal_Init
//   25 	Kernel_CreateTask(blink);
        LDI     R16, LOW(blink/2)
        LDI     R17, (blink/2) >> 8
        CALL    Kernel_CreateTask
//   26 	
//   27 	Kernel_Run();
        JMP     Kernel_Run
        CFI EndBlock cfiBlock1
//   28 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
//  2 bytes in segment ABSOLUTE
// 66 bytes in segment CODE
// 
// 66 bytes of CODE memory
//  0 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
