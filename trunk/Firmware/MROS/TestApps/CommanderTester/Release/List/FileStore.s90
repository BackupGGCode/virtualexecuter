//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Mar/2008  16:57:09 /
// IAR Atmel AVR C/C++ Compiler V4.21A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c     /
//    Command line =  --string_literals_in_flash                             /
//                    f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c     /
//                    --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps /
//                    \CommanderTester\Release\Obj\ -D NDEBUG -lC            /
//                    f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApp /
//                    s\CommanderTester\Release\List\                        /
//                    --initializers_in_flash -s9 -DENABLE_BIT_DEFINITIONS   /
//                    -e -I f:\Projects\[Drivers]\C\mros\TestApps\CommanderT /
//                    ester\ -I f:\Projects\[Drivers]\C\mros\ -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 1024           /
//    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\CommanderTester\ /
//                    Release\List\FileStore.s90                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME FileStore

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC FileStore_GetFileName
        FUNCTION FileStore_GetFileName,041203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC FileStore_GetNextFileEntry
        FUNCTION FileStore_GetNextFileEntry,061203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC FileStore_Init
        FUNCTION FileStore_Init,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC FileStore_OpenFile
        FUNCTION FileStore_OpenFile,061203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC FileStore_ReadBytes
        FUNCTION FileStore_ReadBytes,041203H
        LOCFRAME CSTACK, 12, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC FindNextFileEntry
        FUNCTION FindNextFileEntry,041203H
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC MatchFileName
        FUNCTION MatchFileName,041203H
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC readByte
        PUBLIC readBytes
        PUBLIC readLong
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
// f:\Projects\[Drivers]\C\MROS\FileStore\FileStore.c
//    1 #include <FileStore/FileStore.h>
//    2 
//    3 #define FLAG_TYPE																0x03
//    4 #define FLAG_FILE																(1<<0)
//    5 #define FLAG_DIRECTORYTERMINATOR								(1<<1)
//    6 
//    7 #define ENTRY_SIZE															10
//    8 #define OFFSET_FLAGS														0
//    9 #define OFFSET_START														1
//   10 #define OFFSET_SIZE															5
//   11 #define OFFSET_NAMELENGTH												9
//   12 #define OFFSET_NAME															10
//   13 
//   14 /*
//   15 
//   16 Each file entry on media complies to the following format:
//   17 
//   18 unsigned char flags;
//   19 unsigned long start;
//   20 unsigned long size;
//   21 unsigned char fileNameLength;
//   22 unsigned char fileName[fileNameLength];
//   23 
//   24 The flags:
//   25 
//   26 0 - File
//   27 1 - Directory terminator
//   28 2 - Directory (not implemented)
//   29 3 - Reserved
//   30 4 - Reserved
//   31 5 - Reserved
//   32 6 - Reserved
//   33 7 - Reserved
//   34 
//   35 */
//   36 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   37 unsigned char (*readByte)(unsigned long address);
readByte:
        DS 2
//   38 void (*readBytes)(unsigned long address, unsigned char* data, unsigned short length);
readBytes:
        DS 2
//   39 unsigned long (*readLong)(unsigned long address);
readLong:
        DS 2
//   40 
//   41 
//   42 unsigned long FindNextFileEntry(unsigned long current);
//   43 bool MatchFileName(char* name, unsigned long address);
//   44 

        RSEG CODE:CODE:NOROOT(1)
//   45 void FileStore_Init(unsigned char (*functionReadByte)(unsigned long address),
FileStore_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function FileStore_Init
//   46 										void (*functionReadBytes)(unsigned long address, unsigned char* data, unsigned short length),
//   47 										unsigned long (*functionReadLong)(unsigned long address))
//   48 {
//   49 	readByte = functionReadByte;
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   50 	readBytes = functionReadBytes;
        STD     Z+2, R18
        STD     Z+3, R19
//   51 	readLong = functionReadLong;
        STD     Z+4, R20
        STD     Z+5, R21
//   52 }
        RET
        CFI EndBlock cfiBlock0
//   53 
//   54 

        RSEG CODE:CODE:NOROOT(1)
//   55 bool FileStore_OpenFile(char* name, fsFile* file)
FileStore_OpenFile:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function FileStore_OpenFile
//   56 {
        FUNCALL FileStore_OpenFile, MatchFileName
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_OpenFile, FindNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_OpenFile
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_OpenFile
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R7:R6, R17:R16
        MOVW    R5:R4, R19:R18
//   57 	unsigned long index=0, newIndex;
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
        RJMP    ??FileStore_OpenFile_0
//   58 	
//   59 	while(MatchFileName(name, index)==false)
//   60 	{
//   61 		newIndex=FindNextFileEntry(index);
//   62 		if(index==newIndex)
//   63 		{
//   64 			return false;
//   65 		}
//   66 		index=newIndex;
??FileStore_OpenFile_1:
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
??FileStore_OpenFile_0:
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        MOVW    R17:R16, R7:R6
        RCALL   MatchFileName
        TST     R16
        BRNE    ??FileStore_OpenFile_2
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        RCALL   FindNextFileEntry
        CP      R24, R16
        CPC     R25, R17
        CPC     R26, R18
        CPC     R27, R19
        BRNE    ??FileStore_OpenFile_1
        LDI     R16, 0
        RJMP    ??FileStore_OpenFile_3
//   67 	}
//   68 	
//   69 	file->index=index;
??FileStore_OpenFile_2:
        MOVW    R31:R30, R5:R4
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
//   70 	file->start=readLong(index+OFFSET_START);
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        SUBI    R16, 255
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LDD     R20, Z+4
        LDD     R21, Z+5
        MOVW    R31:R30, R21:R20
        ICALL
        MOVW    R31:R30, R5:R4
        STD     Z+4, R16
        STD     Z+5, R17
        STD     Z+6, R18
        STD     Z+7, R19
//   71 	file->size=readLong(index+OFFSET_SIZE);
        SUBI    R24, 251
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LDD     R20, Z+4
        LDD     R21, Z+5
        MOVW    R31:R30, R21:R20
        ICALL
        MOVW    R31:R30, R5:R4
        STD     Z+8, R16
        STD     Z+9, R17
        STD     Z+10, R18
        STD     Z+11, R19
//   72 	file->current=0;
        LDI     R16, 0
        STD     Z+12, R16
        STD     Z+13, R16
        STD     Z+14, R16
        STD     Z+15, R16
//   73 	
//   74 	return true;
        LDI     R16, 1
        CFI EndBlock cfiBlock1
??FileStore_OpenFile_3:
        REQUIRE ?Subroutine0
        ;               // Fall through to label ?Subroutine0
//   75 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_Y Y+8
        CFI R4 Frame(CFA_Y, -4)
        CFI R5 Frame(CFA_Y, -3)
        CFI R6 Frame(CFA_Y, -2)
        CFI R7 Frame(CFA_Y, -1)
        CFI R24 Frame(CFA_Y, -8)
        CFI R25 Frame(CFA_Y, -7)
        CFI R26 Frame(CFA_Y, -6)
        CFI R27 Frame(CFA_Y, -5)
        LD      R24, Y+
        CFI CFA_Y Y+7
        CFI R24 SameValue
        LD      R25, Y+
        CFI CFA_Y Y+6
        CFI R25 SameValue
        LD      R26, Y+
        CFI CFA_Y Y+5
        CFI R26 SameValue
        LD      R27, Y+
        CFI CFA_Y Y+4
        CFI R27 SameValue
        LD      R4, Y+
        CFI CFA_Y Y+3
        CFI R4 SameValue
        LD      R5, Y+
        CFI CFA_Y Y+2
        CFI R5 SameValue
        LD      R6, Y+
        CFI CFA_Y Y+1
        CFI R6 SameValue
        LD      R7, Y+
        CFI CFA_Y Y+0
        CFI R7 SameValue
        RET
        CFI EndBlock cfiBlock2
//   76 

        RSEG CODE:CODE:NOROOT(1)
//   77 void FileStore_GetFileName(fsFile* file, char* name, unsigned char maxLength)
FileStore_GetFileName:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function FileStore_GetFileName
//   78 {
        FUNCALL FileStore_GetFileName
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_GetFileName
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R7:R6, R17:R16
        MOVW    R5:R4, R19:R18
        MOV     R25, R20
//   79 	unsigned char length;
//   80 
//   81 	length = readByte(file->index + OFFSET_NAMELENGTH);
        LDI     R26, LOW(readByte)
        LDI     R27, (readByte) >> 8
        MOVW    R31:R30, R17:R16
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        SUBI    R16, 247
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LD      R30, X+
        LD      R31, X
        SBIW    R27:R26, 1
        ICALL
        MOV     R24, R16
//   82 	if(length >= maxLength)
        CP      R24, R25
        BRCS    ??FileStore_GetFileName_0
//   83 	{
//   84 		length = maxLength - 1;
        DEC     R25
        MOV     R24, R25
//   85 	}
//   86 	
//   87 	readBytes(file->index + OFFSET_NAME, (unsigned char*)name, (unsigned short)length);
??FileStore_GetFileName_0:
        MOV     R22, R24
        LDI     R23, 0
        MOVW    R21:R20, R5:R4
        MOVW    R31:R30, R7:R6
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        SUBI    R16, 246
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        MOVW    R31:R30, R27:R26
        LDD     R0, Z+2
        LDD     R1, Z+3
        MOVW    R31:R30, R1:R0
        ICALL
//   88 	name[length] = 0;
        LDI     R16, 0
        ADD     R4, R24
        ADC     R5, R16
        MOVW    R31:R30, R5:R4
        ST      Z, R16
//   89 }
        RJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//   90 

        RSEG CODE:CODE:NOROOT(1)
//   91 unsigned short FileStore_ReadBytes(fsFile* file, unsigned char* data, unsigned short length)
FileStore_ReadBytes:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function FileStore_ReadBytes
//   92 {
        FUNCALL FileStore_ReadBytes
        LOCFRAME CSTACK, 12, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R11
        CFI R11 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R10
        CFI R10 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R9
        CFI R9 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R8
        CFI R8 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        MOVW    R27:R26, R17:R16
        MOVW    R1:R0, R19:R18
        MOVW    R25:R24, R21:R20
//   93 	if(length > (file->size - file->current))
        MOVW    R31:R30, R17:R16
        LDD     R16, Z+12
        LDD     R17, Z+13
        LDD     R18, Z+14
        LDD     R19, Z+15
        LDD     R4, Z+8
        LDD     R5, Z+9
        LDD     R6, Z+10
        LDD     R7, Z+11
        MOVW    R9:R8, R5:R4
        MOVW    R11:R10, R7:R6
        SUB     R8, R16
        SBC     R9, R17
        SBC     R10, R18
        SBC     R11, R19
        LDI     R22, 0
        CP      R8, R20
        CPC     R9, R21
        CPC     R10, R22
        CPC     R11, R22
        BRCC    ??FileStore_ReadBytes_0
//   94 	{
//   95 		length = file->size - file->current;
        MOVW    R25:R24, R5:R4
        SUB     R24, R16
        SBC     R25, R17
//   96 	}
//   97 	
//   98 	readBytes(file->start + file->current, data, length);
??FileStore_ReadBytes_0:
        MOVW    R23:R22, R25:R24
        MOVW    R21:R20, R1:R0
        LDD     R0, Z+4
        LDD     R1, Z+5
        LDD     R2, Z+6
        LDD     R3, Z+7
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R18
        ADC     R3, R19
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LDD     R0, Z+2
        LDD     R1, Z+3
        MOVW    R31:R30, R1:R0
        ICALL
//   99 	file->current += length;
        MOVW    R17:R16, R25:R24
        LDI     R18, 0
        MOVW    R31:R30, R27:R26
        LDD     R20, Z+12
        LDD     R21, Z+13
        LDD     R22, Z+14
        LDD     R23, Z+15
        ADD     R20, R24
        ADC     R21, R25
        ADC     R22, R18
        ADC     R23, R18
        STD     Z+12, R20
        STD     Z+13, R21
        STD     Z+14, R22
        STD     Z+15, R23
//  100 	
//  101 	return length;
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+11
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+10
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+9
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+8
        LD      R4, Y+
        CFI R4 SameValue
        CFI CFA_Y Y+7
        LD      R5, Y+
        CFI R5 SameValue
        CFI CFA_Y Y+6
        LD      R6, Y+
        CFI R6 SameValue
        CFI CFA_Y Y+5
        LD      R7, Y+
        CFI R7 SameValue
        CFI CFA_Y Y+4
        LD      R8, Y+
        CFI R8 SameValue
        CFI CFA_Y Y+3
        LD      R9, Y+
        CFI R9 SameValue
        CFI CFA_Y Y+2
        LD      R10, Y+
        CFI R10 SameValue
        CFI CFA_Y Y+1
        LD      R11, Y+
        CFI R11 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock4
//  102 }
//  103 
//  104 /*
//  105 unsigned long FileStore_ReadLine(fsFile* file, unsigned char* data, unsigned short maxLength)
//  106 {
//  107 unsigned char t;
//  108 unsigned long count=0;
//  109 
//  110 while(count < maxLength)
//  111 {
//  112 if(FileStore_ReadBytes(file, &t, 1)==1)
//  113 {
//  114 *data++ == t;
//  115 		}
//  116 
//  117 	}
//  118 
//  119 return maxLength;
//  120 }
//  121 */
//  122 

        RSEG CODE:CODE:NOROOT(1)
//  123 bool FileStore_GetNextFileEntry(fsFile* file, bool getFirst)
FileStore_GetNextFileEntry:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function FileStore_GetNextFileEntry
//  124 {
        FUNCALL FileStore_GetNextFileEntry, FindNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_GetNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_GetNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FileStore_GetNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R5:R4, R17:R16
//  125 	unsigned long index;
//  126 	
//  127 	if(getFirst)
        TST     R18
        BREQ    ??FileStore_GetNextFileEntry_0
//  128 	{
//  129 		index = 0;
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
        RJMP    ??FileStore_GetNextFileEntry_1
//  130 	}
//  131 	else
//  132 	{
//  133 		index = FindNextFileEntry(file->index);
??FileStore_GetNextFileEntry_0:
        MOVW    R31:R30, R17:R16
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        RCALL   FindNextFileEntry
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  134 	}
//  135 	
//  136 	if((readByte(index + OFFSET_FLAGS) & FLAG_TYPE) != FLAG_FILE)
??FileStore_GetNextFileEntry_1:
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R31:R30, R21:R20
        ICALL
        ANDI    R16, 0x03
        CPI     R16, 1
        BREQ    ??FileStore_GetNextFileEntry_2
//  137 	{
//  138 		return false;
        LDI     R16, 0
        RJMP    ??FileStore_GetNextFileEntry_3
//  139 	}
//  140 	
//  141 	file->index = index;
??FileStore_GetNextFileEntry_2:
        MOVW    R31:R30, R5:R4
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
//  142 	file->start = readLong(index + OFFSET_START);
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        SUBI    R16, 255
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LDD     R20, Z+4
        LDD     R21, Z+5
        MOVW    R31:R30, R21:R20
        ICALL
        MOVW    R31:R30, R5:R4
        STD     Z+4, R16
        STD     Z+5, R17
        STD     Z+6, R18
        STD     Z+7, R19
//  143 	file->size = readLong(index + OFFSET_SIZE);
        SUBI    R24, 251
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LDD     R20, Z+4
        LDD     R21, Z+5
        MOVW    R31:R30, R21:R20
        ICALL
        MOVW    R31:R30, R5:R4
        STD     Z+8, R16
        STD     Z+9, R17
        STD     Z+10, R18
        STD     Z+11, R19
//  144 	file->current = 0;
        LDI     R16, 0
        STD     Z+12, R16
        STD     Z+13, R16
        STD     Z+14, R16
        STD     Z+15, R16
//  145 	
//  146 	return true;
        LDI     R16, 1
        CFI EndBlock cfiBlock5
??FileStore_GetNextFileEntry_3:
        REQUIRE ?Subroutine1
        ;               // Fall through to label ?Subroutine1
//  147 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_Y Y+6
        CFI R4 Frame(CFA_Y, -2)
        CFI R5 Frame(CFA_Y, -1)
        CFI R24 Frame(CFA_Y, -6)
        CFI R25 Frame(CFA_Y, -5)
        CFI R26 Frame(CFA_Y, -4)
        CFI R27 Frame(CFA_Y, -3)
        LD      R24, Y+
        CFI CFA_Y Y+5
        CFI R24 SameValue
        LD      R25, Y+
        CFI CFA_Y Y+4
        CFI R25 SameValue
        LD      R26, Y+
        CFI CFA_Y Y+3
        CFI R26 SameValue
        LD      R27, Y+
        CFI CFA_Y Y+2
        CFI R27 SameValue
        LD      R4, Y+
        CFI CFA_Y Y+1
        CFI R4 SameValue
        LD      R5, Y+
        CFI CFA_Y Y+0
        CFI R5 SameValue
        RET
        CFI EndBlock cfiBlock6
//  148 
//  149 
//  150 
//  151 ////////////////////////////////////////////////////////////////////////////////////////
//  152 
//  153 
//  154 /*
//  155 Given a pointer to a valid file entry a pointer to the next file entry is returned.
//  156 If the current entry is not valid the same entry is returned.
//  157 No check is made to ensure that the entry found is valid!
//  158 */

        RSEG CODE:CODE:NOROOT(1)
//  159 unsigned long FindNextFileEntry(unsigned long current)
FindNextFileEntry:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function FindNextFileEntry
//  160 {
        FUNCALL FindNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL FindNextFileEntry
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R7
        CFI R7 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R6
        CFI R6 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  161 	unsigned long next = current;
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  162 	
//  163 	if((readByte(current + OFFSET_FLAGS) & FLAG_TYPE) == FLAG_FILE)
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R31:R30, R21:R20
        ICALL
        ANDI    R16, 0x03
        CPI     R16, 1
        BRNE    ??FindNextFileEntry_0
//  164 	{
//  165 		next = next + ENTRY_SIZE + readByte(current + OFFSET_NAMELENGTH);
        SUBI    R24, 247
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R31:R30, R21:R20
        ICALL
        LDI     R17, 0
        LDI     R18, 0
        SUBI    R16, 246
        SBCI    R17, 255
        ADD     R4, R16
        ADC     R5, R17
        ADC     R6, R18
        ADC     R7, R18
//  166 	}
//  167 	
//  168 	return next;
??FindNextFileEntry_0:
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        RJMP    ?Subroutine0
        CFI EndBlock cfiBlock7
//  169 }
//  170 
//  171 
//  172 /*
//  173 Tests if the file specified by name is located on the index given.
//  174 Returns true if the file is found otherwise false;
//  175 */

        RSEG CODE:CODE:NOROOT(1)
//  176 bool MatchFileName(char* name, unsigned long index)
MatchFileName:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function MatchFileName
//  177 {
        FUNCALL MatchFileName
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL MatchFileName
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ST      -Y, R5
        CFI R5 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R4
        CFI R4 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R5:R4, R17:R16
        MOVW    R25:R24, R21:R20
        MOVW    R27:R26, R23:R22
//  178 	if((readByte(index + OFFSET_FLAGS) & FLAG_TYPE) != FLAG_FILE)
        MOVW    R17:R16, R21:R20
        MOVW    R19:R18, R23:R22
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R31:R30, R21:R20
        ICALL
        ANDI    R16, 0x03
        CPI     R16, 1
        BREQ    ??MatchFileName_0
//  179 	{
//  180 		return false;
??MatchFileName_1:
        LDI     R16, 0
        RJMP    ??MatchFileName_2
//  181 	}
//  182 	
//  183 	index += OFFSET_NAME;
??MatchFileName_0:
        SUBI    R24, 246
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        RJMP    ??MatchFileName_3
//  184 	
//  185 	while(*name)
//  186 	{
//  187 		if(readByte(index++) != *name++)
??MatchFileName_4:
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        LDI     R30, LOW(readByte)
        LDI     R31, (readByte) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R31:R30, R21:R20
        ICALL
        SUBI    R24, 255
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R31:R30, R5:R4
        LD      R17, Z+
        MOVW    R5:R4, R31:R30
        CP      R16, R17
        BRNE    ??MatchFileName_1
//  188 		{
//  189 			return false;
//  190 		}
//  191 	}
??MatchFileName_3:
        MOVW    R31:R30, R5:R4
        LD      R16, Z
        TST     R16
        BRNE    ??MatchFileName_4
//  192 	
//  193 	return true;
        LDI     R16, 1
??MatchFileName_2:
        RJMP    ?Subroutine1
        CFI EndBlock cfiBlock8
//  194 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DW      SFE(NEAR_Z) - SFB(NEAR_Z)
        DW      SFB(NEAR_Z)
        DW      0
        REQUIRE ?need_segment_init

        END
// 
// 832 bytes in segment CODE
//   6 bytes in segment INITTAB
//   6 bytes in segment NEAR_Z
// 
// 832 bytes of CODE memory (+ 6 bytes shared)
//   6 bytes of DATA memory
//
//Errors: none
//Warnings: none
