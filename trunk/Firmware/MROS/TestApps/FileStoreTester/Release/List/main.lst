##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version26/Feb/2008  21:09:00 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\m #
#                    ain.c                                                   #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    FileStoreTester\Release\Obj\ -I "C:\Program Files\IAR   #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\ -lCN                      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\List\ -e --initializers_in_flash -s9             #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\T #
#                    estApps\FileStoreTester\main.c                          #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\List\main.lst                                    #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\FileStoreTester\R #
#                    elease\Obj\main.r90                                     #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <FileStore/FileStore.h>
      2          #include <FileStore/InternalEEPROM.h>
      3          #include <Peripherals/UART.h>
      4          
      5          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      6          fsfile f;
   \   fsfile __near f;
   \                     f:
   \   00000000                              DS 16

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      7          unsigned char buf[100];
   \   unsigned char __near buf[100];
   \                     buf:
   \   00000000                              DS 100
      8          
      9          

   \                                 In segment NEAR_F, align 1, keep-with-next
     10          string txt1[]="Hello\n";
   \   char const __flash txt1[7];
   \                     txt1:
   \   00000000   65486C6C0A6F               DB "Hello\012"
   \            00          
     11          string txt2[]="Error opening file!";
   \   char const __flash txt2[20];
   \                     txt2:
   \   00000007   72456F722072               DB "Error opening file!"
   \            706F6E656E69
   \            20676966656C
   \            0021        
     12          string txt3[]="\nDone :)";
   \   char const __flash txt3[9];
   \                     txt3:
   \   0000001B   440A6E6F2065               DB "\012Done :)"
   \            293A00      
     13          
     14          

   \                                 In segment CODE, align 2, keep-with-next
     15          void main()
     16          {
   \   __nearfunc void main();
   \                     main:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   939A                       ST      -Y,R25
   \   00000006   938A                       ST      -Y,R24
     17          unsigned long bytes;
     18          
     19          	FileStore_Init(InternalEEPROM_ReadByte, InternalEEPROM_ReadBytes, InternalEEPROM_ReadLong);
   \   00000008   ....                       LDI     R20,LOW(InternalEEPROM_ReadLong/2)
   \   0000000A   ....                       LDI     R21,(InternalEEPROM_ReadLong/2) >> 8
   \   0000000C   ....                       LDI     R18,LOW(InternalEEPROM_ReadBytes/2)
   \   0000000E   ....                       LDI     R19,(InternalEEPROM_ReadBytes/2) >> 8
   \   00000010   ....                       LDI     R16,LOW(InternalEEPROM_ReadByte/2)
   \   00000012   ....                       LDI     R17,(InternalEEPROM_ReadByte/2) >> 8
   \   00000014   ........                   CALL    FileStore_Init
     20          
     21          	UART_Init(11);
   \   00000018   E00B                       LDI     R16,11
   \   0000001A   E010                       LDI     R17,0
   \   0000001C   ........                   CALL    UART_Init
     22          
     23          	UART_WriteString_P(txt1);
   \   00000020   ....                       LDI     R16,LOW(txt1)
   \   00000022   ....                       LDI     R17,(txt1) >> 8
   \   00000024   ........                   CALL    UART_WriteString_P
     24          
     25          	if(FileStore_OpenFile("text.bat", &f) == false)
   \   00000028   ....                       LDI     R18,LOW(f)
   \   0000002A   ....                       LDI     R19,(f) >> 8
   \   0000002C   ....                       LDI     R16,LOW(`?<Constant "text.bat">`)
   \   0000002E   ....                       LDI     R17,(`?<Constant "text.bat">`) >> 8
   \   00000030   ........                   CALL    FileStore_OpenFile
   \   00000034   2300                       TST     R16
   \   00000036   F429                       BRNE    ??main_0
     26          	{
     27          		UART_WriteString_P(txt2);
   \   00000038   ....                       LDI     R16,LOW(txt2)
   \   0000003A   ....                       LDI     R17,(txt2) >> 8
   \   0000003C   ........                   CALL    UART_WriteString_P
     28          		while(true);
   \                     ??main_1:
   \   00000040   CFFF                       RJMP    ??main_1
     29          	}
     30          
     31          	do
     32          	{
     33          		bytes = FileStore_ReadBytes(&f, buf, 20);
   \                     ??main_0:
   \   00000042   E144                       LDI     R20,20
   \   00000044   E050                       LDI     R21,0
   \   00000046   ....                       LDI     R18,LOW(buf)
   \   00000048   ....                       LDI     R19,(buf) >> 8
   \   0000004A   ....                       LDI     R16,LOW(f)
   \   0000004C   ....                       LDI     R17,(f) >> 8
   \   0000004E   ........                   CALL    FileStore_ReadBytes
   \   00000052   01C8                       MOVW    R25 : R24,R17 : R16
   \   00000054   01D9                       MOVW    R27 : R26,R19 : R18
     34          		UART_WriteBytes(buf, bytes);
   \   00000056   2F20                       MOV     R18,R16
   \   00000058   ....                       LDI     R16,LOW(buf)
   \   0000005A   ....                       LDI     R17,(buf) >> 8
   \   0000005C   ........                   CALL    UART_WriteBytes
     35          	} while(bytes == 20);
   \   00000060   3184                       CPI     R24,20
   \   00000062   4090                       SBCI    R25,0
   \   00000064   40A0                       SBCI    R26,0
   \   00000066   40B0                       SBCI    R27,0
   \   00000068   F361                       BREQ    ??main_0
     36          	
     37          	UART_WriteString_P(txt3);
   \   0000006A   ....                       LDI     R16,LOW(txt3)
   \   0000006C   ....                       LDI     R17,(txt3) >> 8
   \   0000006E   ........                   CALL    UART_WriteString_P
     38          	
     39          	while(true);
   \                     ??main_2:
   \   00000072   CFFF                       RJMP    ??main_2
     40          }

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant "text.bat">[9];
   \                     `?<Constant "text.bat">`:
   \   00000000                              DS 9
   \   00000009                              REQUIRE `?<Initializer for <Constant "text.bat">>`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "text.bat">>`:
   \   00000000   65747478622E               DB "text.bat"
   \            746100      

   Maximum stack usage in bytes:

     Function                  CSTACK  RSTACK
     --------                  ------  ------
     main                          4       2 
       -> FileStore_Init           4       2 
       -> UART_Init                4       2 
       -> UART_WriteString_P       4       2 
       -> FileStore_OpenFile       4       2 
       -> UART_WriteString_P       4       2 
       -> FileStore_ReadBytes      4       2 
       -> UART_WriteBytes          4       2 
       -> UART_WriteString_P       4       2 

 
    116 bytes in segment CODE
     12 bytes in segment INITTAB
     36 bytes in segment NEAR_F
      9 bytes in segment NEAR_I
      9 bytes in segment NEAR_ID
    116 bytes in segment NEAR_Z
 
    161 bytes of CODE memory (+ 12 bytes shared)
    125 bytes of DATA memory

Errors: none
Warnings: none
