##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version21/Dec/2007  23:42:52 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\MemoryManagement.c  #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    KernelTester\Release\Obj\ -I                            #
#                    C:\PROGRA~1\IARSYS~1\EW23EV~1\avr\SRC\CLIB\INC\ -I      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\ -I  #
#                    f:\Projects\[Drivers]\C\MROS\ -lC                       #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\Ker #
#                    nelTester\Release\List\ -e --initializers_in_flash -s9  #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\K #
#                    ernel\MemoryManagement.c                                #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\MemoryManagement.lst                           #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\Obj\MemoryManagement.r90                            #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <Globals.h>
      2          #include <Config.h>
      3          #include "MemoryManagement.h"
      4          #include "Kernel.h"
      5          #include "KernelInternals.h"
      6          
      7          
      8          typedef struct
      9          {
     10          	bool free;
     11          	unsigned short size;
     12          	void* next;
     13          } block;
     14          
     15          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     16          static unsigned char heap[HEAP_SIZE];
   \   static unsigned char __near heap[1000];
   \                     heap:
   \   00000000                              DS 1000
     17          
     18          
     19          static void JoinFreeAdjacentBlocks();
     20          
     21          

   \                                 In segment CODE, align 2, keep-with-next
     22          void Kernel_InitHeap()
     23          {
     24          block* b = (block*)heap;
     25          
     26          	b->free = true;
   \   __nearfunc void Kernel_InitHeap();
   \                     Kernel_InitHeap:
   \   00000000   ....                       LDI     R30,LOW(heap)
   \   00000002   ....                       LDI     R31,(heap) >> 8
   \   00000004   E001                       LDI     R16,1
   \   00000006   8300                       ST      Z,R16
     27          	b->size = HEAP_SIZE - sizeof(block);
   \   00000008   EE03                       LDI     R16,227
   \   0000000A   E013                       LDI     R17,3
   \   0000000C   8301                       STD     Z+1,R16
   \   0000000E   8312                       STD     Z+2,R17
     28          	b->next = null;
   \   00000010   E000                       LDI     R16,0
   \   00000012   8303                       STD     Z+3,R16
   \   00000014   8304                       STD     Z+4,R16
     29          }
   \   00000016   9508                       RET
     30          
     31          

   \                                 In segment CODE, align 2, keep-with-next
     32          void* Kernel_Allocate(unsigned short size)
     33          {
   \   __nearfunc void *Kernel_Allocate(unsigned short);
   \                     Kernel_Allocate:
   \   00000000   2E1B                       MOV     R1,R27
   \   00000002   2E0A                       MOV     R0,R26
   \   00000004   2F79                       MOV     R23,R25
   \   00000006   2F68                       MOV     R22,R24
   \   00000008   0198                       MOVW    R19 : R18,R17 : R16
     34          block* b = (block*)heap;
   \   0000000A   ....                       LDI     R30,LOW(heap)
   \   0000000C   ....                       LDI     R31,(heap) >> 8
   \   0000000E   C001                       RJMP    ??Kernel_Allocate_0
     35          block* split;
     36          
     37          	while((b->free != true || b->size < size) && b->next != null)
     38          	{
     39          		b = (block*)b->next;
   \                     ??Kernel_Allocate_1:
   \   00000010   01F8                       MOVW    R31 : R30,R17 : R16
   \                     ??Kernel_Allocate_0:
   \   00000012   8100                       LD      R16,Z
   \   00000014   3001                       CPI     R16,1
   \   00000016   F429                       BRNE    ??Kernel_Allocate_2
   \   00000018   8101                       LDD     R16,Z+1
   \   0000001A   8112                       LDD     R17,Z+2
   \   0000001C   1702                       CP      R16,R18
   \   0000001E   0713                       CPC     R17,R19
   \   00000020   F428                       BRCC    ??Kernel_Allocate_3
   \                     ??Kernel_Allocate_2:
   \   00000022   8103                       LDD     R16,Z+3
   \   00000024   8114                       LDD     R17,Z+4
   \   00000026   2F40                       MOV     R20,R16
   \   00000028   2B41                       OR      R20,R17
   \   0000002A   F791                       BRNE    ??Kernel_Allocate_1
     40          	}
     41          	
     42          	if(b->free != true || b->size < size)																									// Found a valid block?
   \                     ??Kernel_Allocate_3:
   \   0000002C   8100                       LD      R16,Z
   \   0000002E   3001                       CPI     R16,1
   \   00000030   F429                       BRNE    ??Kernel_Allocate_4
   \   00000032   8181                       LDD     R24,Z+1
   \   00000034   8192                       LDD     R25,Z+2
   \   00000036   1782                       CP      R24,R18
   \   00000038   0793                       CPC     R25,R19
   \   0000003A   F418                       BRCC    ??Kernel_Allocate_5
     43          	{
     44          		return null;																																					// No
   \                     ??Kernel_Allocate_4:
   \   0000003C   E000                       LDI     R16,0
   \   0000003E   E010                       LDI     R17,0
   \   00000040   C024                       RJMP    ??Kernel_Allocate_6
     45          	}
     46          	
     47          	if(b->size > (size + sizeof(block)))																									// Split block, return first part and mark last part as free
   \                     ??Kernel_Allocate_5:
   \   00000042   018F                       MOVW    R17 : R16,R31 : R30
   \   00000044   5F0B                       SUBI    R16,251
   \   00000046   4F1F                       SBCI    R17,255
   \   00000048   01D9                       MOVW    R27 : R26,R19 : R18
   \   0000004A   9615                       ADIW    R27 : R26,5
   \   0000004C   17A8                       CP      R26,R24
   \   0000004E   07B9                       CPC     R27,R25
   \   00000050   F4D0                       BRCC    ??Kernel_Allocate_7
     48          	{
     49          		split = (block*)((unsigned char*)b + sizeof(block) + size);
   \   00000052   01DF                       MOVW    R27 : R26,R31 : R30
   \   00000054   9615                       ADIW    R27 : R26,5
   \   00000056   0FA2                       ADD     R26,R18
   \   00000058   1FB3                       ADC     R27,R19
     50          		split->free = true;
   \   0000005A   E041                       LDI     R20,1
   \   0000005C   934C                       ST      X,R20
     51          		split->size = b->size - size - sizeof(block);
   \   0000005E   1B82                       SUB     R24,R18
   \   00000060   0B93                       SBC     R25,R19
   \   00000062   9705                       SBIW    R25 : R24,5
   \   00000064   9611                       ADIW    R27 : R26,1
   \   00000066   938D                       ST      X+,R24
   \   00000068   939C                       ST      X,R25
   \   0000006A   9712                       SBIW    R27 : R26,2
     52          		split->next = b->next;
   \   0000006C   8143                       LDD     R20,Z+3
   \   0000006E   8154                       LDD     R21,Z+4
   \   00000070   9613                       ADIW    R27 : R26,3
   \   00000072   934D                       ST      X+,R20
   \   00000074   935C                       ST      X,R21
   \   00000076   9714                       SBIW    R27 : R26,4
     53          		
     54          		b->free = false;
   \   00000078   E040                       LDI     R20,0
   \   0000007A   8340                       ST      Z,R20
     55          		b->size = size;
   \   0000007C   8321                       STD     Z+1,R18
   \   0000007E   8332                       STD     Z+2,R19
     56          		b->next = split;
   \   00000080   83A3                       STD     Z+3,R26
   \   00000082   83B4                       STD     Z+4,R27
     57          		
     58          		return (void*)((unsigned short)b + sizeof(block));
   \   00000084   C002                       RJMP    ??Kernel_Allocate_6
     59          	}
     60          	else																																									// Block is too small to split - return all
     61          	{
     62          		b->free = false;
   \                     ??Kernel_Allocate_7:
   \   00000086   E020                       LDI     R18,0
   \   00000088   8320                       ST      Z,R18
     63          		return (void*)((unsigned short)b + sizeof(block));
   \                     ??Kernel_Allocate_6:
   \   0000008A   2F86                       MOV     R24,R22
   \   0000008C   2F97                       MOV     R25,R23
   \   0000008E   2DA0                       MOV     R26,R0
   \   00000090   2DB1                       MOV     R27,R1
   \   00000092   9508                       RET
     64          	}
     65          }
     66          
     67          

   \                                 In segment CODE, align 2, keep-with-next
     68          void Kernel_Deallocate(void* pointer)
     69          {
   \   __nearfunc void Kernel_Deallocate(void *);
   \                     Kernel_Deallocate:
   \   00000000   2F5B                       MOV     R21,R27
   \   00000002   2F6A                       MOV     R22,R26
     70          block* b = (block*)heap;
   \   00000004   ....                       LDI     R30,LOW(heap)
   \   00000006   ....                       LDI     R31,(heap) >> 8
     71          block* p = (block*)((unsigned short)pointer - sizeof(block));
   \   00000008   5005                       SUBI    R16,5
   \   0000000A   4010                       SBCI    R17,0
   \   0000000C   C006                       RJMP    ??Kernel_Deallocate_0
   \                     ??Kernel_Deallocate_1:
   \   0000000E   8123                       LDD     R18,Z+3
   \   00000010   8134                       LDD     R19,Z+4
   \   00000012   2F42                       MOV     R20,R18
   \   00000014   2B43                       OR      R20,R19
   \   00000016   F141                       BREQ    ??Kernel_Deallocate_2
     72          	
     73          	while(b != p && b->next != null)
     74          	{
     75          		b = (block*)b->next;
   \   00000018   01F9                       MOVW    R31 : R30,R19 : R18
   \                     ??Kernel_Deallocate_0:
   \   0000001A   17E0                       CP      R30,R16
   \   0000001C   07F1                       CPC     R31,R17
   \   0000001E   F7B9                       BRNE    ??Kernel_Deallocate_1
     76          	}
     77          	
     78          	if(b != p)
     79          	{
     80          		return;																																								// Invalid pointer
     81          	}
     82          	
     83          	b->free = true;
   \   00000020   E001                       LDI     R16,1
   \   00000022   8300                       ST      Z,R16
     84          
     85          	JoinFreeAdjacentBlocks();
   \   00000024   ....                       LDI     R30,LOW(heap)
   \   00000026   ....                       LDI     R31,(heap) >> 8
   \   00000028   C011                       RJMP    ??Kernel_Deallocate_3
   \                     ??Kernel_Deallocate_4:
   \   0000002A   9611                       ADIW    R27 : R26,1
   \   0000002C   910D                       LD      R16,X+
   \   0000002E   911C                       LD      R17,X
   \   00000030   9712                       SBIW    R27 : R26,2
   \   00000032   5F0B                       SUBI    R16,251
   \   00000034   4F1F                       SBCI    R17,255
   \   00000036   8121                       LDD     R18,Z+1
   \   00000038   8132                       LDD     R19,Z+2
   \   0000003A   0F20                       ADD     R18,R16
   \   0000003C   1F31                       ADC     R19,R17
   \   0000003E   8321                       STD     Z+1,R18
   \   00000040   8332                       STD     Z+2,R19
   \   00000042   9613                       ADIW    R27 : R26,3
   \   00000044   910D                       LD      R16,X+
   \   00000046   911C                       LD      R17,X
   \   00000048   8303                       STD     Z+3,R16
   \   0000004A   8314                       STD     Z+4,R17
   \                     ??Kernel_Deallocate_3:
   \   0000004C   8103                       LDD     R16,Z+3
   \   0000004E   8114                       LDD     R17,Z+4
   \   00000050   2F20                       MOV     R18,R16
   \   00000052   2B21                       OR      R18,R17
   \   00000054   F049                       BREQ    ??Kernel_Deallocate_2
   \   00000056   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000058   8120                       LD      R18,Z
   \   0000005A   3021                       CPI     R18,1
   \   0000005C   F419                       BRNE    ??Kernel_Deallocate_5
   \   0000005E   912C                       LD      R18,X
   \   00000060   3021                       CPI     R18,1
   \   00000062   F319                       BREQ    ??Kernel_Deallocate_4
   \                     ??Kernel_Deallocate_5:
   \   00000064   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000066   CFF2                       RJMP    ??Kernel_Deallocate_3
   \                     ??Kernel_Deallocate_2:
   \   00000068   2FA6                       MOV     R26,R22
   \   0000006A   2FB5                       MOV     R27,R21
   \   0000006C   9508                       RET
     86          }
     87          
     88          
     89          static void JoinFreeAdjacentBlocks()
     90          {
     91          block* b = (block*)heap;
     92          block* next;
     93          
     94          	while(b->next != null)
     95          	{
     96          		next = (block*)b->next;
     97          		if(b->free == true && next->free == true)
     98          		{
     99          			b->size += next->size + sizeof(block);
    100          			b->next = next->next;
    101          		}
    102          		else
    103          		{
    104          			b = (block*)b->next;
    105          		}
    106          	}
    107          }

   Maximum stack usage in bytes:

     Function           CSTACK  RSTACK
     --------           ------  ------
     Kernel_Allocate        0       0 
     Kernel_Deallocate      0       0 
     Kernel_InitHeap        0       0 

 
    282 bytes in segment CODE
      6 bytes in segment INITTAB
   1000 bytes in segment NEAR_Z
 
    282 bytes of CODE memory (+ 6 bytes shared)
   1000 bytes of DATA memory

Errors: none
Warnings: none
