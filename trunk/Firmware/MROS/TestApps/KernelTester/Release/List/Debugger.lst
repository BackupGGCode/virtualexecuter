##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version21/Dec/2007  23:42:52 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\Debugger.c          #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    KernelTester\Release\Obj\ -I                            #
#                    C:\PROGRA~1\IARSYS~1\EW23EV~1\avr\SRC\CLIB\INC\ -I      #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\ -I  #
#                    f:\Projects\[Drivers]\C\MROS\ -lC                       #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\ -lA f:\Projects\[Drivers]\C\MROS\TestApps\Ker #
#                    nelTester\Release\List\ -e --initializers_in_flash -s9  #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\K #
#                    ernel\Debugger.c                                        #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\List\Debugger.lst                                   #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\KernelTester\Rele #
#                    ase\Obj\Debugger.r90                                    #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include <Peripherals/UART.h>
      2          #include "KernelInternals.h"
      3          #include "Kernel.h"
      4          
      5          
      6          #define SOP																			0x00
      7          #define EOP																			0x01
      8          
      9          

   \                                 In segment CODE, align 2, keep-with-next
     10          void Hexify(unsigned char value, unsigned char* destination)
     11          {
     12          	destination[0] = value&0x0f;
   \   __nearfunc void Hexify(unsigned char, unsigned char *);
   \                     Hexify:
   \   00000000   2F10                       MOV     R17,R16
   \   00000002   701F                       ANDI    R17,0x0F
   \   00000004   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000006   8310                       ST      Z,R17
     13          	destination[1] = (value>>4)&0x0f;
   \   00000008   9502                       SWAP    R16
   \   0000000A   700F                       ANDI    R16,0x0F
   \   0000000C   8301                       STD     Z+1,R16
     14          }
   \   0000000E   9508                       RET
     15          
     16          

   \                                 In segment CODE, align 2, keep-with-next
     17          void Kernel_InitDebugger()
     18          {
     19          	UART_Init(DEBUGGER_BAUDRATE);
   \   __nearfunc void Kernel_InitDebugger();
   \                     Kernel_InitDebugger:
   \   00000000   E00B                       LDI     R16,11
   \   00000002   E010                       LDI     R17,0
   \   00000004   ........                   JMP     UART_Init
     20          }
     21          
     22          

   \                                 In segment CODE, align 2, keep-with-next
     23          void Kernel_DebuggerEvent(unsigned char event, task target, unsigned char status, unsigned long extended)
     24          {
   \   __nearfunc void Kernel_DebuggerEvent(unsigned char, task, unsigned char, unsigned long);
   \                     Kernel_DebuggerEvent:
   \   00000000   929A                       ST      -Y,R9
   \   00000002   928A                       ST      -Y,R8
   \   00000004   927A                       ST      -Y,R7
   \   00000006   926A                       ST      -Y,R6
   \   00000008   925A                       ST      -Y,R5
   \   0000000A   924A                       ST      -Y,R4
   \   0000000C   93BA                       ST      -Y,R27
   \   0000000E   93AA                       ST      -Y,R26
   \   00000010   939A                       ST      -Y,R25
   \   00000012   938A                       ST      -Y,R24
   \   00000014                              REQUIRE ?Register_R4_is_cg_reg
   \   00000014                              REQUIRE ?Register_R5_is_cg_reg
   \   00000014                              REQUIRE ?Register_R6_is_cg_reg
   \   00000014                              REQUIRE ?Register_R7_is_cg_reg
   \   00000014                              REQUIRE ?Register_R8_is_cg_reg
   \   00000014                              REQUIRE ?Register_R9_is_cg_reg
   \   00000014   976C                       SBIW    R29 : R28,28
   \   00000016   2E70                       MOV     R7,R16
   \   00000018   0129                       MOVW    R5 : R4,R19 : R18
   \   0000001A   2E61                       MOV     R6,R17
   \   0000001C   01CA                       MOVW    R25 : R24,R21 : R20
   \   0000001E   01DB                       MOVW    R27 : R26,R23 : R22
     25          unsigned char buffer[2*14];
     26          unsigned char i, current, count;
     27          unsigned short caller = (unsigned short)CurrentTask();
   \   00000020   9120....                   LDS     R18,currentTaskIndex
   \   00000024   E030                       LDI     R19,0
   \   00000026   E00D                       LDI     R16,13
   \   00000028   E010                       LDI     R17,0
   \   0000002A   9F12                       MUL     R17,R18
   \   0000002C   2D10                       MOV     R17,R0
   \   0000002E   9F03                       MUL     R16,R19
   \   00000030   0D10                       ADD     R17,R0
   \   00000032   9F02                       MUL     R16,R18
   \   00000034   2D00                       MOV     R16,R0
   \   00000036   0D11                       ADD     R17,R1
   \   00000038   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000003A   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   0000003C   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   0000003E   8080                       LD      R8,Z
   \   00000040   8091                       LDD     R9,Z+1
     28          
     29          	putc(SOP);
   \   00000042   E000                       LDI     R16,0
   \   00000044   ........                   CALL    putc
     30          
     31          // Put into buffer as non ASCII hex values using two bytes per byte
     32          
     33          	Hexify(event, buffer+0);
   \   00000048   019E                       MOVW    R19 : R18,R29 : R28
   \   0000004A   2D07                       MOV     R16,R7
   \   0000004C   ....                       RCALL   Hexify
     34          	
     35          	Hexify(totalExecutionTime, buffer+2);
   \   0000004E   019E                       MOVW    R19 : R18,R29 : R28
   \   00000050   5F2E                       SUBI    R18,254
   \   00000052   4F3F                       SBCI    R19,255
   \   00000054   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000056   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000058   8100                       LD      R16,Z
   \   0000005A   ....                       RCALL   Hexify
     36          	Hexify(totalExecutionTime>>8, buffer+4);
   \   0000005C   019E                       MOVW    R19 : R18,R29 : R28
   \   0000005E   5F2C                       SUBI    R18,252
   \   00000060   4F3F                       SBCI    R19,255
   \   00000062   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000064   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000066   8101                       LDD     R16,Z+1
   \   00000068   ....                       RCALL   Hexify
     37          	Hexify(totalExecutionTime>>16, buffer+6);
   \   0000006A   019E                       MOVW    R19 : R18,R29 : R28
   \   0000006C   5F2A                       SUBI    R18,250
   \   0000006E   4F3F                       SBCI    R19,255
   \   00000070   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000072   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000074   8102                       LDD     R16,Z+2
   \   00000076   ....                       RCALL   Hexify
     38          	Hexify(totalExecutionTime>>24, buffer+8);
   \   00000078   019E                       MOVW    R19 : R18,R29 : R28
   \   0000007A   5F28                       SUBI    R18,248
   \   0000007C   4F3F                       SBCI    R19,255
   \   0000007E   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000080   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000082   8103                       LDD     R16,Z+3
   \   00000084   ....                       RCALL   Hexify
     39          	
     40          	Hexify(caller, buffer+10);
   \   00000086   019E                       MOVW    R19 : R18,R29 : R28
   \   00000088   5F26                       SUBI    R18,246
   \   0000008A   4F3F                       SBCI    R19,255
   \   0000008C   2D08                       MOV     R16,R8
   \   0000008E   ....                       RCALL   Hexify
     41          	Hexify(caller>>8, buffer+12);
   \   00000090   019E                       MOVW    R19 : R18,R29 : R28
   \   00000092   5F24                       SUBI    R18,244
   \   00000094   4F3F                       SBCI    R19,255
   \   00000096   2D09                       MOV     R16,R9
   \   00000098   ....                       RCALL   Hexify
     42          
     43          	Hexify((unsigned short)target, buffer+14);
   \   0000009A   019E                       MOVW    R19 : R18,R29 : R28
   \   0000009C   5F22                       SUBI    R18,242
   \   0000009E   4F3F                       SBCI    R19,255
   \   000000A0   2D04                       MOV     R16,R4
   \   000000A2   ....                       RCALL   Hexify
     44          	Hexify(((unsigned short)target)>>8, buffer+16);
   \   000000A4   019E                       MOVW    R19 : R18,R29 : R28
   \   000000A6   5F20                       SUBI    R18,240
   \   000000A8   4F3F                       SBCI    R19,255
   \   000000AA   2D05                       MOV     R16,R5
   \   000000AC   ....                       RCALL   Hexify
     45          
     46          	Hexify(status, buffer+18);
   \   000000AE   019E                       MOVW    R19 : R18,R29 : R28
   \   000000B0   5E2E                       SUBI    R18,238
   \   000000B2   4F3F                       SBCI    R19,255
   \   000000B4   2D06                       MOV     R16,R6
   \   000000B6   ....                       RCALL   Hexify
     47          	
     48          	Hexify(extended, buffer+20);
   \   000000B8   019E                       MOVW    R19 : R18,R29 : R28
   \   000000BA   5E2C                       SUBI    R18,236
   \   000000BC   4F3F                       SBCI    R19,255
   \   000000BE   2F08                       MOV     R16,R24
   \   000000C0   ....                       RCALL   Hexify
     49          	Hexify(extended>>8, buffer+22);
   \   000000C2   019E                       MOVW    R19 : R18,R29 : R28
   \   000000C4   5E2A                       SUBI    R18,234
   \   000000C6   4F3F                       SBCI    R19,255
   \   000000C8   2F09                       MOV     R16,R25
   \   000000CA   ....                       RCALL   Hexify
     50          	Hexify(extended>>16, buffer+24);
   \   000000CC   019E                       MOVW    R19 : R18,R29 : R28
   \   000000CE   5E28                       SUBI    R18,232
   \   000000D0   4F3F                       SBCI    R19,255
   \   000000D2   2F0A                       MOV     R16,R26
   \   000000D4   ....                       RCALL   Hexify
     51          	Hexify(extended>>24, buffer+26);
   \   000000D6   019E                       MOVW    R19 : R18,R29 : R28
   \   000000D8   5E26                       SUBI    R18,230
   \   000000DA   4F3F                       SBCI    R19,255
   \   000000DC   2F0B                       MOV     R16,R27
   \   000000DE   ....                       RCALL   Hexify
     52          
     53          
     54          // Compress (RLE) the buffer and send the compressed frame
     55          	current = buffer[0];
   \   000000E0   8118                       LD      R17,Y
     56          	count = 1;
   \   000000E2   E001                       LDI     R16,1
     57          	
     58          	for(i = 1; i < (2*14); i++)
   \   000000E4   01DE                       MOVW    R27 : R26,R29 : R28
   \   000000E6   9611                       ADIW    R27 : R26,1
   \   000000E8   E18B                       LDI     R24,27
     59          	{
     60          		if(buffer[i] == current && count < 15)
   \                     ??Kernel_DebuggerEvent_0:
   \   000000EA   912C                       LD      R18,X
   \   000000EC   1721                       CP      R18,R17
   \   000000EE   F421                       BRNE    ??Kernel_DebuggerEvent_1
   \   000000F0   300F                       CPI     R16,15
   \   000000F2   F410                       BRCC    ??Kernel_DebuggerEvent_1
     61          		{
     62          			count++;
   \   000000F4   9503                       INC     R16
   \   000000F6   C007                       RJMP    ??Kernel_DebuggerEvent_2
     63          		}
     64          		else
     65          		{
     66          			putc( ((count)<<4) | current );
   \                     ??Kernel_DebuggerEvent_1:
   \   000000F8   9502                       SWAP    R16
   \   000000FA   7F00                       ANDI    R16,0xF0
   \   000000FC   2B01                       OR      R16,R17
   \   000000FE   ........                   CALL    putc
     67          			current = buffer[i];
   \   00000102   911C                       LD      R17,X
     68          			count = 1;
   \   00000104   E001                       LDI     R16,1
   \                     ??Kernel_DebuggerEvent_2:
   \   00000106   9611                       ADIW    R27 : R26,1
   \   00000108   958A                       DEC     R24
   \   0000010A   F779                       BRNE    ??Kernel_DebuggerEvent_0
     69          		}
     70          	}
     71          	putc( ((count)<<4) | current );
   \   0000010C   9502                       SWAP    R16
   \   0000010E   7F00                       ANDI    R16,0xF0
   \   00000110   2B01                       OR      R16,R17
   \   00000112   ........                   CALL    putc
     72          	
     73          	putc(EOP);
   \   00000116   E001                       LDI     R16,1
   \   00000118   ........                   CALL    putc
     74          }
   \   0000011C   966C                       ADIW    R29 : R28,28
   \   0000011E   9189                       LD      R24,Y+
   \   00000120   9199                       LD      R25,Y+
   \   00000122   91A9                       LD      R26,Y+
   \   00000124   91B9                       LD      R27,Y+
   \   00000126   9049                       LD      R4,Y+
   \   00000128   9059                       LD      R5,Y+
   \   0000012A   9069                       LD      R6,Y+
   \   0000012C   9079                       LD      R7,Y+
   \   0000012E   9089                       LD      R8,Y+
   \   00000130   9099                       LD      R9,Y+
   \   00000132   9508                       RET

   Maximum stack usage in bytes:

     Function              CSTACK  RSTACK
     --------              ------  ------
     Hexify                    0       0 
     Kernel_DebuggerEvent     38       2 
       -> putc                38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> Hexify              38       2 
       -> putc                38       2 
       -> putc                38       2 
       -> putc                38       2 
     Kernel_InitDebugger       0       2 
       -> UART_Init            0       2 

 
    332 bytes in segment CODE
 
    332 bytes of CODE memory

Errors: none
Warnings: none
