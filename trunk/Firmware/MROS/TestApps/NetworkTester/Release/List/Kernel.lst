##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:19:36 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Kernel\Kernel.c            #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\K #
#                    ernel\Kernel.c                                          #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\Kernel.lst                                    #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\Kernel.r90                                     #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "Kernel.h"

   \                                 In segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0;
   \                     _A_TCNT0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0;
   \                     _A_OCR0:
   \   00000000                              DS 1
      2          #include "KernelInternals.h"
      3          #include "Timer.h"
      4          #include "Debugger.h"
      5          
      6          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      7          volatile taskStruct taskQueue[MAX_NUMBER_OF_TASKS];
   \   struct <unnamed> volatile __near taskQueue[8];
   \                     taskQueue:
   \   00000000                              DS 104
      8          unsigned char currentTaskIndex = ~0;
      9          unsigned short executionTimer;

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
     10          unsigned long totalExecutionTime;
   \   unsigned long __near totalExecutionTime;
   \                     totalExecutionTime:
   \   00000000                              DS 4
   \   00000004                              REQUIRE `?<Initializer for totalExecutionTime>`
   \   unsigned short __near executionTimer;
   \                     executionTimer:
   \   00000004                              DS 2
   \   00000006                              REQUIRE `?<Initializer for executionTimer>`
   \   unsigned char __near currentTaskIndex;
   \                     currentTaskIndex:
   \   00000006                              DS 1
   \   00000007                              REQUIRE `?<Initializer for currentTaskIndex>`
   \   00000007                              DS 1
   \   00000008                              REQUIRE `?<Initializer for tcnt>`
     11          #if TASKER_DEBUG_LEVEL > 1
     12          unsigned short debugTimer = 0;
     13          #endif
     14          
     15          
     16          /***************************************************************************************************************************
     17          	Removes all tasks from the task queue
     18          ***************************************************************************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     19          void Kernel_InitScheduler(void)
     20          {
     21          unsigned short index;
     22          
     23          #if TASKER_DEBUG_LEVEL > 0
     24          	Kernel_InitDebugger();
     25          #endif
     26          
     27          	// Clearing the task queue this way takes up less code space than using initializer ( ={0} )!
     28          	for(index = 0; index < MAX_NUMBER_OF_TASKS; index++)																	// Clear all task index'
   \   __nearfunc void Kernel_InitScheduler();
   \                     Kernel_InitScheduler:
   \   00000000   ....                       LDI     R30,LOW(taskQueue)
   \   00000002   ....                       LDI     R31,(taskQueue) >> 8
   \   00000004   E008                       LDI     R16,8
     29          	{
     30          		taskQueue[index].theTask = null;
   \                     ??Kernel_InitScheduler_0:
   \   00000006   E020                       LDI     R18,0
   \   00000008   8320                       ST      Z,R18
   \   0000000A   8321                       STD     Z+1,R18
     31          		taskQueue[index].executionTime = 0;
   \   0000000C   8323                       STD     Z+3,R18
   \   0000000E   8324                       STD     Z+4,R18
   \   00000010   8325                       STD     Z+5,R18
   \   00000012   8326                       STD     Z+6,R18
     32          		taskQueue[index].state = TASK_STATE_READY;
   \   00000014   8322                       STD     Z+2,R18
     33          		taskQueue[index].blockingMessageQueue = null;
   \   00000016   8721                       STD     Z+9,R18
   \   00000018   8722                       STD     Z+10,R18
     34          		taskQueue[index].blockingSemaphore = null;
   \   0000001A   8723                       STD     Z+11,R18
   \   0000001C   8724                       STD     Z+12,R18
     35          		taskQueue[index].timer = 0;
   \   0000001E   8327                       STD     Z+7,R18
   \   00000020   8720                       STD     Z+8,R18
   \   00000022   963D                       ADIW    R31 : R30,13
   \   00000024   950A                       DEC     R16
   \   00000026   F779                       BRNE    ??Kernel_InitScheduler_0
     36          	}
     37          	Kernel_InitTimer(SystemTimer);
   \   00000028   ....                       LDI     R16,LOW(SystemTimer/2)
   \   0000002A   ....                       LDI     R17,(SystemTimer/2) >> 8
   \   0000002C   ........                   CALL    Kernel_InitTimer
     38          	NonCritical();
   \   00000030   9478                       SEI
     39          	
     40          #if TASKER_DEBUG_LEVEL > 0
     41          	Kernel_DebuggerEvent(DEBUG_EVENT_INITSCHEDULER, null, DEBUG_STATUS_OK, 0);
     42          #endif
     43          }
   \   00000032   9508                       RET
     44          
     45          
     46          /***************************************************************************************************************************
     47          	Loops through the task queue and calls the tasks
     48          ***************************************************************************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
     49          void Kernel_RunScheduler(void)
     50          {
   \   __nearfunc void Kernel_RunScheduler();
   \                     Kernel_RunScheduler:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   C037                       RJMP    ??Kernel_RunScheduler_0
     51          #if TASKER_DEBUG_LEVEL > 1
     52          static unsigned char debugIndex = 0;
     53          #endif
     54          
     55          static unsigned char tcnt;
     56          
     57          #if TASKER_DEBUG_LEVEL > 0
     58          	Kernel_DebuggerEvent(DEBUG_EVENT_RUNSCHEDULER, null, DEBUG_STATUS_OK, 0);
     59          #endif
     60          		
     61          	while(true)												// Run scheduler forever
     62          	{
     63          //		Critical();
     64          		
     65          		do
     66          		{
     67          			NonCritical();
     68          			__no_operation();
     69          			Critical();
     70          			
     71          			currentTaskIndex++;
     72          			
     73          			if(currentTaskIndex >= MAX_NUMBER_OF_TASKS || taskQueue[currentTaskIndex].theTask == null)
     74          			{
     75          				currentTaskIndex = 0;
     76          			}
     77          		} while(taskQueue[currentTaskIndex].state != TASK_STATE_READY || taskQueue[currentTaskIndex].timer > 0 ||
     78          						taskQueue[currentTaskIndex].blockingMessageQueue != null || taskQueue[currentTaskIndex].blockingSemaphore != null );
     79          		
     80          		executionTimer = 0;
     81          		tcnt = TCNT0;
     82          		
     83          		NonCritical();
     84          		
     85          		taskQueue[currentTaskIndex].theTask();																							// Execute the task
     86          		
     87          		Critical();
     88          		
     89          		executionTimer *= OCR0;
     90          		if(tcnt >= TCNT0)
     91          			executionTimer += ((OCR0+1)-tcnt)+TCNT0;
     92          		else
     93          			executionTimer += TCNT0-tcnt;
   \                     ??Kernel_RunScheduler_1:
   \   00000006   B722                       IN      R18,0x32
   \   00000008   E030                       LDI     R19,0
   \   0000000A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000000C   8107                       LDD     R16,Z+7
   \   0000000E   1B20                       SUB     R18,R16
   \   00000010   4030                       SBCI    R19,0
   \                     ??Kernel_RunScheduler_2:
   \   00000012   8104                       LDD     R16,Z+4
   \   00000014   8115                       LDD     R17,Z+5
   \   00000016   0F02                       ADD     R16,R18
   \   00000018   1F13                       ADC     R17,R19
   \   0000001A   8304                       STD     Z+4,R16
   \   0000001C   8315                       STD     Z+5,R17
     94          		
     95          		totalExecutionTime += executionTimer;
   \   0000001E   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000020   8104                       LDD     R16,Z+4
   \   00000022   8115                       LDD     R17,Z+5
   \   00000024   E020                       LDI     R18,0
   \   00000026   914D                       LD      R20,X+
   \   00000028   915D                       LD      R21,X+
   \   0000002A   916D                       LD      R22,X+
   \   0000002C   917C                       LD      R23,X
   \   0000002E   0F40                       ADD     R20,R16
   \   00000030   1F51                       ADC     R21,R17
   \   00000032   1F62                       ADC     R22,R18
   \   00000034   1F72                       ADC     R23,R18
   \   00000036   937C                       ST      X,R23
   \   00000038   936E                       ST      -X,R22
   \   0000003A   935E                       ST      -X,R21
   \   0000003C   934E                       ST      -X,R20
     96          		
     97          		taskQueue[currentTaskIndex].executionTime += executionTimer;
   \   0000003E   9160....                   LDS     R22,currentTaskIndex
   \   00000042   E070                       LDI     R23,0
   \   00000044   E04D                       LDI     R20,13
   \   00000046   E050                       LDI     R21,0
   \   00000048   9F56                       MUL     R21,R22
   \   0000004A   2D50                       MOV     R21,R0
   \   0000004C   9F47                       MUL     R20,R23
   \   0000004E   0D50                       ADD     R21,R0
   \   00000050   9F46                       MUL     R20,R22
   \   00000052   2D40                       MOV     R20,R0
   \   00000054   0D51                       ADD     R21,R1
   \   00000056   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000058   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   0000005A   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   0000005C   8143                       LDD     R20,Z+3
   \   0000005E   8154                       LDD     R21,Z+4
   \   00000060   8165                       LDD     R22,Z+5
   \   00000062   8176                       LDD     R23,Z+6
   \   00000064   0F40                       ADD     R20,R16
   \   00000066   1F51                       ADC     R21,R17
   \   00000068   1F62                       ADC     R22,R18
   \   0000006A   1F72                       ADC     R23,R18
   \   0000006C   8343                       STD     Z+3,R20
   \   0000006E   8354                       STD     Z+4,R21
   \   00000070   8365                       STD     Z+5,R22
   \   00000072   8376                       STD     Z+6,R23
   \                     ??Kernel_RunScheduler_0:
   \   00000074   9478                       SEI
   \   00000076   0000                       NOP
   \   00000078   94F8                       CLI
   \   0000007A   ....                       LDI     R26,LOW(totalExecutionTime)
   \   0000007C   ....                       LDI     R27,(totalExecutionTime) >> 8
   \   0000007E   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000080   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000082   8106                       LDD     R16,Z+6
   \   00000084   9503                       INC     R16
   \   00000086   8306                       STD     Z+6,R16
   \   00000088   3008                       CPI     R16,8
   \   0000008A   F498                       BRCC    ??Kernel_RunScheduler_3
   \   0000008C   2F20                       MOV     R18,R16
   \   0000008E   E030                       LDI     R19,0
   \   00000090   E00D                       LDI     R16,13
   \   00000092   E010                       LDI     R17,0
   \   00000094   9F12                       MUL     R17,R18
   \   00000096   2D10                       MOV     R17,R0
   \   00000098   9F03                       MUL     R16,R19
   \   0000009A   0D10                       ADD     R17,R0
   \   0000009C   9F02                       MUL     R16,R18
   \   0000009E   2D00                       MOV     R16,R0
   \   000000A0   0D11                       ADD     R17,R1
   \   000000A2   01F8                       MOVW    R31 : R30,R17 : R16
   \   000000A4   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   000000A6   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   000000A8   8120                       LD      R18,Z
   \   000000AA   8131                       LDD     R19,Z+1
   \   000000AC   3020                       CPI     R18,0
   \   000000AE   4030                       SBCI    R19,0
   \   000000B0   F421                       BRNE    ??Kernel_RunScheduler_4
   \                     ??Kernel_RunScheduler_3:
   \   000000B2   E000                       LDI     R16,0
   \   000000B4   ....                       LDI     R30,LOW(totalExecutionTime)
   \   000000B6   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   000000B8   8306                       STD     Z+6,R16
   \                     ??Kernel_RunScheduler_4:
   \   000000BA   ....                       LDI     R30,LOW(taskQueue)
   \   000000BC   ....                       LDI     R31,(taskQueue) >> 8
   \   000000BE   9616                       ADIW    R27 : R26,6
   \   000000C0   912C                       LD      R18,X
   \   000000C2   9716                       SBIW    R27 : R26,6
   \   000000C4   E030                       LDI     R19,0
   \   000000C6   E00D                       LDI     R16,13
   \   000000C8   E010                       LDI     R17,0
   \   000000CA   9F12                       MUL     R17,R18
   \   000000CC   2D10                       MOV     R17,R0
   \   000000CE   9F03                       MUL     R16,R19
   \   000000D0   0D10                       ADD     R17,R0
   \   000000D2   9F02                       MUL     R16,R18
   \   000000D4   0D11                       ADD     R17,R1
   \   000000D6   0DE0                       ADD     R30,R0
   \   000000D8   1FF1                       ADC     R31,R17
   \   000000DA   8102                       LDD     R16,Z+2
   \   000000DC   2300                       TST     R16
   \   000000DE   F651                       BRNE    ??Kernel_RunScheduler_0
   \   000000E0   8107                       LDD     R16,Z+7
   \   000000E2   8510                       LDD     R17,Z+8
   \   000000E4   2B01                       OR      R16,R17
   \   000000E6   F631                       BRNE    ??Kernel_RunScheduler_0
   \   000000E8   8501                       LDD     R16,Z+9
   \   000000EA   8512                       LDD     R17,Z+10
   \   000000EC   2B01                       OR      R16,R17
   \   000000EE   F611                       BRNE    ??Kernel_RunScheduler_0
   \   000000F0   8503                       LDD     R16,Z+11
   \   000000F2   8514                       LDD     R17,Z+12
   \   000000F4   2B01                       OR      R16,R17
   \   000000F6   F009                       BREQ    ??Kernel_RunScheduler_5
   \   000000F8   CFBD                       RJMP    ??Kernel_RunScheduler_0
   \                     ??Kernel_RunScheduler_5:
   \   000000FA   E010                       LDI     R17,0
   \   000000FC   01FD                       MOVW    R31 : R30,R27 : R26
   \   000000FE   8334                       STD     Z+4,R19
   \   00000100   8335                       STD     Z+5,R19
   \   00000102   B702                       IN      R16,0x32
   \   00000104   8307                       STD     Z+7,R16
   \   00000106   9478                       SEI
   \   00000108   8126                       LDD     R18,Z+6
   \   0000010A   E00D                       LDI     R16,13
   \   0000010C   9F12                       MUL     R17,R18
   \   0000010E   2D10                       MOV     R17,R0
   \   00000110   9F03                       MUL     R16,R19
   \   00000112   0D10                       ADD     R17,R0
   \   00000114   9F02                       MUL     R16,R18
   \   00000116   2D00                       MOV     R16,R0
   \   00000118   0D11                       ADD     R17,R1
   \   0000011A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000011C   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   0000011E   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   00000120   8100                       LD      R16,Z
   \   00000122   8111                       LDD     R17,Z+1
   \   00000124   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000126   9509                       ICALL
   \   00000128   94F8                       CLI
   \   0000012A   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000012C   8124                       LDD     R18,Z+4
   \   0000012E   8135                       LDD     R19,Z+5
   \   00000130   B70C                       IN      R16,0x3C
   \   00000132   E010                       LDI     R17,0
   \   00000134   9F12                       MUL     R17,R18
   \   00000136   2D10                       MOV     R17,R0
   \   00000138   9F03                       MUL     R16,R19
   \   0000013A   0D10                       ADD     R17,R0
   \   0000013C   9F02                       MUL     R16,R18
   \   0000013E   0D11                       ADD     R17,R1
   \   00000140   8204                       STD     Z+4,R0
   \   00000142   8315                       STD     Z+5,R17
   \   00000144   8107                       LDD     R16,Z+7
   \   00000146   B712                       IN      R17,0x32
   \   00000148   1701                       CP      R16,R17
   \   0000014A   F408                       BRCC    ??Kernel_RunScheduler_6
   \   0000014C   CF5C                       RJMP    ??Kernel_RunScheduler_1
   \                     ??Kernel_RunScheduler_6:
   \   0000014E   B70C                       IN      R16,0x3C
   \   00000150   E010                       LDI     R17,0
   \   00000152   5F0F                       SUBI    R16,255
   \   00000154   4F1F                       SBCI    R17,255
   \   00000156   8127                       LDD     R18,Z+7
   \   00000158   E030                       LDI     R19,0
   \   0000015A   1B02                       SUB     R16,R18
   \   0000015C   4010                       SBCI    R17,0
   \   0000015E   B722                       IN      R18,0x32
   \   00000160   0F20                       ADD     R18,R16
   \   00000162   1F31                       ADC     R19,R17
   \   00000164   CF56                       RJMP    ??Kernel_RunScheduler_2
     98          
     99          #if TASKER_DEBUG_LEVEL > 1
    100          		if(debugTimer == 0)
    101          		{
    102          			debugTimer=TASKER_DEBUG_RATE;
    103          
    104          			Kernel_DebuggerEvent(DEBUG_EVENT_TASKINFO, null, DEBUG_STATUS_OK, taskQueue[debugIndex].executionTime);
    105          			debugIndex++;			
    106          			if(taskQueue[debugIndex].theTask == null || debugIndex >= MAX_NUMBER_OF_TASKS)
    107          				debugIndex=0;
    108          		}
    109          #endif
    110          
    111            }
    112          }
    113          
    114          
    115          /***************************************************************************************************************************
    116          	
    117          ***************************************************************************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    118          void SystemTimer(void)
    119          {
    120          unsigned char index;
    121          
    122          	// Tick all active task timers
    123          	for(index=0;index<MAX_NUMBER_OF_TASKS;index++)				// For all task
   \   __nearfunc void SystemTimer();
   \                     SystemTimer:
   \   00000000   ....                       LDI     R30,LOW((taskQueue + 7))
   \   00000002   ....                       LDI     R31,(taskQueue + 7) >> 8
   \   00000004   E008                       LDI     R16,8
    124          	{
    125          		if(taskQueue[index].timer > 0)													// check if timer is active
   \                     ??SystemTimer_0:
   \   00000006   8120                       LD      R18,Z
   \   00000008   8131                       LDD     R19,Z+1
   \   0000000A   2B23                       OR      R18,R19
   \   0000000C   F031                       BREQ    ??SystemTimer_1
    126          		{
    127          			taskQueue[index].timer--;
   \   0000000E   8120                       LD      R18,Z
   \   00000010   8131                       LDD     R19,Z+1
   \   00000012   5021                       SUBI    R18,1
   \   00000014   4030                       SBCI    R19,0
   \   00000016   8320                       ST      Z,R18
   \   00000018   8331                       STD     Z+1,R19
   \                     ??SystemTimer_1:
   \   0000001A   963D                       ADIW    R31 : R30,13
   \   0000001C   950A                       DEC     R16
   \   0000001E   F799                       BRNE    ??SystemTimer_0
    128          		}
    129          	}
    130          	
    131          	executionTimer++;
   \   00000020   ....                       LDI     R30,LOW(totalExecutionTime)
   \   00000022   ....                       LDI     R31,(totalExecutionTime) >> 8
   \   00000024   8104                       LDD     R16,Z+4
   \   00000026   8115                       LDD     R17,Z+5
   \   00000028   5F0F                       SUBI    R16,255
   \   0000002A   4F1F                       SBCI    R17,255
   \   0000002C   8304                       STD     Z+4,R16
   \   0000002E   8315                       STD     Z+5,R17
    132          	totalExecutionTime++;
   \   00000030   8100                       LD      R16,Z
   \   00000032   8111                       LDD     R17,Z+1
   \   00000034   8122                       LDD     R18,Z+2
   \   00000036   8133                       LDD     R19,Z+3
   \   00000038   5F0F                       SUBI    R16,255
   \   0000003A   4F1F                       SBCI    R17,255
   \   0000003C   4F2F                       SBCI    R18,255
   \   0000003E   4F3F                       SBCI    R19,255
   \   00000040   8300                       ST      Z,R16
   \   00000042   8311                       STD     Z+1,R17
   \   00000044   8322                       STD     Z+2,R18
   \   00000046   8333                       STD     Z+3,R19
    133          	
    134          #if TASKER_DEBUG_LEVEL > 1
    135          	if(debugTimer > 0)
    136          		debugTimer--;
    137          #endif
    138          }
   \   00000048   9508                       RET
    139          
    140          
    141          /***************************************************************************************************************************
    142          	Returns the specfied tasks index in the task queue. If the task is not in the queue -1 is returned.
    143          ***************************************************************************************************************************/

   \                                 In segment CODE, align 2, keep-with-next
    144          signed char TaskToIndex(task t)
    145          {
    146          unsigned char index;
    147          
    148          	for(index=0;index<MAX_NUMBER_OF_TASKS;index++)
   \   __nearfunc signed char TaskToIndex(task);
   \                     TaskToIndex:
   \   00000000   E020                       LDI     R18,0
    149          	{
    150          		if(taskQueue[index].theTask==t)
   \                     ??TaskToIndex_0:
   \   00000002   E030                       LDI     R19,0
   \   00000004   E04D                       LDI     R20,13
   \   00000006   E050                       LDI     R21,0
   \   00000008   9F52                       MUL     R21,R18
   \   0000000A   2D50                       MOV     R21,R0
   \   0000000C   9F43                       MUL     R20,R19
   \   0000000E   0D50                       ADD     R21,R0
   \   00000010   9F42                       MUL     R20,R18
   \   00000012   2D40                       MOV     R20,R0
   \   00000014   0D51                       ADD     R21,R1
   \   00000016   01FA                       MOVW    R31 : R30,R21 : R20
   \   00000018   ....                       SUBI    R30,LOW((-(taskQueue) & 0xFFFF))
   \   0000001A   ....                       SBCI    R31,(-(taskQueue) & 0xFFFF) >> 8
   \   0000001C   8140                       LD      R20,Z
   \   0000001E   8151                       LDD     R21,Z+1
   \   00000020   1740                       CP      R20,R16
   \   00000022   0751                       CPC     R21,R17
   \   00000024   F411                       BRNE    ??TaskToIndex_1
    151          			return index;
   \   00000026   2F02                       MOV     R16,R18
   \   00000028   9508                       RET
   \                     ??TaskToIndex_1:
   \   0000002A   9523                       INC     R18
   \   0000002C   3028                       CPI     R18,8
   \   0000002E   F348                       BRCS    ??TaskToIndex_0
    152          	}
    153          
    154          	return -1;
   \   00000030   EF0F                       LDI     R16,255
   \   00000032   9508                       RET
    155          }

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for totalExecutionTime>`:
   \   00000000   00000000                   DB 0, 0, 0, 0
   \                     `?<Initializer for executionTimer>`:
   \   00000004   0000                       DB 0, 0
   \                     `?<Initializer for currentTaskIndex>`:
   \   00000006   FF                         DB 255
   \                     `?<Initializer for tcnt>`:
   \   00000007   00                         DB 0

   Maximum stack usage in bytes:

     Function               CSTACK  RSTACK
     --------               ------  ------
     Kernel_InitScheduler       0       2 
       -> Kernel_InitTimer      0       2 
     Kernel_RunScheduler        2       2 
       ->   Indirect call       2       2 
     SystemTimer                0       0 
     TaskToIndex                0       0 

 
      2 bytes in segment ABSOLUTE
    536 bytes in segment CODE
     12 bytes in segment INITTAB
      8 bytes in segment NEAR_I
      8 bytes in segment NEAR_ID
    104 bytes in segment NEAR_Z
 
    544 bytes of CODE memory (+ 12 bytes shared)
    112 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
