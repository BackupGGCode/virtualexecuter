##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:35:45 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Network\Ethernet.c         #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\N #
#                    etwork\Ethernet.c                                       #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\Ethernet.lst                                  #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\Ethernet.r90                                   #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "Network.h"
      2          
      3          

   \                                 In segment CODE, align 2, keep-with-next
      4          void ETHERNET_Send(const unsigned char *destination, unsigned short type, unsigned char *buffer, unsigned short length)
      5          {
   \   __nearfunc void ETHERNET_Send(unsigned char const *, unsigned short, unsigned char *, unsigned short);
   \                     ETHERNET_Send:
   \   00000000   925A                       ST      -Y,R5
   \   00000002   924A                       ST      -Y,R4
   \   00000004   93BA                       ST      -Y,R27
   \   00000006   93AA                       ST      -Y,R26
   \   00000008   939A                       ST      -Y,R25
   \   0000000A   938A                       ST      -Y,R24
   \   0000000C                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   01D9                       MOVW    R27 : R26,R19 : R18
   \   0000000E   012A                       MOVW    R5 : R4,R21 : R20
   \   00000010   01CB                       MOVW    R25 : R24,R23 : R22
      6          	MemCpy(destination, buffer + ETHERNET_DESTINATION, 6);
   \   00000012   E046                       LDI     R20,6
   \   00000014   E050                       LDI     R21,0
   \   00000016   0192                       MOVW    R19 : R18,R5 : R4
   \   00000018   ........                   CALL    MemCpy
      7          	MemCpy(mac, buffer + ETHERNET_SOURCE, 6);
   \   0000001C   E046                       LDI     R20,6
   \   0000001E   E050                       LDI     R21,0
   \   00000020   0192                       MOVW    R19 : R18,R5 : R4
   \   00000022   5F2A                       SUBI    R18,250
   \   00000024   4F3F                       SBCI    R19,255
   \   00000026   ....                       LDI     R16,LOW(mac)
   \   00000028   ....                       LDI     R17,(mac) >> 8
   \   0000002A   ........                   CALL    MemCpy
      8          	PutShort(buffer + ETHERNET_TYPE, type);
   \   0000002E   019D                       MOVW    R19 : R18,R27 : R26
   \   00000030   0182                       MOVW    R17 : R16,R5 : R4
   \   00000032   5F04                       SUBI    R16,244
   \   00000034   4F1F                       SBCI    R17,255
   \   00000036   ........                   CALL    PutShort
      9          	NIC_SendBlocking(buffer, ETHERNET_HEADER_SIZE + length);
   \   0000003A   960E                       ADIW    R25 : R24,14
   \   0000003C   019C                       MOVW    R19 : R18,R25 : R24
   \   0000003E   0182                       MOVW    R17 : R16,R5 : R4
   \   00000040   ........                   CALL    NIC_SendBlocking
     10          }
   \   00000044   9189                       LD      R24,Y+
   \   00000046   9199                       LD      R25,Y+
   \   00000048   91A9                       LD      R26,Y+
   \   0000004A   91B9                       LD      R27,Y+
   \   0000004C   9049                       LD      R4,Y+
   \   0000004E   9059                       LD      R5,Y+
   \   00000050   9508                       RET
     11          
     12          

   \                                 In segment CODE, align 2, keep-with-next
     13          void ETHERNET_Receive()
     14          {
     15          	if(NIC_Get(globalBuffer, GLOBAL_BUFFER_SIZE) >= ETHERNET_HEADER_SIZE)
   \   __nearfunc void ETHERNET_Receive();
   \                     ETHERNET_Receive:
   \   00000000   E22C                       LDI     R18,44
   \   00000002   E031                       LDI     R19,1
   \   00000004   ....                       LDI     R16,LOW(globalBuffer)
   \   00000006   ....                       LDI     R17,(globalBuffer) >> 8
   \   00000008   ........                   CALL    NIC_Get
   \   0000000C   300E                       CPI     R16,14
   \   0000000E   4010                       SBCI    R17,0
   \   00000010   F0BC                       BRLT    ??ETHERNET_Receive_0
     16          	{
     17          		switch(GetShort(globalBuffer + ETHERNET_TYPE))																				// Demultiplex
   \   00000012   ....                       LDI     R16,LOW((globalBuffer + 12))
   \   00000014   ....                       LDI     R17,(globalBuffer + 12) >> 8
   \   00000016   ........                   CALL    GetShort
   \   0000001A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000001C   50E0                       SUBI    R30,0
   \   0000001E   40F8                       SBCI    R31,8
   \   00000020   F019                       BREQ    ??ETHERNET_Receive_1
   \   00000022   9736                       SBIW    R31 : R30,6
   \   00000024   F049                       BREQ    ??ETHERNET_Receive_2
   \   00000026   9508                       RET
     18          		{
     19          			case ETHERNET_TYPE_IP:			ARP_Cache(globalBuffer);
   \                     ??ETHERNET_Receive_1:
   \   00000028   ....                       LDI     R16,LOW(globalBuffer)
   \   0000002A   ....                       LDI     R17,(globalBuffer) >> 8
   \   0000002C   ........                   CALL    ARP_Cache
     20          																	IP_Receive(globalBuffer);
   \   00000030   ....                       LDI     R16,LOW(globalBuffer)
   \   00000032   ....                       LDI     R17,(globalBuffer) >> 8
   \   00000034   ........                   JMP     IP_Receive
     21          																	break;
     22          			case ETHERNET_TYPE_ARP:			ARP_Receive(globalBuffer);
   \                     ??ETHERNET_Receive_2:
   \   00000038   ....                       LDI     R16,LOW(globalBuffer)
   \   0000003A   ....                       LDI     R17,(globalBuffer) >> 8
   \   0000003C   ........                   CALL    ARP_Receive
     23          																	break;
     24          			default:										
     25          																	break;
     26          		}
     27          	}
     28          }
   \                     ??ETHERNET_Receive_0:
   \   00000040   9508                       RET

   Maximum stack usage in bytes:

     Function               CSTACK  RSTACK
     --------               ------  ------
     ETHERNET_Receive           0       2 
       -> NIC_Get               0       2 
       -> GetShort              0       2 
       -> ARP_Cache             0       2 
       -> IP_Receive            0       2 
       -> ARP_Receive           0       2 
     ETHERNET_Send              6       2 
       -> MemCpy                6       2 
       -> MemCpy                6       2 
       -> PutShort              6       2 
       -> NIC_SendBlocking      6       2 

 
    148 bytes in segment CODE
 
    148 bytes of CODE memory

Errors: none
Warnings: none
