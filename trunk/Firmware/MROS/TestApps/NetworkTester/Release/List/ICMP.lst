##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN, Evaluation Version04/Dec/2007  19:35:46 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  f:\Projects\[Drivers]\C\MROS\Network\ICMP.c             #
#    Command line =  --cpu=m32 -ms -o f:\Projects\[Drivers]\C\MROS\TestApps\ #
#                    NetworkTester\Release\Obj\ -I "C:\Program Files\IAR     #
#                    Systems\Ew23 Evaluation version\avr\SRC\CLIB\INC\" -I   #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\    #
#                    -I f:\Projects\[Drivers]\C\MROS\ -I                     #
#                    f:\Projects\[Drivers]\C\MROS\Network\ -lC               #
#                    f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ -e --initializers_in_flash -s9 --debug       #
#                    -DENABLE_BIT_DEFINITIONS f:\Projects\[Drivers]\C\MROS\N #
#                    etwork\ICMP.c                                           #
#    List file    =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\List\ICMP.lst                                      #
#    Object file  =  f:\Projects\[Drivers]\C\MROS\TestApps\NetworkTester\Rel #
#                    ease\Obj\ICMP.r90                                       #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "Network.h"
      2          
      3          

   \                                 In segment CODE, align 2, keep-with-next
      4          void ICMP_Receive(unsigned char *buffer, unsigned short packetLength)
      5          {
   \   __nearfunc void ICMP_Receive(unsigned char *, unsigned short);
   \                     ICMP_Receive:
   \   00000000   925A                       ST      -Y,R5
   \   00000002   924A                       ST      -Y,R4
   \   00000004   93BA                       ST      -Y,R27
   \   00000006   93AA                       ST      -Y,R26
   \   00000008   939A                       ST      -Y,R25
   \   0000000A   938A                       ST      -Y,R24
   \   0000000C                              REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                              REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   01C8                       MOVW    R25 : R24,R17 : R16
   \   0000000E   01D9                       MOVW    R27 : R26,R19 : R18
      6          	if(	(buffer[ICMP_TYPE] == ICMP_TYPE_REQUEST) &&																				// Echo request (ping)
      7          			(buffer[ICMP_CODE] == ICMP_CODE_ZERO)
      8          		)
   \   00000010   0128                       MOVW    R5 : R4,R17 : R16
   \   00000012   E202                       LDI     R16,34
   \   00000014   0E40                       ADD     R4,R16
   \   00000016   E000                       LDI     R16,0
   \   00000018   1E50                       ADC     R5,R16
   \   0000001A   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000001C   8100                       LD      R16,Z
   \   0000001E   3008                       CPI     R16,8
   \   00000020   F509                       BRNE    ??ICMP_Receive_0
   \   00000022   8101                       LDD     R16,Z+1
   \   00000024   2300                       TST     R16
   \   00000026   F4F1                       BRNE    ??ICMP_Receive_0
      9          	{
     10          		buffer[ICMP_TYPE] = ICMP_TYPE_REPLY;
   \   00000028   E000                       LDI     R16,0
   \   0000002A   8300                       ST      Z,R16
     11          		PutShort(buffer + ICMP_CHECKSUM, NULL);
   \   0000002C   E020                       LDI     R18,0
   \   0000002E   E030                       LDI     R19,0
   \   00000030   2F08                       MOV     R16,R24
   \   00000032   5D0C                       SUBI    R16,220
   \   00000034   4F1F                       SBCI    R17,255
   \   00000036   ........                   CALL    PutShort
     12          		PutShort(buffer + ICMP_CHECKSUM, OnesComplementChecksum(buffer + ICMP_HEADER, packetLength));
   \   0000003A   019D                       MOVW    R19 : R18,R27 : R26
   \   0000003C   0182                       MOVW    R17 : R16,R5 : R4
   \   0000003E   ........                   CALL    OnesComplementChecksum
   \   00000042   0198                       MOVW    R19 : R18,R17 : R16
   \   00000044   018C                       MOVW    R17 : R16,R25 : R24
   \   00000046   5D0C                       SUBI    R16,220
   \   00000048   4F1F                       SBCI    R17,255
   \   0000004A   ........                   CALL    PutShort
     13          		IP_Send(GetLong(buffer + IP_SOURCE), IP_PROTOCOL_ICMP, buffer, packetLength);
   \   0000004E   018C                       MOVW    R17 : R16,R25 : R24
   \   00000050   5E06                       SUBI    R16,230
   \   00000052   4F1F                       SBCI    R17,255
   \   00000054   ........                   CALL    GetLong
   \   00000058   93BA                       ST      -Y,R27
   \   0000005A   93AA                       ST      -Y,R26
   \   0000005C   01BC                       MOVW    R23 : R22,R25 : R24
   \   0000005E   E041                       LDI     R20,1
   \   00000060   ........                   CALL    IP_Send
     14          	}
     15          }
   \                     ??ICMP_Receive_0:
   \   00000064   9189                       LD      R24,Y+
   \   00000066   9199                       LD      R25,Y+
   \   00000068   91A9                       LD      R26,Y+
   \   0000006A   91B9                       LD      R27,Y+
   \   0000006C   9049                       LD      R4,Y+
   \   0000006E   9059                       LD      R5,Y+
   \   00000070   9508                       RET

   Maximum stack usage in bytes:

     Function                     CSTACK  RSTACK
     --------                     ------  ------
     ICMP_Receive                     8       2 
       -> PutShort                    6       2 
       -> OnesComplementChecksum      6       2 
       -> PutShort                    6       2 
       -> GetLong                     6       2 
       -> IP_Send                     8       2 

 
    114 bytes in segment CODE
 
    114 bytes of CODE memory

Errors: none
Warnings: none
