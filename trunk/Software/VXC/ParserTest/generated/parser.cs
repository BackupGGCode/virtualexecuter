/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using VXC.node;
using VXC.lexer;
using VXC.analysis;

namespace VXC.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTVoid(TVoid node)
    {
        index = 0;
    }

    public override void CaseTSsingle(TSsingle node)
    {
        index = 1;
    }

    public override void CaseTUsingle(TUsingle node)
    {
        index = 2;
    }

    public override void CaseTSdouble(TSdouble node)
    {
        index = 3;
    }

    public override void CaseTUdouble(TUdouble node)
    {
        index = 4;
    }

    public override void CaseTSquad(TSquad node)
    {
        index = 5;
    }

    public override void CaseTUquad(TUquad node)
    {
        index = 6;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 7;
    }

    public override void CaseTString(TString node)
    {
        index = 8;
    }

    public override void CaseTIdentifier(TIdentifier node)
    {
        index = 9;
    }

    public override void CaseTLPar(TLPar node)
    {
        index = 10;
    }

    public override void CaseTRPar(TRPar node)
    {
        index = 11;
    }

    public override void CaseTSemicolon(TSemicolon node)
    {
        index = 12;
    }

    public override void CaseTComma(TComma node)
    {
        index = 13;
    }

    public override void CaseEOF(EOF node)
    {
        index = 14;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(0), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(5), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(6), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(7), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(8), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(8), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(8), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(8), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(8), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(8), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(8), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(8), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(8), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(9), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(9), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PSrcFile node1 = (PSrcFile) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        TypedList listNode2 = new TypedList();
        ASrcFile psrcfileNode1 = new ASrcFile (
              listNode2
        );
        nodeList.Add(psrcfileNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        ASrcFile psrcfileNode1 = new ASrcFile (
              listNode3
        );
        nodeList.Add(psrcfileNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodDecl pmethoddeclNode2 = (PMethodDecl)nodeArrayList1[0];
        AMethodDeclDecl pdeclNode1 = new AMethodDeclDecl (
              pmethoddeclNode2
        );
        nodeList.Add(pdeclNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PGlobalDecl pglobaldeclNode2 = (PGlobalDecl)nodeArrayList1[0];
        AGlobalDeclDecl pdeclNode1 = new AGlobalDeclDecl (
              pglobaldeclNode2
        );
        nodeList.Add(pdeclNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode5 = new TypedList();
        PType ptypeNode2 = (PType)nodeArrayList1[0];
        TIdentifier tidentifierNode3 = (TIdentifier)nodeArrayList2[0];
        TypedList listNode4 = (TypedList)nodeArrayList3[0];
        if ( listNode4 != null )
        {
            listNode5.AddAll(listNode4);
        }
        AMethodDecl pmethoddeclNode1 = new AMethodDecl (
              ptypeNode2,
              tidentifierNode3,
              listNode5
        );
        nodeList.Add(pmethoddeclNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PType ptypeNode2 = (PType)nodeArrayList1[0];
        TIdentifier tidentifierNode3 = (TIdentifier)nodeArrayList2[0];
        AGlobalDecl pglobaldeclNode1 = new AGlobalDecl (
              ptypeNode2,
              tidentifierNode3
        );
        nodeList.Add(pglobaldeclNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        TypedList listNode1 = new TypedList();
        nodeList.Add(listNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode1 = new TypedList();
        nodeList.Add(listNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        if ( listNode1 != null )
        {
            listNode2.AddAll(listNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PLocalDecl plocaldeclNode1 = (PLocalDecl)nodeArrayList1[0];
        if ( plocaldeclNode1 != null )
        {
            listNode2.Add(plocaldeclNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PLocalDecl plocaldeclNode2 = (PLocalDecl)nodeArrayList3[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( plocaldeclNode2 != null )
        {
            listNode3.Add(plocaldeclNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PType ptypeNode2 = (PType)nodeArrayList1[0];
        TIdentifier tidentifierNode3 = (TIdentifier)nodeArrayList2[0];
        ALocalDecl plocaldeclNode1 = new ALocalDecl (
              ptypeNode2,
              tidentifierNode3
        );
        nodeList.Add(plocaldeclNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASsingleType ptypeNode1 = new ASsingleType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUsingleType ptypeNode1 = new AUsingleType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASdoubleType ptypeNode1 = new ASdoubleType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUdoubleType ptypeNode1 = new AUdoubleType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ASquadType ptypeNode1 = new ASquadType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AUquadType ptypeNode1 = new AUquadType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AFloatType ptypeNode1 = new AFloatType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AStringType ptypeNode1 = new AStringType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AVoidType ptypeNode1 = new AVoidType (
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PDecl pdeclNode1 = (PDecl)nodeArrayList1[0];
        if ( pdeclNode1 != null )
        {
            listNode2.Add(pdeclNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PDecl pdeclNode2 = (PDecl)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pdeclNode2 != null )
        {
            listNode3.Add(pdeclNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 0},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {14, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {9, 0, 16},
      },
      new int[][] {
        new int[] {-1, 1, 1},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {10, 0, 18},
        new int[] {12, 0, 19},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {0, 0, 21},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {12, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 8},
        new int[] {9, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {11, 0, 27},
        new int[] {13, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {9, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 6},
        new int[] {6, 0, 7},
        new int[] {7, 0, 8},
        new int[] {8, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 10},
      },
      new int[][] {
        new int[] {-1, 11},
        new int[] {15, 17},
      },
      new int[][] {
        new int[] {-1, 12},
      },
      new int[][] {
        new int[] {-1, 13},
      },
      new int[][] {
        new int[] {-1, 20},
      },
      new int[][] {
        new int[] {-1, 22},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 24},
        new int[] {28, 30},
      },
      new int[][] {
        new int[] {-1, 14},
        new int[] {18, 25},
        new int[] {28, 25},
      },
      new int[][] {
        new int[] {-1, 15},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', EOF",
      "expecting: identifier",
      "expecting: EOF",
      "expecting: '(', ';'",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string', ')', ','",
      "expecting: ';'",
      "expecting: identifier, ')', ','",
      "expecting: ')', ','",
      "expecting: 'void', 'ssingle', 'usingle', 'sdouble', 'udouble', 'squad', 'uquad', 'float', 'string'",
    };

    private static int[] errors = {
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 
      3, 0, 4, 0, 5, 6, 7, 7, 7, 1, 0, 5, 8, 7, 7, 
    };
}
}
