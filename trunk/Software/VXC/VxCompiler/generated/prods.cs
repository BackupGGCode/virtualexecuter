/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  VXC.analysis;

namespace VXC.node {

public abstract class PModule : Node
{
}

public abstract class PDecl : Node
{
}

public abstract class PType : Node
{
}

public abstract class PTypeSign : Node
{
}

public abstract class PFormalsAndBody : Node
{
}

public abstract class PStm : Node
{
}

public abstract class PExp : Node
{
}

public abstract class PBoolean : Node
{
}

public abstract class PUnop : Node
{
}


public sealed class AModule : PModule
{
    private TypedList _decl_;

    public AModule ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public AModule (
            IList _decl_
    )
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
    }

    public override Object Clone()
    {
        return new AModule (
            CloneList (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModule(this);
    }

    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Decl_Cast : Cast
    {
        AModule obj;

        internal Decl_Cast (AModule obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AVarDecl : PDecl
{
    private PType _type_;
    private PExp _buf_;
    private PTypeSign _type_sign_;
    private PExp _init_;
    private TIdentifier _name_;

    public AVarDecl ()
    {
    }

    public AVarDecl (
            PType _type_,
            PExp _buf_,
            PTypeSign _type_sign_,
            PExp _init_,
            TIdentifier _name_
    )
    {
        SetType (_type_);
        SetBuf (_buf_);
        SetTypeSign (_type_sign_);
        SetInit (_init_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AVarDecl (
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_buf_),
            (PTypeSign)CloneNode (_type_sign_),
            (PExp)CloneNode (_init_),
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDecl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetBuf ()
    {
        return _buf_;
    }

    public void SetBuf (PExp node)
    {
        if(_buf_ != null)
        {
            _buf_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _buf_ = node;
    }
    public PTypeSign GetTypeSign ()
    {
        return _type_sign_;
    }

    public void SetTypeSign (PTypeSign node)
    {
        if(_type_sign_ != null)
        {
            _type_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_sign_ = node;
    }
    public PExp GetInit ()
    {
        return _init_;
    }

    public void SetInit (PExp node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_buf_)
            + ToString (_type_sign_)
            + ToString (_init_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _buf_ == child )
        {
            _buf_ = null;
            return;
        }
        if ( _type_sign_ == child )
        {
            _type_sign_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _buf_ == oldChild )
        {
            SetBuf ((PExp) newChild);
            return;
        }
        if ( _type_sign_ == oldChild )
        {
            SetTypeSign ((PTypeSign) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PExp) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AFuncDecl : PDecl
{
    private PType _type_;
    private TIdentifier _name_;
    private PFormalsAndBody _formals_and_body_;

    public AFuncDecl ()
    {
    }

    public AFuncDecl (
            PType _type_,
            TIdentifier _name_,
            PFormalsAndBody _formals_and_body_
    )
    {
        SetType (_type_);
        SetName (_name_);
        SetFormalsAndBody (_formals_and_body_);
    }

    public override Object Clone()
    {
        return new AFuncDecl (
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PFormalsAndBody)CloneNode (_formals_and_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncDecl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PFormalsAndBody GetFormalsAndBody ()
    {
        return _formals_and_body_;
    }

    public void SetFormalsAndBody (PFormalsAndBody node)
    {
        if(_formals_and_body_ != null)
        {
            _formals_and_body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formals_and_body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_formals_and_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _formals_and_body_ == child )
        {
            _formals_and_body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _formals_and_body_ == oldChild )
        {
            SetFormalsAndBody ((PFormalsAndBody) newChild);
            return;
        }
    }

}
public sealed class APortDecl : PDecl
{
    private TIdentifier _name_;
    private PType _type_;
    private PExp _buf_;
    private PExp _init_;
    private PExp _adress_;

    public APortDecl ()
    {
    }

    public APortDecl (
            TIdentifier _name_,
            PType _type_,
            PExp _buf_,
            PExp _init_,
            PExp _adress_
    )
    {
        SetName (_name_);
        SetType (_type_);
        SetBuf (_buf_);
        SetInit (_init_);
        SetAdress (_adress_);
    }

    public override Object Clone()
    {
        return new APortDecl (
            (TIdentifier)CloneNode (_name_),
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_buf_),
            (PExp)CloneNode (_init_),
            (PExp)CloneNode (_adress_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPortDecl(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetBuf ()
    {
        return _buf_;
    }

    public void SetBuf (PExp node)
    {
        if(_buf_ != null)
        {
            _buf_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _buf_ = node;
    }
    public PExp GetInit ()
    {
        return _init_;
    }

    public void SetInit (PExp node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }
    public PExp GetAdress ()
    {
        return _adress_;
    }

    public void SetAdress (PExp node)
    {
        if(_adress_ != null)
        {
            _adress_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _adress_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_type_)
            + ToString (_buf_)
            + ToString (_init_)
            + ToString (_adress_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _buf_ == child )
        {
            _buf_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
        if ( _adress_ == child )
        {
            _adress_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _buf_ == oldChild )
        {
            SetBuf ((PExp) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PExp) newChild);
            return;
        }
        if ( _adress_ == oldChild )
        {
            SetAdress ((PExp) newChild);
            return;
        }
    }

}
public sealed class AEnumDecl : PDecl
{
    private TIdentifier _name_;

    public AEnumDecl ()
    {
    }

    public AEnumDecl (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AEnumDecl (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnumDecl(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AVoidType : PType
{
    private TKwVoid _token_;

    public AVoidType ()
    {
    }

    public AVoidType (
            TKwVoid _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AVoidType (
            (TKwVoid)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVoidType(this);
    }

    public TKwVoid GetToken ()
    {
        return _token_;
    }

    public void SetToken (TKwVoid node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TKwVoid) newChild);
            return;
        }
    }

}
public sealed class ASingleType : PType
{


    public ASingleType (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADoubleType : PType
{


    public ADoubleType (
    )
    {
    }

    public override Object Clone()
    {
        return new ADoubleType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADoubleType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AQuadType : PType
{


    public AQuadType (
    )
    {
    }

    public override Object Clone()
    {
        return new AQuadType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAQuadType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFloatType : PType
{


    public AFloatType (
    )
    {
    }

    public override Object Clone()
    {
        return new AFloatType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ABooleanType : PType
{


    public ABooleanType (
    )
    {
    }

    public override Object Clone()
    {
        return new ABooleanType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AStringType : PType
{


    public AStringType (
    )
    {
    }

    public override Object Clone()
    {
        return new AStringType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASignedTypeSign : PTypeSign
{


    public ASignedTypeSign (
    )
    {
    }

    public override Object Clone()
    {
        return new ASignedTypeSign (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASignedTypeSign(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AUnsignedTypeSign : PTypeSign
{


    public AUnsignedTypeSign (
    )
    {
    }

    public override Object Clone()
    {
        return new AUnsignedTypeSign (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnsignedTypeSign(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFormalsAndBody : PFormalsAndBody
{
    private TypedList _formals_;
    private PStm _body_;

    public AFormalsAndBody ()
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
    }

    public AFormalsAndBody (
            IList _formals_,
            PStm _body_
    )
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._formals_.Clear();
        this._formals_.AddAll(_formals_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AFormalsAndBody (
            CloneList (_formals_),
            (PStm)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFormalsAndBody(this);
    }

    public IList GetFormals ()
    {
        return _formals_;
    }

    public void setFormals (IList list)
    {
        _formals_.Clear();
        _formals_.AddAll(list);
    }
    public PStm GetBody ()
    {
        return _body_;
    }

    public void SetBody (PStm node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formals_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formals_.Contains(child) )
        {
            _formals_.Remove(child);
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _formals_.Count; i++ )
        {
            Node n = (Node)_formals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _formals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _formals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PStm) newChild);
            return;
        }
    }

    private class Formals_Cast : Cast
    {
        AFormalsAndBody obj;

        internal Formals_Cast (AFormalsAndBody obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADeclStm : PStm
{
    private PDecl _decl_;

    public ADeclStm ()
    {
    }

    public ADeclStm (
            PDecl _decl_
    )
    {
        SetDecl (_decl_);
    }

    public override Object Clone()
    {
        return new ADeclStm (
            (PDecl)CloneNode (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStm(this);
    }

    public PDecl GetDecl ()
    {
        return _decl_;
    }

    public void SetDecl (PDecl node)
    {
        if(_decl_ != null)
        {
            _decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_ == child )
        {
            _decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_ == oldChild )
        {
            SetDecl ((PDecl) newChild);
            return;
        }
    }

}
public sealed class ABlockStm : PStm
{
    private TypedList _block_;

    public ABlockStm ()
    {
        this._block_ = new TypedList(new Block_Cast(this));
    }

    public ABlockStm (
            IList _block_
    )
    {
        this._block_ = new TypedList(new Block_Cast(this));
        this._block_.Clear();
        this._block_.AddAll(_block_);
    }

    public override Object Clone()
    {
        return new ABlockStm (
            CloneList (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABlockStm(this);
    }

    public IList GetBlock ()
    {
        return _block_;
    }

    public void setBlock (IList list)
    {
        _block_.Clear();
        _block_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _block_.Contains(child) )
        {
            _block_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _block_.Count; i++ )
        {
            Node n = (Node)_block_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _block_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _block_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Block_Cast : Cast
    {
        ABlockStm obj;

        internal Block_Cast (ABlockStm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStm node = (PStm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStm node = (PStm) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AExpStm : PStm
{
    private PExp _exp_;

    public AExpStm ()
    {
    }

    public AExpStm (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AExpStm (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpStm(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AReturnStm : PStm
{
    private PExp _exp_;

    public AReturnStm ()
    {
    }

    public AReturnStm (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AReturnStm (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnStm(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AIfelseStm : PStm
{
    private PExp _cond_;
    private PStm _then_;
    private PStm _else_;

    public AIfelseStm ()
    {
    }

    public AIfelseStm (
            PExp _cond_,
            PStm _then_,
            PStm _else_
    )
    {
        SetCond (_cond_);
        SetThen (_then_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new AIfelseStm (
            (PExp)CloneNode (_cond_),
            (PStm)CloneNode (_then_),
            (PStm)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfelseStm(this);
    }

    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PStm GetThen ()
    {
        return _then_;
    }

    public void SetThen (PStm node)
    {
        if(_then_ != null)
        {
            _then_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_ = node;
    }
    public PStm GetElse ()
    {
        return _else_;
    }

    public void SetElse (PStm node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cond_)
            + ToString (_then_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _then_ == child )
        {
            _then_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _then_ == oldChild )
        {
            SetThen ((PStm) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PStm) newChild);
            return;
        }
    }

}
public sealed class AIfStm : PStm
{
    private PExp _cond_;
    private PStm _then_;

    public AIfStm ()
    {
    }

    public AIfStm (
            PExp _cond_,
            PStm _then_
    )
    {
        SetCond (_cond_);
        SetThen (_then_);
    }

    public override Object Clone()
    {
        return new AIfStm (
            (PExp)CloneNode (_cond_),
            (PStm)CloneNode (_then_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStm(this);
    }

    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PStm GetThen ()
    {
        return _then_;
    }

    public void SetThen (PStm node)
    {
        if(_then_ != null)
        {
            _then_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cond_)
            + ToString (_then_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _then_ == child )
        {
            _then_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _then_ == oldChild )
        {
            SetThen ((PStm) newChild);
            return;
        }
    }

}
public sealed class AForStm : PStm
{
    private PDecl _init_;
    private PExp _cond_;
    private PExp _update_;

    public AForStm ()
    {
    }

    public AForStm (
            PDecl _init_,
            PExp _cond_,
            PExp _update_
    )
    {
        SetInit (_init_);
        SetCond (_cond_);
        SetUpdate (_update_);
    }

    public override Object Clone()
    {
        return new AForStm (
            (PDecl)CloneNode (_init_),
            (PExp)CloneNode (_cond_),
            (PExp)CloneNode (_update_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForStm(this);
    }

    public PDecl GetInit ()
    {
        return _init_;
    }

    public void SetInit (PDecl node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }
    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PExp GetUpdate ()
    {
        return _update_;
    }

    public void SetUpdate (PExp node)
    {
        if(_update_ != null)
        {
            _update_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _update_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_init_)
            + ToString (_cond_)
            + ToString (_update_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _update_ == child )
        {
            _update_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _init_ == oldChild )
        {
            SetInit ((PDecl) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _update_ == oldChild )
        {
            SetUpdate ((PExp) newChild);
            return;
        }
    }

}
public sealed class AForeachStm : PStm
{
    private PType _type_;
    private TIdentifier _id_;
    private PStm _body_;

    public AForeachStm ()
    {
    }

    public AForeachStm (
            PType _type_,
            TIdentifier _id_,
            PStm _body_
    )
    {
        SetType (_type_);
        SetId (_id_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AForeachStm (
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_id_),
            (PStm)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForeachStm(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetId ()
    {
        return _id_;
    }

    public void SetId (TIdentifier node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PStm GetBody ()
    {
        return _body_;
    }

    public void SetBody (PStm node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_id_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TIdentifier) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PStm) newChild);
            return;
        }
    }

}
public sealed class AEmptyStm : PStm
{


    public AEmptyStm (
    )
    {
    }

    public override Object Clone()
    {
        return new AEmptyStm (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyStm(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ABreakStm : PStm
{


    public ABreakStm (
    )
    {
    }

    public override Object Clone()
    {
        return new ABreakStm (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreakStm(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANamedExp : PExp
{
    private TIdentifier _id_;

    public ANamedExp ()
    {
    }

    public ANamedExp (
            TIdentifier _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ANamedExp (
            (TIdentifier)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANamedExp(this);
    }

    public TIdentifier GetId ()
    {
        return _id_;
    }

    public void SetId (TIdentifier node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AIntConstExp : PExp
{
    private TIntegerLiteral _value_;

    public AIntConstExp ()
    {
    }

    public AIntConstExp (
            TIntegerLiteral _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AIntConstExp (
            (TIntegerLiteral)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntConstExp(this);
    }

    public TIntegerLiteral GetValue ()
    {
        return _value_;
    }

    public void SetValue (TIntegerLiteral node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((TIntegerLiteral) newChild);
            return;
        }
    }

}
public sealed class ABoolConstExp : PExp
{
    private PBoolean _value_;

    public ABoolConstExp ()
    {
    }

    public ABoolConstExp (
            PBoolean _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ABoolConstExp (
            (PBoolean)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABoolConstExp(this);
    }

    public PBoolean GetValue ()
    {
        return _value_;
    }

    public void SetValue (PBoolean node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PBoolean) newChild);
            return;
        }
    }

}
public sealed class AFloatConstExp : PExp
{
    private PBoolean _value_;

    public AFloatConstExp ()
    {
    }

    public AFloatConstExp (
            PBoolean _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AFloatConstExp (
            (PBoolean)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatConstExp(this);
    }

    public PBoolean GetValue ()
    {
        return _value_;
    }

    public void SetValue (PBoolean node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PBoolean) newChild);
            return;
        }
    }

}
public sealed class AStringConstExp : PExp
{
    private PBoolean _value_;

    public AStringConstExp ()
    {
    }

    public AStringConstExp (
            PBoolean _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AStringConstExp (
            (PBoolean)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringConstExp(this);
    }

    public PBoolean GetValue ()
    {
        return _value_;
    }

    public void SetValue (PBoolean node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PBoolean) newChild);
            return;
        }
    }

}
public sealed class ACastExp : PExp
{
    private PType _type_;
    private PExp _exp_;

    public ACastExp ()
    {
    }

    public ACastExp (
            PType _type_,
            PExp _exp_
    )
    {
        SetType (_type_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ACastExp (
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACastExp(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AUnaryExp : PExp
{
    private PUnop _unop_;
    private PExp _exp_;

    public AUnaryExp ()
    {
    }

    public AUnaryExp (
            PUnop _unop_,
            PExp _exp_
    )
    {
        SetUnop (_unop_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AUnaryExp (
            (PUnop)CloneNode (_unop_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnaryExp(this);
    }

    public PUnop GetUnop ()
    {
        return _unop_;
    }

    public void SetUnop (PUnop node)
    {
        if(_unop_ != null)
        {
            _unop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _unop_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_unop_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _unop_ == child )
        {
            _unop_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _unop_ == oldChild )
        {
            SetUnop ((PUnop) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASizeofExp : PExp
{
    private PExp _arg_;

    public ASizeofExp ()
    {
    }

    public ASizeofExp (
            PExp _arg_
    )
    {
        SetArg (_arg_);
    }

    public override Object Clone()
    {
        return new ASizeofExp (
            (PExp)CloneNode (_arg_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASizeofExp(this);
    }

    public PExp GetArg ()
    {
        return _arg_;
    }

    public void SetArg (PExp node)
    {
        if(_arg_ != null)
        {
            _arg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arg_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arg_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arg_ == child )
        {
            _arg_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arg_ == oldChild )
        {
            SetArg ((PExp) newChild);
            return;
        }
    }

}
public sealed class ASizeofTypeExp : PExp
{
    private PType _arg_;

    public ASizeofTypeExp ()
    {
    }

    public ASizeofTypeExp (
            PType _arg_
    )
    {
        SetArg (_arg_);
    }

    public override Object Clone()
    {
        return new ASizeofTypeExp (
            (PType)CloneNode (_arg_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASizeofTypeExp(this);
    }

    public PType GetArg ()
    {
        return _arg_;
    }

    public void SetArg (PType node)
    {
        if(_arg_ != null)
        {
            _arg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arg_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arg_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arg_ == child )
        {
            _arg_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arg_ == oldChild )
        {
            SetArg ((PType) newChild);
            return;
        }
    }

}
public sealed class AIncExp : PExp
{
    private PExp _lhs_;

    public AIncExp ()
    {
    }

    public AIncExp (
            PExp _lhs_
    )
    {
        SetLhs (_lhs_);
    }

    public override Object Clone()
    {
        return new AIncExp (
            (PExp)CloneNode (_lhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIncExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADecExp : PExp
{
    private PExp _lhs_;

    public ADecExp ()
    {
    }

    public ADecExp (
            PExp _lhs_
    )
    {
        SetLhs (_lhs_);
    }

    public override Object Clone()
    {
        return new ADecExp (
            (PExp)CloneNode (_lhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADecExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AFunctionExp : PExp
{
    private PExp _exp_;

    public AFunctionExp ()
    {
    }

    public AFunctionExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AFunctionExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AInitExp : PExp
{
    private PExp _exp_;

    public AInitExp ()
    {
    }

    public AInitExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AInitExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInitExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ARshiftExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ARshiftExp ()
    {
    }

    public ARshiftExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ARshiftExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARshiftExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALshiftExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ALshiftExp ()
    {
    }

    public ALshiftExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALshiftExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALshiftExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMinusExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AMinusExp ()
    {
    }

    public AMinusExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AMinusExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class APlusExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public APlusExp ()
    {
    }

    public APlusExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new APlusExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AModExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AModExp ()
    {
    }

    public AModExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AModExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADivideExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ADivideExp ()
    {
    }

    public ADivideExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ADivideExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AMultiplyExp ()
    {
    }

    public AMultiplyExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AMultiplyExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AAssignExp ()
    {
    }

    public AAssignExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AAssignExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ABitwiseOrExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ABitwiseOrExp ()
    {
    }

    public ABitwiseOrExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ABitwiseOrExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitwiseOrExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ABitwiseAndExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ABitwiseAndExp ()
    {
    }

    public ABitwiseAndExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ABitwiseAndExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitwiseAndExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ABitwiseXorExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ABitwiseXorExp ()
    {
    }

    public ABitwiseXorExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ABitwiseXorExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitwiseXorExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALtExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ALtExp ()
    {
    }

    public ALtExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALtExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AGtExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AGtExp ()
    {
    }

    public AGtExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGtExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALtEqExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ALtEqExp ()
    {
    }

    public ALtEqExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALtEqExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtEqExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AGtEqExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AGtEqExp ()
    {
    }

    public AGtEqExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGtEqExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtEqExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ANotEqExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ANotEqExp ()
    {
    }

    public ANotEqExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ANotEqExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class AEqEqExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public AEqEqExp ()
    {
    }

    public AEqEqExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AEqEqExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqEqExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALogicalOrExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ALogicalOrExp ()
    {
    }

    public ALogicalOrExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALogicalOrExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicalOrExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALogicalAndExp : PExp
{
    private PExp _lhs_;
    private PExp _rhs_;

    public ALogicalAndExp ()
    {
    }

    public ALogicalAndExp (
            PExp _lhs_,
            PExp _rhs_
    )
    {
        SetLhs (_lhs_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALogicalAndExp (
            (PExp)CloneNode (_lhs_),
            (PExp)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicalAndExp(this);
    }

    public PExp GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExp node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public PExp GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExp node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExp) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExp) newChild);
            return;
        }
    }

}
public sealed class ACondExp : PExp
{
    private PExp _cond_;
    private PExp _true_;
    private PExp _false_;

    public ACondExp ()
    {
    }

    public ACondExp (
            PExp _cond_,
            PExp _true_,
            PExp _false_
    )
    {
        SetCond (_cond_);
        SetTrue (_true_);
        SetFalse (_false_);
    }

    public override Object Clone()
    {
        return new ACondExp (
            (PExp)CloneNode (_cond_),
            (PExp)CloneNode (_true_),
            (PExp)CloneNode (_false_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondExp(this);
    }

    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PExp GetTrue ()
    {
        return _true_;
    }

    public void SetTrue (PExp node)
    {
        if(_true_ != null)
        {
            _true_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _true_ = node;
    }
    public PExp GetFalse ()
    {
        return _false_;
    }

    public void SetFalse (PExp node)
    {
        if(_false_ != null)
        {
            _false_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _false_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cond_)
            + ToString (_true_)
            + ToString (_false_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _true_ == child )
        {
            _true_ = null;
            return;
        }
        if ( _false_ == child )
        {
            _false_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _true_ == oldChild )
        {
            SetTrue ((PExp) newChild);
            return;
        }
        if ( _false_ == oldChild )
        {
            SetFalse ((PExp) newChild);
            return;
        }
    }

}
public sealed class ATrueBoolean : PBoolean
{


    public ATrueBoolean (
    )
    {
    }

    public override Object Clone()
    {
        return new ATrueBoolean (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrueBoolean(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFalseBoolean : PBoolean
{


    public AFalseBoolean (
    )
    {
    }

    public override Object Clone()
    {
        return new AFalseBoolean (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFalseBoolean(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class APositiveUnop : PUnop
{


    public APositiveUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new APositiveUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPositiveUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANegativeUnop : PUnop
{


    public ANegativeUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new ANegativeUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AInverseUnop : PUnop
{


    public AInverseUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new AInverseUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInverseUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANotUnop : PUnop
{


    public ANotUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new ANotUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}

public sealed class Start : Node
{
    private PModule _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PModule _base_,
        EOF _eof_)
    {
        SetPModule(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PModule) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PModule GetPModule()
    {
        return _base_;
    }
    public void SetPModule(PModule node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPModule((PModule) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
