
// This is the sablecc grammar for the VXC high level programming language.
// Writen by Arild Boes, 2008.

Package VXC;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers

// Numbers
    digit = ['0'..'9'];
    non_zero_digit = ['1'..'9'];   
    decimal_numeral = '0' | non_zero_digit digit*;
    
// Letters    
    lowercase_letter = ['a'..'z'];
    uppercase_letter = ['A'..'Z'];
    letter = (lowercase_letter | uppercase_letter)*;
    identifier_letter = letter;
    identifier_letter_or_digit = letter | digit;
   
// Formatting
    ht  = 0x09;
    lf  = 0x0a;
    ff  = 0x0c;
    cr  = 0x0d;    
    sp  = ' ';
    line_terminator = lf | cr | cr lf; 

/*******************************************************************
 * Tokens *
 *******************************************************************/
Tokens

   void = 'void';
   ssingle = 'ssingle';
   usingle = 'usingle';
   sdouble = 'sdouble';
   udouble = 'udouble';
   squad = 'squad';
   uquad = 'uquad';
   float = 'float';
   string = 'string';
   const = 'const';
   volatile = 'volatile';
   return = 'return';
   port = 'port';

   comment = '//' (letter | sp)* line_terminator?;
   whitespace = (sp | ht | ff | line_terminator)*;
  
   l_par = '(';
   r_par = ')';
   l_curly = '{';
   r_curly = '}';
   semicolon = ';';
   comma = ',';
   minus = '-';
   at = '@';
   
// Literals
	integer_literal = decimal_numeral;   

// Identifier

   identifier = identifier_letter identifier_letter_or_digit*;
   	
// Assignment 
    assign = '=';

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens

    whitespace,
    comment;
    
/*******************************************************************
 * Productions													   *
 *******************************************************************/
Productions

	/* source file */
	source_file {-> source_file} = 
		declaration+
		{-> New source_file([declaration.declaration])}
	;

	/* declaration */
	declaration {-> declaration} =      
		  {variable} variable_definition
			{-> New declaration.variable(variable_definition)}
		| {function} function_definition
			 {-> New declaration.function(function_definition)}
		| {port} port_definition
			 {-> New declaration.port(port_definition)}
	; 

	/* function definition */
	function_definition {-> function_definition} =
	    type_specifier identifier function_params function_body 
		 {-> New function_definition(type_specifier.type_specifier,identifier,
					New formals_and_body([function_params.local_decl], 
										 [function_body.variable_definition],
										 [function_body.statement],
										 function_body.return_statement))}
	;	

	/* function body */
	function_body {-> variable_definition* statement* return_statement} =
		l_curly variable_definition* statement* return_statement r_curly
			{-> [variable_definition.variable_definition]
				[statement.statement]
				return_statement.return_statement}
	;
	
	/* function parameters */
	function_params {-> local_decl*} =
	    l_par formal_parameter_list r_par
		 {-> [formal_parameter_list.local_decl]}
	  ;
	
	/* parameter list*/
	formal_parameter_list {-> local_decl*} =
	    {none} {-> []}
	  | {void} void {-> []}
	  | {parm_list} formal_parameter_list_nonempty
		 {-> [formal_parameter_list_nonempty.local_decl]}
	  ;

	formal_parameter_list_nonempty {-> local_decl*} =
	    {formal_parameter} formal_parameter
		 {-> [formal_parameter.local_decl]}
	  | {formal_parameter_list} formal_parameter_list comma formal_parameter
		 {-> [formal_parameter_list.local_decl, formal_parameter.local_decl]}
	  ;

	formal_parameter {-> local_decl} =
	    {param} type_specifier identifier variable_initializer?
		   {-> New local_decl(type_specifier.type_specifier, 
							  variable_initializer.expression,
							  identifier)}
	  ;
	
	/* statements */
	statement {-> statement} =
		 {empty} semicolon
			{-> New statement.empty()}	   
	;
	
	return_statement {-> return_statement} =
		 return semicolon
			{-> New return_statement.void(return)}	   
	;
	
	/* port definition */
	port_definition {-> port_definition} =
		port type_specifier identifier at integer_literal semicolon
			{-> New port_definition(type_specifier,identifier)}
	;
	
	/* variable definition */
	variable_definition {-> variable_definition} =
	    type_qualifier? type_specifier identifier variable_initializer? semicolon
		 {-> New variable_definition(type_specifier, 
									 type_qualifier, 
									 variable_initializer.expression,
									 identifier)}
	;
	
	/* variable initializer */
	variable_initializer {-> expression} =
		assign expression 
			{ -> expression.expression}
	;
		
	/* type qualifier */
	type_qualifier {-> type_qualifier} = 
		  {const} const
			{-> New type_qualifier.const()}
		| {volatile} volatile
			{-> New type_qualifier.volatile()}
	;
	
	/* type specifier */
	type_specifier {-> type_specifier} =
	    {ssingle} ssingle
		 {-> New type_specifier.ssingle()}
	  | {usingle} usingle
		 {-> New type_specifier.usingle()}
	  | {sdouble} sdouble
		 {-> New type_specifier.sdouble()}
	  | {udouble} udouble
		{-> New type_specifier.udouble()}
	  | {squad} squad
		{-> New type_specifier.squad()}
	  | {uquad} uquad
		 {-> New type_specifier.uquad()}
	  | {float} float
		{-> New type_specifier.float()}
	  | {string} string
		{-> New type_specifier.string()}
	  | {void} void
		 {-> New type_specifier.void()}
	  ;

	/* Expressions */
	expression {-> expression} =
		literal
			{-> literal.expression}
	;		
			
	/* Literals */		
	literal {-> expression} =
	  	  {integer_constant} integer_literal
			{-> New expression.integer_constant(Null, integer_literal)}
		| {negative_integer_constant} minus integer_literal
			{-> New expression.integer_constant(minus, integer_literal)}
	;
	
/*******************************************************************
 * Abstract Syntax Tree *
 *******************************************************************/
Abstract Syntax Tree

    source_file= [declaration]:declaration+;

    declaration =  {variable} [declaration]:variable_definition
	         | {function} [declaration]:function_definition
	         | {port} [declaration]:port_definition;

    function_definition = [type_specifier]:type_specifier [name]:identifier [formals_and_body]:formals_and_body;

    local_decl = [type]:type_specifier [init]:expression? [name]:identifier;

    variable_definition = [type_specifier]:type_specifier [type_qualifier]:type_qualifier? [init]:expression? [name]:identifier;

	port_definition = [type_specifier]:type_specifier [name]:identifier;
	
	type_qualifier = {const} | {volatile};
	
    type_specifier = {void} | {ssingle} | {usingle} | {sdouble} | {udouble} | {squad} | {uquad} | {float} | {string};
	
	statement = {empty};
	
	return_statement = {void} [token]:return;
	
	formals_and_body = [formals]:local_decl*
					   [locals]:variable_definition*
                       [statements]:statement*
                       [return]:return_statement;

	expression = {integer_constant} [sign]:minus? integer_literal;

