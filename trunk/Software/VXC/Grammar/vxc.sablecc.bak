
// This is the sablecc grammar for the VXC high level programming language.
// Writen by Arild Boes, 2008.

Package VXC;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers

   latin1_input_character = [0..0xff];
    ht  = 0x09;
    lf  = 0x0a;
    ff  = 0x0c;
    cr  = 0x0d;
    sp  = ' ';

    line_terminator = lf | cr | cr lf; 
    input_character = [latin1_input_character - [cr + lf]];

    not_star =    [input_character - '*'] | line_terminator;
    not_star_not_slash = [input_character - ['*' + '/']] | line_terminator;

    digit = ['0'..'9'];
    non_zero_digit = ['1'..'9'];

    decimal_numeral = '0' | non_zero_digit digit*;

    latin1_letter =
        [0x41..0x5a] | [0x61..0x7a] | [0xaa..0xaa] | [0xb5..0xb5] |
        [0xba..0xba] | [0xc0..0xd6] | [0xd8..0xf6] | [0xf8..0xff];

    identifier_letter = latin1_letter | '$' | '_';
    identifier_letter_or_digit = identifier_letter | digit | '$' | '_';

    string_character = [input_character - ['"' + '\']];


/*******************************************************************
 * Tokens *
 *******************************************************************/
Tokens

   // Keywords
   kw_return = 'return';
   kw_break = 'break';
   kw_if = 'if'; 
   kw_then = 'then';
   kw_else = 'else';
   kw_foreach = 'foreach';	
   kw_for = 'for';
   kw_true = 'true';
   kw_false = 'false';
   kw_sizeof = 'sizeof';
   kw_void = 'void';
   kw_single = 'single';   
   kw_double = 'double';
   kw_quad = 'quad';
   kw_float = 'float';
   kw_string = 'string';
   kw_signed = 'signed';
   kw_unsigned = 'unsigned';
   kw_port = 'port';

   // ignored 
   traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
   documentation_comment =    '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';
   end_of_line_comment = '//' input_character* line_terminator?;
   whitespace = (sp | ht | ff | line_terminator)*;
  
   // tokens
   tok_dot = '.';
   tok_lbracket = '[';
   tok_rbracket = ']';
   tok_lpar = '(';
   tok_rpar = ')';
   tok_lcurly = '{';
   tok_rcurly = '}';
   tok_semicolon = ';';
   tok_comma = ',';
   tok_minus = '-';
   tok_colon = ':';
   tok_question = '?';
   tok_eq = '=';
   tok_bar = '|';
   tok_bar_bar = '||';
   tok_amp = '&';
   tok_amp_amp = '&&';
   tok_caret = '^';
   tok_lshift = '<<';
   tok_rshift = '>>';
   tok_lt = '<';
   tok_gt = '>';
   tok_lt_eq = '<=';
   tok_gt_eq = '>=';
   tok_eq_eq = '==';
   tok_not_eq = '!=';
   tok_plus_plus = '++';
   tok_minus_minus = '--';
   tok_star = '*';
   tok_plus ='+';
   tok_percent = '%';
   tok_tilde = '~';
   tok_exclamation = '!';
   tok_slash = '/';

// Literal and names 

   integer_literal = decimal_numeral;
   string_literal = '"' string_character* '"';
   identifier = identifier_letter identifier_letter_or_digit*;


/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens

    whitespace,
    traditional_comment,
    end_of_line_comment, 
    documentation_comment;
    
/*******************************************************************
 * Productions													   *
 *******************************************************************/
Productions

// ********** §1 Modules and Declarations **********

/* §1 Module Declaration */

module {-> module} =
       declaration+
       {-> New module([declaration.decl])}
;
	
/* §1.1 General Declarations */

declaration {-> decl} =
	 {var}   variable_declaration
		 {-> variable_declaration.decl } |       
	 {func}  function_declaration
		 {-> function_declaration.decl } |
         {port}  port_declaration 
		 {-> port_declaration.decl };	

/* §1.2 Variable declaration */

variable_declaration {-> decl} =
	 {var} type_sign? type_specifier buffer? identifier initializer? tok_semicolon
	       {-> New decl.var(type_specifier.type,  buffer.exp, type_sign, initializer.exp, identifier)};	       

/* §1.3 Port declaration */

port_declaration {-> decl} =
	{port} kw_port type_specifier buffer? identifier tok_colon integer_literal initializer? tok_semicolon
	       {-> New decl.port(identifier, type_specifier.type, buffer.exp, initializer.exp, New exp.int_const(integer_literal))};

/* §1.4 Initializers */

initializer {-> exp} = 
	tok_eq expression
	{-> New exp.init(expression.exp)};

/* §1.5 Function declaration */

function_declaration {-> decl} = 
	 {func} type_specifier identifier function_params block_statement 
		{-> New decl.func(type_specifier.type, identifier, New formals_and_body([function_params.decl], 							      
											 block_statement.stm))};

/* §1.5.1 Function parameters */

function_params {-> decl*} =
	tok_lpar formal_parameter_list tok_rpar {-> [formal_parameter_list.decl]};

formal_parameter_list {-> decl*} =
	{none} {-> []} |
	{parm_list} formal_parameter_list_nonempty {-> [formal_parameter_list_nonempty.decl]};

formal_parameter_list_nonempty {-> decl*} =
    {one} formal_parameter {-> [formal_parameter.decl]} |
    {list} formal_parameter_list tok_comma formal_parameter {-> [formal_parameter_list.decl, formal_parameter.decl]};

formal_parameter {-> decl} =
    {param} type_sign? type_specifier buffer? identifier initializer?
	    {-> New decl.var(type_specifier.type, buffer.exp, type_sign, initializer.exp, identifier)};	       


// ********** Types **********

/* type_sign qualifier */
type_sign {-> type_sign} = 
	  {unsigned} kw_unsigned
		{-> New type_sign.unsigned()}
	| {signed} kw_signed
		{-> New type_sign.signed()}
;

/* type specifier */
type_specifier {-> type} =
    {single} kw_single {-> New type.single()}  |  {double} kw_double {-> New type.double()}  | 
    {quad} kw_quad {-> New type.quad()}	       |  {float} kw_float {-> New type.float()}     |
    {string} kw_string {-> New type.string()}  |  {void} kw_void {-> New type.void(kw_void)};

buffer {-> exp} = tok_lbracket expression tok_rbracket {-> expression.exp };


//********  Statements  ********

statement {-> stm} =
	{no_dangling}   no_dangling_statement
			{-> no_dangling_statement.stm} |
	{dangling}	dangling_statement
			{-> dangling_statement.stm};

no_dangling_statement {-> stm} =
	{block} block_statement
		{-> block_statement.stm } |
	{exp}	expression_statement
		{-> expression_statement.stm} |
	{jump}  jump_statement
		{-> jump_statement.stm} |
	{ifelse} kw_if tok_lpar expression tok_rpar no_dangling_statement kw_else [other]:no_dangling_statement
	        {-> New stm.ifelse(expression.exp, no_dangling_statement.stm, other.stm)};
	
dangling_statement {-> stm} = 
	{select} selection_statement
		 {-> selection_statement.stm} |
	{iter}	 iteration_statement
		 {-> iteration_statement.stm };

block_statement {-> stm} = 
	tok_lcurly block_item_list? tok_rcurly
	{-> New stm.block([block_item_list.stm])};		

block_item_list { -> stm* } = 
	block_item+ 
	{ -> [block_item.stm] } ;

block_item { -> stm } =
	{decl} declaration 
	       { -> New stm.decl(declaration.decl) } |
	{statement} statement 
	       { -> statement.stm } ;

expression_statement {-> stm} =
	expression? tok_semicolon
	{-> New stm.exp(expression.exp)};

selection_statement {-> stm} =
	{if}     kw_if tok_lpar expression tok_rpar statement 
	         { -> New stm.if(expression.exp, statement.stm) } |
	{ifelse}  kw_if tok_lpar expression tok_rpar no_dangling_statement kw_else [other]:dangling_statement 
		  { -> New stm.ifelse(expression.exp, no_dangling_statement.stm, other.stm) };

iteration_statement {-> stm} = 
	{for} kw_for tok_lpar variable_declaration? [cond]:expression tok_semicolon [update]:expression? tok_rpar
		  {-> New stm.for(variable_declaration.decl, cond.exp, update.exp) };

jump_statement {-> stm} =
	{jump}	 kw_break
		 {-> New stm.break()} |
	{return} kw_return expression tok_semicolon
		 {-> New stm.return(expression.exp)};




//********  Constants ********

constant {-> exp} =
	{int_const} integer_literal
		{-> New exp.int_const(integer_literal)} |
	{bool_const_true} kw_true
		{-> New exp.bool_const(New boolean.false())} |
	{bool_const_false} kw_false
		{-> New exp.bool_const(New boolean.false())};



//********  Expressions ********

primary_expression {-> exp} =	
	{identifier} identifier
		{-> New exp.named(identifier)} |
	{constant} constant
		{-> constant.exp } |
	{expression} tok_lpar expression tok_rpar
		{-> expression.exp };	

postfix_expression { -> exp } =
		{primary}	primary_expression
				{ -> primary_expression.exp } |
		//{array}		postfix_expression tok_lbracket expression tok_rbracket 
		//		{ -> New exp.array(postfix_expression.exp, expression.exp) } |
		{function}	postfix_expression tok_lpar tok_rpar 
				{ -> New exp.function(postfix_expression.exp) } |
		//{struct}	postfix_expression tok_dot identifier 
		//		{ -> New exp.struct(postfix_expression.exp, identifier) } |
		{increment}	postfix_expression tok_plus_plus 
				{ -> New exp.inc(postfix_expression.exp) } |
		{decrement}	postfix_expression tok_minus_minus 
				{ -> New exp.dec(postfix_expression.exp) };
	
unary_expression { -> exp } = 
	{postfix}	postfix_expression
			{ -> postfix_expression.exp } |
	{increment}	tok_plus_plus unary_expression 
			{ -> New exp.inc(unary_expression.exp) } |
	{decrement}	tok_minus_minus unary_expression 
			{ -> New exp.dec(unary_expression.exp) } |
	{unary}		unary_operator cast_expression 
			{ -> New exp.unary(unary_operator.unop, cast_expression.exp) } |
	{sizeof}	 kw_sizeof unary_expression 
			{ -> New exp.sizeof(unary_expression.exp) } |
	{sizeof_type}	 kw_sizeof tok_lpar type_specifier tok_rpar
			{ -> New exp.sizeof_type(type_specifier.type) } ;

unary_operator {-> unop} = 
	{positive} tok_plus { -> New unop.positive() } |
	{negative} tok_minus { -> New unop.negative() } |
	{inverse} tok_tilde { -> New unop.inverse() } |
	{not} tok_exclamation { -> New unop.not() } ;

cast_expression { -> exp } =
	{no}	unary_expression 
		{ -> unary_expression.exp } |
	{cast}  tok_lpar type_specifier tok_rpar cast_expression
		{ -> New exp.cast(type_specifier.type, cast_expression.exp) } ;

multiplicative_expression { -> exp } = 
	{no} cast_expression { -> cast_expression.exp } |
	{mult} multiplicative_expression tok_star cast_expression 
		{ -> New exp.multiply(multiplicative_expression.exp, cast_expression.exp) } |
	{divide} multiplicative_expression tok_slash cast_expression 
		{ -> New exp.divide(multiplicative_expression.exp, cast_expression.exp) } |
	{mod} multiplicative_expression tok_percent cast_expression
		{ -> New exp.mod(multiplicative_expression.exp, cast_expression.exp) } ;

additive_expression { -> exp } =
	{no}	multiplicative_expression 
		{ -> multiplicative_expression.exp } |
	{plus}  additive_expression tok_plus multiplicative_expression 
		{ -> New exp.plus(additive_expression.exp, multiplicative_expression.exp) } |
	{minus} additive_expression tok_minus multiplicative_expression
		{ -> New exp.minus(additive_expression.exp, multiplicative_expression.exp) } ;

shift_expression {-> exp} = 
	{no}	 additive_expression 
		 { -> additive_expression.exp} |
	{lshift} shift_expression tok_lshift additive_expression 
		 { -> New exp.lshift(shift_expression.exp, additive_expression.exp) } |
	{rshift} shift_expression tok_rshift additive_expression
		 { -> New exp.rshift(shift_expression.exp, additive_expression.exp) } ;

relational_expression { -> exp } =
	{no}	shift_expression 
		{ -> shift_expression.exp } |
	{lt}	relational_expression tok_lt shift_expression 
		{ -> New exp.lt(relational_expression.exp, shift_expression.exp) } |
	{gt} relational_expression tok_gt shift_expression 
		{ -> New exp.gt(relational_expression.exp, shift_expression.exp) } |
	{lt_eq} relational_expression tok_lt_eq shift_expression
		{ -> New exp.lt_eq(relational_expression.exp, shift_expression.exp) } |
	{gt_eq} relational_expression tok_gt_eq shift_expression
		{ -> New exp.gt_eq(relational_expression.exp, shift_expression.exp) } ;

equality_expression {-> exp} =
	{no}	 relational_expression 
		   { -> relational_expression.exp } |
	{eq_eq}  equality_expression tok_eq_eq relational_expression 
		   { -> New exp.eq_eq(equality_expression.exp, relational_expression.exp) } |
	{not_eq} equality_expression tok_not_eq relational_expression
		   { -> New exp.not_eq(equality_expression.exp,relational_expression.exp) } ;

and_expression {-> exp} =
	{no}	equality_expression 
		{ -> equality_expression.exp} |
	{and}	and_expression tok_amp equality_expression
		{ -> New exp.bitwise_and(and_expression.exp,equality_expression.exp) } ;

exclusive_or_expression { -> exp } = 
	{no}	and_expression
		{-> and_expression.exp} |
	{xor}	exclusive_or_expression tok_caret and_expression
		{-> New exp.bitwise_xor(exclusive_or_expression.exp, and_expression.exp)};

inclusive_or_expression {-> exp} =
	{no}	exclusive_or_expression
		{-> exclusive_or_expression.exp} |
	{or}	inclusive_or_expression tok_bar exclusive_or_expression	
		{-> New exp.bitwise_or(inclusive_or_expression.exp, exclusive_or_expression.exp)};
	
logical_and_expression {-> exp} =
	{no}   inclusive_or_expression 
	       {-> inclusive_or_expression.exp} |
	{and}  logical_and_expression tok_amp_amp inclusive_or_expression
	       {-> New exp.logical_and(logical_and_expression.exp, inclusive_or_expression.exp)};

logical_or_expression {-> exp} =
	{no}	logical_and_expression
		{-> logical_and_expression.exp} |
	{or}	logical_or_expression tok_bar_bar logical_and_expression
		{-> New exp.logical_or(logical_or_expression.exp, logical_and_expression.exp)};

conditional_expression {-> exp} = 
	{no}   logical_or_expression
		    {-> logical_or_expression.exp} |
	{cond}	    logical_or_expression tok_question expression tok_colon conditional_expression 
		    {-> New exp.cond(logical_or_expression.exp, expression.exp, conditional_expression.exp)};
	
assign_expression {-> exp} =
	{cond} conditional_expression 
		{-> conditional_expression.exp} |
	{assign} unary_expression tok_eq expression 
		{ -> New exp.assign(unary_expression.exp, expression.exp)};
	
expression {-> exp} =
	assign_expression
	{-> assign_expression.exp };

/*******************************************************************
 * Abstract Syntax Tree *
 *******************************************************************/
Abstract Syntax Tree

module = [decl]:decl+;

decl =   {var} [type]:type [buf]:exp? [type_sign]:type_sign? [init]:exp? [name]:identifier |
         {func} [type]:type [name]:identifier [formals_and_body]:formals_and_body |
         {port} [name]:identifier [type]:type  [buf]:exp? [init]:exp? [adress]:exp |
         {enum} [name]:identifier;

type = {void} [token]:kw_void  | {single} | {double} | {quad} | {float} | {boolean} | {string};

type_sign = {signed} | {unsigned};

formals_and_body = [formals]:decl* [body]:stm;
		   
stm =  {decl}	 [decl]:decl |
       {block}	 [block]:stm* |
       {exp}	 [exp]:exp? |	
       {return}  [exp]:exp |
       {ifelse}  [cond]:exp [then]:stm [else]:stm |
       {if}	 [cond]:exp [then]:stm |
       {for}	 [init]:decl? [cond]:exp [update]:exp? |
       {foreach} [type]:type? [id]:identifier? [body]:stm? |
       {empty} |
       {break};
	
exp =   
	// Primary expressions
	{named}	 [id]: identifier | 
	{int_const} [value]: integer_literal |
	{bool_const} [value]:boolean |
	{float_const} [value]:boolean? |
	{string_const} [value]:boolean? |

	// Unary expressions
	{cast}	 [type]:type [exp]:exp |
	{unary}  [unop]:unop [exp]:exp |
	{sizeof} [arg]:exp |
	{sizeof_type} [arg]:type |
	{inc} 	 [lhs]:exp |
	{dec}	 [lhs]:exp |
	{function} [exp]:exp |
	{init} [exp]:exp? |

	// Binary expressions
	{rshift} [lhs]:exp [rhs]:exp |
	{lshift} [lhs]:exp [rhs]:exp |
	{minus} [lhs]:exp [rhs]:exp |
	{plus} [lhs]:exp [rhs]:exp |
	{mod} [lhs]:exp [rhs]:exp |
	{divide} [lhs]:exp [rhs]:exp |
	{multiply} [lhs]:exp [rhs]:exp |
	{assign} [lhs]:exp? [rhs]:exp |
	{bitwise_or} [lhs]:exp [rhs]:exp |
	{bitwise_and} [lhs]:exp [rhs]:exp |
	{bitwise_xor} [lhs]:exp [rhs]:exp |
	
	// Conditional binary expressions 
	{lt} [lhs]:exp [rhs]:exp |
	{gt} [lhs]:exp [rhs]:exp |
	{lt_eq} [lhs]:exp [rhs]:exp |
	{gt_eq} [lhs]:exp [rhs]:exp |
	{not_eq} [lhs]:exp [rhs]:exp |
	{eq_eq} [lhs]:exp [rhs]:exp |
	{logical_or} [lhs]:exp [rhs]:exp |
	{logical_and} [lhs]:exp [rhs]:exp |
	{cond} [cond]:exp [true]:exp [false]:exp;

boolean = {true} | {false};

unop =  {positive} | {negative} | {inverse} | {not} ;
